import copy
import json
import os
import random
import traceback
import argparse
import logging
import sys
import pickle
import dill

from logging.handlers import RotatingFileHandler
from typing import Dict, List
from jinja2 import Environment, FileSystemLoader
from termcolor import colored
from lib import fuzz_mutate
from lib.codegen_context import CodeGenContext
from lib.debug_dump import diff_verb_snapshots, dump_verbs, snapshot_verbs, summarize_verb, summarize_verb_list
from lib.ibv_all import (
    IbvAHAttr,
    IbvAllocDmAttr,
    IbvGID,
    IbvGlobalRoute,
    IbvModifyCQAttr,
    IbvQPAttr,
    IbvQPCap,
    IbvQPInitAttr,
    IbvRecvWR,
    IbvSendWR,
    IbvSge,
    IbvSrqAttr,
    IbvSrqInitAttr,
)
from lib.verbs import (
    AllocDM,
    AllocPD,
    CreateCQ,
    CreateQP,
    CreateSRQ,
    DeallocPD,
    DeregMR,
    DestroyCQ,
    DestroyQP,
    DestroySRQ,
    FreeDeviceList,
    FreeDM,
    GetDeviceList,
    ModifyCQ,
    ModifyQP,
    ModifySRQ,
    OpenDevice,
    PollCQ,
    PostRecv,
    PostSend,
    PostSRQRecv,
    QueryDeviceAttr,
    QueryGID,
    QueryPortAttr,
    RegMR,
    VerbCall,
)


def render(verbs, ctx):
    for v in verbs:
        if isinstance(v, PollCQ):
            # remove PollCQ for simplicity
            verbs.remove(v)
    for v in verbs:
        print(summarize_verb(v, deep=True))
        print(ctx.tracker.objs)
        v.apply(ctx)
    body = "".join(v.generate_c(ctx) for v in verbs)
    template_dir = "./templates"
    template_name = "client.cpp.j2"
    env = Environment(loader=FileSystemLoader(template_dir), trim_blocks=True, lstrip_blocks=True)
    tpl = env.get_template(template_name)
    rendered = tpl.render(
        compile_units="pair_runtime.cpp runtime_resolver.c -lcjson",
        output_name="rdma_client_autogen",
        ib_port=1,
        msg_size=1024,
        bundle_env="RDMA_FUZZ_RUNTIME",
        client_update="client_update.json",
        length=1000,
        setup_region="/* setup generated by verbs (alloc/reg/create) moved here if你把这些也用 generate_c 产出 */",
        early_verbs_region="".join([]),
        verbs_region="".join(body),
        epilog_region="/* optional CQ polling & cleanup */",
        prolog_extra=ctx.generate_variable_definitions_all(),  # 如果你想注入额外 helper，这里填
    )
    return rendered


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Fuzz RDMA verbs")
    parser.add_argument("--input", type=str, required=True, help="Input pickle file")
    args = parser.parse_args()

    input_file = args.input
    if not os.path.isfile(input_file):
        print(f"Input file {input_file} does not exist.")
        sys.exit(1)

    with open(input_file, "rb") as f:
        # verbs = pickle.load(f)
        verbs = dill.load(f)
        code = render(verbs, CodeGenContext())
        with open("autogen_client.cpp", "w") as out_f:
            out_f.write(code)
        print("Generated code written to autogen_client.cpp")
