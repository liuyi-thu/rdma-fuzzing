// AUTOGEN: RDMA client (pairs + runtime) â€” generated by your fuzzer
// Toolchain: g++ -O2 -std=c++17 pair_runtime.cpp runtime_resolver.c -lcjson -libverbs -pthread -o rdma_client_autogen

#include <infiniband/verbs.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <thread>
#include <vector>
#include <string>
#include <algorithm>
#include <unistd.h>

#include "pair_runtime.h"
#include "runtime_resolver.h"

using std::string;
using std::vector;

static void die(const char *m)
{
    perror(m);
    exit(1);
}

// --------- User-configurable knobs (autofilled by generator) ----------
static const int IB_PORT = 1;
static const int MSG_SIZE = 1024;
static const char *BUNDLE_ENV = "RDMA_FUZZ_RUNTIME";
static const char *CLIENT_UPDATE_PATH = "client_update.json";

// --------- Prolog helper (optional; you can keep minimal) -------------
char bufs[1024][1024];
struct ibv_device **dev_list;
struct ibv_context *ctx;
struct ibv_device_attr dev_attr;
struct ibv_port_attr port_attr;
union ibv_gid gid;
struct ibv_cq *cq1 = NULL;
struct ibv_pd *pd0 = NULL;
struct ibv_srq *srq0;
struct ibv_cq *cq_5925 = NULL;
struct ibv_cq *cq0 = NULL;
struct ibv_cq *cq_3420 = NULL;
struct ibv_qp *qp0 = NULL;
struct ibv_pd *pd_30332 = NULL;
struct ibv_mr *mr0 = NULL;
struct ibv_qp *qp_22225 = NULL;
struct ibv_pd *pd1 = NULL;
struct ibv_pd *pd_19274 = NULL;
struct ibv_cq *cq_36481 = NULL;
struct ibv_pd *pd_1538 = NULL;
struct ibv_cq *cq_27634 = NULL;
struct ibv_srq *srq_49329;
struct ibv_srq *srq_18393;
struct ibv_cq *cq_8479 = NULL;
struct ibv_cq *cq_8217 = NULL;
struct ibv_mr *mr_65532 = NULL;
struct ibv_pd *pd_7015 = NULL;
struct ibv_cq *cq_41912 = NULL;
struct ibv_mr *mr_41358 = NULL;
struct ibv_cq *cq_29581 = NULL;
struct ibv_cq *cq_13938 = NULL;
struct ibv_pd *pd_8089 = NULL;
struct ibv_pd *pd_31363 = NULL;
struct ibv_cq *cq_54626 = NULL;
struct ibv_mr *mr_40241 = NULL;
struct ibv_pd *pd_26453 = NULL;
struct ibv_cq *cq_47623 = NULL;
struct ibv_pd *pd_39135 = NULL;
struct ibv_cq *cq_46537 = NULL;
struct ibv_mr *mr_19049 = NULL;
struct ibv_srq *srq_48306;
struct ibv_qp *qp_25614 = NULL;
struct ibv_pd *pd_2612 = NULL;
struct ibv_cq *cq_458 = NULL;
struct ibv_mr *mr_21526 = NULL;
struct ibv_cq *cq_58715 = NULL;
struct ibv_cq *cq_33396 = NULL;
struct ibv_cq *cq_38699 = NULL;
struct ibv_cq *cq_49818 = NULL;
struct ibv_pd *pd_11062 = NULL;
struct ibv_pd *pd_22094 = NULL;
struct ibv_cq *cq_32181 = NULL;
struct ibv_pd *pd_12518 = NULL;
struct ibv_dm *dm0;
struct ibv_srq *srq_53103;
struct ibv_cq *cq_28748 = NULL;
struct ibv_srq *srq_14213;
struct ibv_pd *pd_21322 = NULL;
struct ibv_pd *pd_53713 = NULL;
struct ibv_mr *mr_14130 = NULL;
struct ibv_cq *cq_34171 = NULL;
struct ibv_pd *pd_54343 = NULL;
struct ibv_pd *pd_7715 = NULL;
struct ibv_cq *cq_17581 = NULL;
struct ibv_pd *pd_60779 = NULL;
struct ibv_pd *pd_26424 = NULL;
struct ibv_pd *pd_36003 = NULL;
struct ibv_pd *pd_4461 = NULL;
struct ibv_mr *mr_65076 = NULL;
struct ibv_pd *pd_56596 = NULL;
struct ibv_cq *cq_52634 = NULL;
struct ibv_cq *cq_33410 = NULL;
struct ibv_cq *cq_23583 = NULL;
struct ibv_srq *srq_49998;
struct ibv_srq *srq_34475;
struct ibv_pd *pd_20875 = NULL;
struct ibv_pd *pd_21661 = NULL;
struct ibv_mr *mr_44723 = NULL;
struct ibv_cq *cq_12619 = NULL;
struct ibv_pd *pd_51130 = NULL;
struct ibv_srq *srq_29539;
struct ibv_cq *cq_53207 = NULL;
struct ibv_pd *pd_11319 = NULL;
struct ibv_qp *qp_43498 = NULL;
struct ibv_srq *srq_19331;
struct ibv_cq *cq_30626 = NULL;
struct ibv_pd *pd_47444 = NULL;
struct ibv_pd *pd_1795 = NULL;
struct ibv_srq *srq_32812;
struct ibv_cq *cq_23893 = NULL;
struct ibv_pd *pd_32462 = NULL;
struct ibv_mr *mr_8841 = NULL;
struct ibv_cq *cq_38993 = NULL;
struct ibv_cq *cq_36440 = NULL;
struct ibv_cq *cq_6228 = NULL;
struct ibv_cq *cq_55033 = NULL;
struct ibv_qp *qp_41889 = NULL;
struct ibv_pd *pd_25161 = NULL;
struct ibv_pd *pd_64898 = NULL;
struct ibv_mr *mr_2793 = NULL;
struct ibv_cq *cq_18411 = NULL;
struct ibv_pd *pd_61297 = NULL;
struct ibv_qp *qp_63079 = NULL;
struct ibv_qp *qp_35711 = NULL;
struct ibv_srq *srq_45126;
struct ibv_mr *mr_48797 = NULL;
struct ibv_qp *qp_21954 = NULL;
struct ibv_srq *srq_25231;
struct ibv_cq *cq_30816 = NULL;
struct ibv_mr *mr_15727 = NULL;
struct ibv_srq *srq_23908;
struct ibv_pd *pd_45886 = NULL;
struct ibv_srq *srq_36186;
struct ibv_srq *srq_17737;
struct ibv_qp *qp_22910 = NULL;
struct ibv_qp *qp_24314 = NULL;
struct ibv_srq *srq_21981;
struct ibv_qp *qp_34374 = NULL;
struct ibv_qp *qp_28385 = NULL;
struct ibv_pd *pd_65297 = NULL;
struct ibv_mr *mr_63467 = NULL;
struct ibv_cq *cq_40763 = NULL;
struct ibv_srq *srq_38693;
struct ibv_qp *qp_7527 = NULL;
struct ibv_cq *cq_59233 = NULL;
struct ibv_mr *mr_20970 = NULL;
struct ibv_qp *qp_27913 = NULL;
struct ibv_srq *srq_508;
struct ibv_srq_init_attr srq_init_attr_0;
struct ibv_srq_attr srq_init_attr_0_attr;
struct ibv_qp_init_attr attr_init_qp0;
struct ibv_qp_cap attr_init_qp0_cap;
struct ibv_qp_attr qp_attr_qp0;
struct ibv_ah_attr qp_attr_qp0_ah;
struct ibv_global_route qp_attr_qp0_ah_grh;
struct ibv_modify_cq_attr modify_cq_attr;
struct ibv_moderate_cq modify_cq_attr_moderate;
struct ibv_recv_wr recv_wr_srq0;
struct ibv_sge recv_wr_srq0_sge_0;
struct ibv_recv_wr *bad_recv_wr_srq0 = NULL;
struct ibv_qp_init_attr attr_init_qp_22225;
struct ibv_qp_cap attr_init_qp_22225_cap;
struct ibv_srq_init_attr srq_init_attr__49329;
struct ibv_srq_attr srq_init_attr__49329_attr;
struct ibv_srq_init_attr srq_init_attr__18393;
struct ibv_srq_attr srq_init_attr__18393_attr;
struct ibv_srq_attr srq_attr_srq_49329;
struct ibv_srq_init_attr srq_init_attr__48306;
struct ibv_srq_attr srq_init_attr__48306_attr;
struct ibv_recv_wr recv_wr_srq_49329;
struct ibv_sge recv_wr_srq_49329_sge_0;
struct ibv_recv_wr recv_wr_srq_49329_next;
struct ibv_sge recv_wr_srq_49329_next_sge_0;
struct ibv_recv_wr *bad_recv_wr_srq_49329 = NULL;
struct ibv_qp_init_attr attr_init_qp_25614;
struct ibv_qp_cap attr_init_qp_25614_cap;
struct ibv_srq_attr srq_attr_srq_48306;
struct ibv_recv_wr recv_wr_srq_18393;
struct ibv_sge recv_wr_srq_18393_sge_0;
struct ibv_recv_wr recv_wr_srq_18393_next;
struct ibv_sge recv_wr_srq_18393_next_sge_0;
struct ibv_recv_wr *bad_recv_wr_srq_18393 = NULL;
struct ibv_srq_attr srq_attr_srq_18393;
struct ibv_alloc_dm_attr dm_attr_dm0;
struct ibv_srq_init_attr srq_init_attr__53103;
struct ibv_srq_attr srq_init_attr__53103_attr;
struct ibv_srq_init_attr srq_init_attr__14213;
struct ibv_srq_attr srq_init_attr__14213_attr;
struct ibv_recv_wr recv_wr_srq_48306;
struct ibv_sge recv_wr_srq_48306_sge_0;
struct ibv_recv_wr *bad_recv_wr_srq_48306 = NULL;
struct ibv_srq_attr srq_attr_srq_14213;
struct ibv_srq_attr srq_attr_srq0;
struct ibv_recv_wr recv_wr_srq_14213;
struct ibv_sge recv_wr_srq_14213_sge_0;
struct ibv_recv_wr *bad_recv_wr_srq_14213 = NULL;
struct ibv_srq_init_attr srq_init_attr__49998;
struct ibv_srq_attr srq_init_attr__49998_attr;
struct ibv_srq_init_attr srq_init_attr__34475;
struct ibv_srq_attr srq_init_attr__34475_attr;
struct ibv_recv_wr recv_wr_srq_53103;
struct ibv_recv_wr recv_wr_srq_53103_next;
struct ibv_recv_wr *bad_recv_wr_srq_53103 = NULL;
struct ibv_srq_init_attr srq_init_attr__29539;
struct ibv_srq_attr srq_init_attr__29539_attr;
struct ibv_qp_init_attr attr_init_qp_43498;
struct ibv_qp_cap attr_init_qp_43498_cap;
struct ibv_srq_attr srq_attr_srq_29539;
struct ibv_srq_init_attr srq_init_attr__19331;
struct ibv_srq_attr srq_init_attr__19331_attr;
struct ibv_srq_init_attr srq_init_attr__32812;
struct ibv_srq_attr srq_init_attr__32812_attr;
struct ibv_recv_wr recv_wr_srq_34475;
struct ibv_sge recv_wr_srq_34475_sge_0;
struct ibv_recv_wr *bad_recv_wr_srq_34475 = NULL;
struct ibv_sge recv_wr_srq_53103_sge_0;
struct ibv_srq_attr srq_attr_srq_32812;
struct ibv_recv_wr recv_wr_srq_49998;
struct ibv_sge recv_wr_srq_49998_sge_0;
struct ibv_recv_wr recv_wr_srq_49998_next;
struct ibv_recv_wr *bad_recv_wr_srq_49998 = NULL;
struct ibv_qp_init_attr attr_init_qp_41889;
struct ibv_qp_cap attr_init_qp_41889_cap;
struct ibv_recv_wr recv_wr_srq_29539;
struct ibv_sge recv_wr_srq_29539_sge_0;
struct ibv_recv_wr *bad_recv_wr_srq_29539 = NULL;
struct ibv_qp_init_attr attr_init_qp_63079;
struct ibv_qp_cap attr_init_qp_63079_cap;
struct ibv_qp_init_attr attr_init_qp_35711;
struct ibv_qp_cap attr_init_qp_35711_cap;
struct ibv_srq_init_attr srq_init_attr__45126;
struct ibv_srq_attr srq_init_attr__45126_attr;
struct ibv_qp_init_attr attr_init_qp_21954;
struct ibv_qp_cap attr_init_qp_21954_cap;
struct ibv_srq_init_attr srq_init_attr__25231;
struct ibv_srq_attr srq_init_attr__25231_attr;
struct ibv_srq_attr srq_attr_srq_53103;
struct ibv_qp_attr qp_attr_qp_63079;
struct ibv_srq_init_attr srq_init_attr__23908;
struct ibv_srq_attr srq_init_attr__23908_attr;
struct ibv_srq_init_attr srq_init_attr__36186;
struct ibv_srq_attr srq_init_attr__36186_attr;
struct ibv_srq_init_attr srq_init_attr__17737;
struct ibv_srq_attr srq_init_attr__17737_attr;
struct ibv_qp_init_attr attr_init_qp_22910;
struct ibv_qp_cap attr_init_qp_22910_cap;
struct ibv_qp_init_attr attr_init_qp_24314;
struct ibv_qp_cap attr_init_qp_24314_cap;
struct ibv_recv_wr recv_wr_srq_17737;
struct ibv_sge recv_wr_srq_17737_sge_0;
struct ibv_recv_wr *bad_recv_wr_srq_17737 = NULL;
struct ibv_srq_init_attr srq_init_attr__21981;
struct ibv_srq_attr srq_init_attr__21981_attr;
struct ibv_qp_init_attr attr_init_qp_34374;
struct ibv_qp_cap attr_init_qp_34374_cap;
struct ibv_qp_init_attr attr_init_qp_28385;
struct ibv_qp_cap attr_init_qp_28385_cap;
struct ibv_qp_attr qp_attr_qp_28385;
struct ibv_srq_init_attr srq_init_attr__38693;
struct ibv_srq_attr srq_init_attr__38693_attr;
struct ibv_qp_init_attr attr_init_qp_7527;
struct ibv_qp_cap attr_init_qp_7527_cap;
struct ibv_qp_init_attr attr_init_qp_27913;
struct ibv_qp_cap attr_init_qp_27913_cap;
struct ibv_srq_init_attr srq_init_attr__508;
struct ibv_srq_attr srq_init_attr__508_attr;

// --- Prepare PR_* for CLAIMED ---
PR_QP qps[1000];
PR_MR mrs[1000];
PR_Pair prs[1000];
int qps_size;
int mrs_size;
int prs_size;

// ---------------------- main ----------------------
int main(int argc, char **argv)
{
    pr_init(BUNDLE_ENV);

    // --- Local buffers / MRs / QPs (generated) ---
    /* setup generated by verbs (alloc/reg/create) moved here ifä½ æŠŠè¿™äº›ä¹Ÿç”¨ generate_c äº§å‡º */

    // --- Optional early verbs (donâ€™t need remote params; e.g., PostRecv) ---

    // --- Main verbs body (generated) ---
    printf("[1] GetDeviceList(dev_list=dev_list) start.\n");

    /* ibv_get_device_list */
    dev_list = ibv_get_device_list(NULL);
    if (!dev_list)
    {
        fprintf(stderr, "Failed to get device list: %s\n", strerror(errno));
        ;
    }
    printf("[1] done.\n");

    printf("[2] OpenDevice(device=dev_list) start.\n");

    /* ibv_open_device */
    ctx = ibv_open_device(dev_list[0]);
    if (!ctx)
    {
        fprintf(stderr, "Failed to open device\n");
        ;
    }
    printf("[2] done.\n");

    printf("[3] FreeDeviceList(dev_list=dev_list, context=<lib.codegen_context.CodeGenContext object at...) start.\n");

    /* ibv_free_device_list */
    ibv_free_device_list(dev_list);
    printf("[3] done.\n");

    printf("[4] QueryDeviceAttr(output=dev_attr) start.\n");

    /* ibv_query_device */
    if (ibv_query_device(ctx, &dev_attr))
    {
        fprintf(stderr, "Failed to query device attributes\n");
        ;
    }
    printf("[4] done.\n");

    printf("[5] QueryPortAttr(port_num=1) start.\n");

    /* ibv_query_port */
    if (ibv_query_port(ctx, 1, &port_attr))
    {
        fprintf(stderr, "Failed to query port attributes\n");
        ;
    }
    printf("[5] done.\n");

    printf("[6] QueryGID(port_num=1, index=1) start.\n");

    /* ibv_query_gid */
    if (ibv_query_gid(ctx, 1, 1, &gid))
    {
        fprintf(stderr, "Failed to query GID\n");
        ;
    }
    printf("[6] done.\n");

    printf("[7] CreateCQ(cqe=32, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq1) start.\n");

    /* ibv_create_cq */
    cq1 = ibv_create_cq(ctx, 32,
                        NULL, NULL,
                        0);
    if (!cq1)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[7] done.\n");

    printf("[8] AllocPD(pd=pd0) start.\n");

    /* ibv_alloc_pd */
    pd0 = ibv_alloc_pd(ctx);
    if (!pd0)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[8] done.\n");

    printf("[9] CreateSRQ(pd=pd0, srq=srq0, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{max_wr=0}}) start.\n");

    /* ibv_create_srq */

    memset(&srq_init_attr_0, 0, sizeof(srq_init_attr_0));

    memset(&srq_init_attr_0_attr, 0, sizeof(srq_init_attr_0_attr));
    srq_init_attr_0_attr.max_wr = 0;
    srq_init_attr_0.attr = srq_init_attr_0_attr;

    srq0 = ibv_create_srq(pd0, &srq_init_attr_0);
    if (!srq0)
    {
        fprintf(stderr, "Failed to create SRQ\n");
        ;
    }
    printf("[9] done.\n");

    printf("[10] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_5925) start.\n");

    /* ibv_create_cq */
    cq_5925 = ibv_create_cq(ctx, 16,
                            NULL, NULL,
                            0);
    if (!cq_5925)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[10] done.\n");

    printf("[11] CreateCQ(cqe=32, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq0) start.\n");

    /* ibv_create_cq */
    cq0 = ibv_create_cq(ctx, 32,
                        NULL, NULL,
                        0);
    if (!cq0)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[11] done.\n");

    printf("[12] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_3420) start.\n");

    /* ibv_create_cq */
    cq_3420 = ibv_create_cq(ctx, 16,
                            NULL, NULL,
                            0);
    if (!cq_3420)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[12] done.\n");

    printf("[13] CreateQP(pd=pd0, qp=qp0, init_attr_obj=IbvQPInitAttr{recv_cq=cq0, qp_type=IBV_QPT_RC, cap=IbvQPCap{max_send_wr=1, max_recv_wr=1, max_send_sge=1, max_recv_sge=1}, sq_sig_all=1}, remote_qp=srv0) start.\n");

    /* ibv_create_qp */

    memset(&attr_init_qp0, 0, sizeof(attr_init_qp0));
    attr_init_qp0.recv_cq = cq0;
    attr_init_qp0.send_cq = cq0; // fixed

    memset(&attr_init_qp0_cap, 0, sizeof(attr_init_qp0_cap));
    attr_init_qp0_cap.max_send_wr = 1;
    attr_init_qp0_cap.max_recv_wr = 1;
    attr_init_qp0_cap.max_send_sge = 1;
    attr_init_qp0_cap.max_recv_sge = 1;
    attr_init_qp0.cap = attr_init_qp0_cap;
    attr_init_qp0.qp_type = IBV_QPT_RC;
    attr_init_qp0.sq_sig_all = 1;

    qp0 = ibv_create_qp(pd0, &attr_init_qp0);
    if (!qp0)
    {
        fprintf(stderr, "Failed to create QP\n");
        ;
    }

    qps[qps_size++] = (PR_QP){
        .id = "qp0",
        .qpn = qp0->qp_num,
        .psn = 0,
        .port = 1,
        .lid = 0,
        .gid = "" // will set below
    };

    snprintf(qps[qps_size - 1].gid, sizeof(qps[qps_size - 1].gid),
             "%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x",
             gid.raw[0], gid.raw[1], gid.raw[2], gid.raw[3], gid.raw[4], gid.raw[5], gid.raw[6], gid.raw[7], gid.raw[8], gid.raw[9], gid.raw[10], gid.raw[11], gid.raw[12], gid.raw[13], gid.raw[14], gid.raw[15]);

    prs[prs_size++] = (PR_Pair){
        .id = "pair-qp0-srv0",
        .cli_id = "qp0",
        .srv_id = "srv0"};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
    printf("[13] done.\n");

    printf("[14] ModifyQP(qp=qp0, attr_obj=IbvQPAttr{qp_state=IBV_QPS_INIT, dest_qp_num=rr_u32_by_id(\"remote.QP\", \"srv0\", \"qpn\"), port_num=1, qp_access_flags=IBV_ACCESS_REMOTE_READ | IBV_ACCESS_REMOTE_WR..., pkey_index=0}, attr_mask=IBV_QP_STATE | IBV_QP_PKEY_INDEX | IBV_QP_POR...) start.\n");

    memset(&qp_attr_qp0, 0, sizeof(qp_attr_qp0));

    memset(&qp_attr_qp0, 0, sizeof(qp_attr_qp0));
    qp_attr_qp0.qp_state = IBV_QPS_INIT;
    qp_attr_qp0.dest_qp_num = rr_u32_by_id("remote.QP", "srv0", "qpn");
    qp_attr_qp0.qp_access_flags = IBV_ACCESS_REMOTE_READ | IBV_ACCESS_REMOTE_WRITE | IBV_ACCESS_LOCAL_WRITE;
    qp_attr_qp0.pkey_index = 0;
    qp_attr_qp0.port_num = 1;

    ibv_modify_qp(qp0, &qp_attr_qp0, IBV_QP_STATE | IBV_QP_PKEY_INDEX | IBV_QP_PORT | IBV_QP_ACCESS_FLAGS);
    printf("[14] done.\n");

    printf("[15] AllocPD(pd=pd_30332) start.\n");

    /* ibv_alloc_pd */
    pd_30332 = ibv_alloc_pd(ctx);
    if (!pd_30332)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[15] done.\n");

    printf("[16] ModifyQP(qp=qp0, attr_obj=IbvQPAttr{qp_state=IBV_QPS_RTR, path_mtu=IBV_MTU_1024, dest_qp_num=rr_u32_by_id(\"remote.QP\", \"srv0\", \"qpn\"), rq_psn=0, max_dest_rd_atomic=1, min_rnr_timer=12, ah_attr=IbvAHAttr{dlid=rr_u32_by_id(\"remote.QP\", \"srv0\", \"lid\"), is_global=1, port_num=rr_u32_by_id(\"remote.QP\", \"srv0\", \"port\"), grh=IbvGlobalRoute{sgid_index=1, hop_limit=1, traffic_class=0, flow_label=0, dgid=rr_str_by_id(\"remote.QP\", \"srv0\", \"gid\")}, sl=0, src_path_bits=0}}, attr_mask=IBV_QP_STATE | IBV_QP_AV | IBV_QP_PATH_MTU | ...) start.\n");

    pr_wait_pair_state(BUNDLE_ENV, "pair-qp0-srv0", "BOTH_RTS", /*timeout_ms=*/15000);
    memset(&qp_attr_qp0, 0, sizeof(qp_attr_qp0));

    memset(&qp_attr_qp0, 0, sizeof(qp_attr_qp0));
    qp_attr_qp0.qp_state = IBV_QPS_RTR;
    qp_attr_qp0.path_mtu = IBV_MTU_1024;
    qp_attr_qp0.rq_psn = 0;
    qp_attr_qp0.dest_qp_num = rr_u32_by_id("remote.QP", "srv0", "qpn");

    memset(&qp_attr_qp0_ah, 0, sizeof(qp_attr_qp0_ah));

    memset(&qp_attr_qp0_ah_grh, 0, sizeof(qp_attr_qp0_ah_grh));
    pr_parse_gid(rr_str_by_id("remote.QP", "srv0", "gid"), qp_attr_qp0_ah_grh.dgid.raw);
    qp_attr_qp0_ah_grh.flow_label = 0;
    qp_attr_qp0_ah_grh.sgid_index = 1;
    qp_attr_qp0_ah_grh.hop_limit = 1;
    qp_attr_qp0_ah_grh.traffic_class = 0;
    qp_attr_qp0_ah.grh = qp_attr_qp0_ah_grh;
    qp_attr_qp0_ah.dlid = rr_u32_by_id("remote.QP", "srv0", "lid");
    qp_attr_qp0_ah.sl = 0;
    qp_attr_qp0_ah.src_path_bits = 0;
    qp_attr_qp0_ah.is_global = 1;
    qp_attr_qp0_ah.port_num = rr_u32_by_id("remote.QP", "srv0", "port");
    qp_attr_qp0.ah_attr = qp_attr_qp0_ah;
    qp_attr_qp0.max_dest_rd_atomic = 1;
    qp_attr_qp0.min_rnr_timer = 12;

    ibv_modify_qp(qp0, &qp_attr_qp0, IBV_QP_STATE | IBV_QP_AV | IBV_QP_PATH_MTU | IBV_QP_DEST_QPN | IBV_QP_RQ_PSN | IBV_QP_MAX_DEST_RD_ATOMIC | IBV_QP_MIN_RNR_TIMER);
    printf("[16] done.\n");

    printf("[17] ModifyCQ(cq=cq0, attr_obj=IbvModifyCQAttr{moderate=IbvModerateCQ{cq_count=1024, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1024;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq0, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[17] done.\n");

    printf("[18] PollCQ(cq=cq_5925) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_5925, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[18] done.\n");

    printf("[19] RegMR(pd=pd0, mr=mr0, addr=bufs[0], length=1024, access=IBV_ACCESS_LOCAL_WRITE | IBV_ACCESS_REMOTE_RE...) start.\n");

    /* ibv_reg_mr */
    mr0 = ibv_reg_mr(pd0, bufs[0], 1024, IBV_ACCESS_LOCAL_WRITE | IBV_ACCESS_REMOTE_READ | IBV_ACCESS_REMOTE_WRITE);
    if (!mr0)
    {
        fprintf(stderr, "Failed to register memory region\n");
        ;
    }

    mrs[mrs_size++] = (PR_MR){
        .id = "mr0",
        .addr = (uint64_t)(mr0->addr),
        .length = 1024,
        .lkey = mr0->lkey};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);

    printf("[19] done.\n");

    printf("[20] PostSRQRecv(srq=srq0, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}], wr_id=1}, wr_var=recv_wr_srq0, bad_wr_var=bad_recv_wr_srq0) start.\n");

    memset(&recv_wr_srq0, 0, sizeof(recv_wr_srq0));
    recv_wr_srq0.wr_id = 1;

    memset(&recv_wr_srq0_sge_0, 0, sizeof(recv_wr_srq0_sge_0));
    recv_wr_srq0.sg_list = &recv_wr_srq0_sge_0;
    recv_wr_srq0.num_sge = 1;
    recv_wr_srq0.next = NULL;

    if (ibv_post_srq_recv(srq0, &recv_wr_srq0, &bad_recv_wr_srq0) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[20] done.\n");

    printf("[21] DestroyQP(qp=qp0) start.\n");

    /* ibv_destroy_qp */
    if (ibv_destroy_qp(qp0))
    {
        fprintf(stderr, "Failed to destroy QP\n");
        ;
    }
    printf("[21] done.\n");

    printf("[22] CreateQP(pd=pd0, qp=qp_22225, init_attr_obj=IbvQPInitAttr{send_cq=cq1, recv_cq=cq1, qp_type=IBV_QPT_RC, cap=IbvQPCap{max_send_wr=1, max_recv_wr=1, max_send_sge=1, max_recv_sge=1}}, remote_qp=srv96) start.\n");

    /* ibv_create_qp */

    memset(&attr_init_qp_22225, 0, sizeof(attr_init_qp_22225));
    attr_init_qp_22225.send_cq = cq1;
    attr_init_qp_22225.recv_cq = cq1;

    memset(&attr_init_qp_22225_cap, 0, sizeof(attr_init_qp_22225_cap));
    attr_init_qp_22225_cap.max_send_wr = 1;
    attr_init_qp_22225_cap.max_recv_wr = 1;
    attr_init_qp_22225_cap.max_send_sge = 1;
    attr_init_qp_22225_cap.max_recv_sge = 1;
    attr_init_qp_22225.cap = attr_init_qp_22225_cap;
    attr_init_qp_22225.qp_type = IBV_QPT_RC;

    qp_22225 = ibv_create_qp(pd0, &attr_init_qp_22225);
    if (!qp_22225)
    {
        fprintf(stderr, "Failed to create QP\n");
        ;
    }

    qps[qps_size++] = (PR_QP){
        .id = "qp_22225",
        .qpn = qp_22225->qp_num,
        .psn = 0,
        .port = 1,
        .lid = 0,
        .gid = "" // will set below
    };

    snprintf(qps[qps_size - 1].gid, sizeof(qps[qps_size - 1].gid),
             "%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x",
             gid.raw[0], gid.raw[1], gid.raw[2], gid.raw[3], gid.raw[4], gid.raw[5], gid.raw[6], gid.raw[7], gid.raw[8], gid.raw[9], gid.raw[10], gid.raw[11], gid.raw[12], gid.raw[13], gid.raw[14], gid.raw[15]);

    prs[prs_size++] = (PR_Pair){
        .id = "pair-qp_22225-srv96",
        .cli_id = "qp_22225",
        .srv_id = "srv96"};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
    printf("[22] done.\n");

    printf("[23] AllocPD(pd=pd1) start.\n");

    /* ibv_alloc_pd */
    pd1 = ibv_alloc_pd(ctx);
    if (!pd1)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[23] done.\n");

    printf("[24] AllocPD(pd=pd_19274) start.\n");

    /* ibv_alloc_pd */
    pd_19274 = ibv_alloc_pd(ctx);
    if (!pd_19274)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[24] done.\n");

    printf("[25] ModifyCQ(cq=cq1, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq1, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[25] done.\n");

    printf("[26] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_36481) start.\n");

    /* ibv_create_cq */
    cq_36481 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_36481)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[26] done.\n");

    printf("[27] PollCQ(cq=cq1) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq1, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[27] done.\n");

    printf("[28] AllocPD(pd=pd_1538) start.\n");

    /* ibv_alloc_pd */
    pd_1538 = ibv_alloc_pd(ctx);
    if (!pd_1538)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[28] done.\n");

    printf("[29] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_27634) start.\n");

    /* ibv_create_cq */
    cq_27634 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_27634)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[29] done.\n");

    printf("[30] CreateSRQ(pd=pd1, srq=srq_49329, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{max_wr=0, max_sge=1, srq_limit=0}}) start.\n");

    /* ibv_create_srq */

    memset(&srq_init_attr__49329, 0, sizeof(srq_init_attr__49329));

    memset(&srq_init_attr__49329_attr, 0, sizeof(srq_init_attr__49329_attr));
    srq_init_attr__49329_attr.max_wr = 0;
    srq_init_attr__49329_attr.max_sge = 1;
    srq_init_attr__49329_attr.srq_limit = 0;
    srq_init_attr__49329.attr = srq_init_attr__49329_attr;

    srq_49329 = ibv_create_srq(pd1, &srq_init_attr__49329);
    if (!srq_49329)
    {
        fprintf(stderr, "Failed to create SRQ\n");
        ;
    }
    printf("[30] done.\n");

    printf("[31] CreateSRQ(pd=pd_30332, srq=srq_18393, srq_init_obj=IbvSrqInitAttr{srq_context=0, attr=IbvSrqAttr{max_wr=1, max_sge=2, srq_limit=0}}) start.\n");

    /* ibv_create_srq */

    memset(&srq_init_attr__18393, 0, sizeof(srq_init_attr__18393));
    srq_init_attr__18393.srq_context = 0;

    memset(&srq_init_attr__18393_attr, 0, sizeof(srq_init_attr__18393_attr));
    srq_init_attr__18393_attr.max_wr = 1;
    srq_init_attr__18393_attr.max_sge = 2;
    srq_init_attr__18393_attr.srq_limit = 0;
    srq_init_attr__18393.attr = srq_init_attr__18393_attr;

    srq_18393 = ibv_create_srq(pd_30332, &srq_init_attr__18393);
    if (!srq_18393)
    {
        fprintf(stderr, "Failed to create SRQ\n");
        ;
    }
    printf("[31] done.\n");

    printf("[32] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_8479) start.\n");

    /* ibv_create_cq */
    cq_8479 = ibv_create_cq(ctx, 16,
                            NULL, NULL,
                            0);
    if (!cq_8479)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[32] done.\n");

    printf("[33] ModifySRQ(srq=srq_49329, attr_var=srq_attr_srq_49329, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_49329, 0, sizeof(srq_attr_srq_49329));
    srq_attr_srq_49329.max_wr = 1;
    srq_attr_srq_49329.srq_limit = 0;

    if (ibv_modify_srq(srq_49329, &srq_attr_srq_49329, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[33] done.\n");

    printf("[34] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_8217) start.\n");

    /* ibv_create_cq */
    cq_8217 = ibv_create_cq(ctx, 16,
                            NULL, NULL,
                            0);
    if (!cq_8217)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[34] done.\n");

    printf("[35] RegMR(pd=pd1, mr=mr_65532, addr=bufs[18], length=4096, access=IBV_ACCESS_LOCAL_WRITE) start.\n");

    /* ibv_reg_mr */
    mr_65532 = ibv_reg_mr(pd1, bufs[18], 4096, IBV_ACCESS_LOCAL_WRITE);
    if (!mr_65532)
    {
        fprintf(stderr, "Failed to register memory region\n");
        ;
    }

    mrs[mrs_size++] = (PR_MR){
        .id = "mr_65532",
        .addr = (uint64_t)(mr_65532->addr),
        .length = 1024,
        .lkey = mr_65532->lkey};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);

    printf("[35] done.\n");

    printf("[36] ModifySRQ(srq=srq_49329, attr_var=srq_attr_srq_49329, attr_obj=IbvSrqAttr{max_wr=0, srq_limit=0}, attr_mask=2) start.\n");

    memset(&srq_attr_srq_49329, 0, sizeof(srq_attr_srq_49329));
    srq_attr_srq_49329.max_wr = 0;
    srq_attr_srq_49329.srq_limit = 0;

    if (ibv_modify_srq(srq_49329, &srq_attr_srq_49329, 2) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[36] done.\n");

    printf("[37] AllocPD(pd=pd_7015) start.\n");

    /* ibv_alloc_pd */
    pd_7015 = ibv_alloc_pd(ctx);
    if (!pd_7015)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[37] done.\n");

    printf("[38] ModifyCQ(cq=cq_3420, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_3420, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[38] done.\n");

    printf("[39] ModifyCQ(cq=cq_3420, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_3420, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[39] done.\n");

    printf("[40] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_41912) start.\n");

    /* ibv_create_cq */
    cq_41912 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_41912)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[40] done.\n");

    printf("[41] RegMR(pd=pd_30332, mr=mr_41358, addr=bufs[17], length=4096, access=804) start.\n");

    /* ibv_reg_mr */
    mr_41358 = ibv_reg_mr(pd_30332, bufs[17], 4096, 804);
    if (!mr_41358)
    {
        fprintf(stderr, "Failed to register memory region\n");
        ;
    }

    mrs[mrs_size++] = (PR_MR){
        .id = "mr_41358",
        .addr = (uint64_t)(mr_41358->addr),
        .length = 1024,
        .lkey = mr_41358->lkey};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);

    printf("[41] done.\n");

    printf("[42] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_29581) start.\n");

    /* ibv_create_cq */
    cq_29581 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_29581)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[42] done.\n");

    printf("[43] ModifySRQ(srq=srq_18393, attr_var=srq_attr_srq_49329, attr_obj=IbvSrqAttr{max_wr=1, max_sge=0, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_49329, 0, sizeof(srq_attr_srq_49329));
    srq_attr_srq_49329.max_wr = 1;
    srq_attr_srq_49329.max_sge = 0;
    srq_attr_srq_49329.srq_limit = 0;

    if (ibv_modify_srq(srq_18393, &srq_attr_srq_49329, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[43] done.\n");

    printf("[44] ModifyCQ(cq=cq_41912, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_41912, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[44] done.\n");

    printf("[45] DestroyCQ(cq=cq_29581) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq_29581))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[45] done.\n");

    printf("[46] ModifySRQ(srq=srq_49329, attr_var=srq_attr_srq_49329, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_49329, 0, sizeof(srq_attr_srq_49329));
    srq_attr_srq_49329.max_wr = 1;
    srq_attr_srq_49329.srq_limit = 0;

    if (ibv_modify_srq(srq_49329, &srq_attr_srq_49329, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[46] done.\n");

    printf("[47] ModifyCQ(cq=cq_36481, attr_obj=IbvModifyCQAttr{attr_mask=3, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 3;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_36481, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[47] done.\n");

    printf("[48] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_13938) start.\n");

    /* ibv_create_cq */
    cq_13938 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_13938)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[48] done.\n");

    printf("[49] DestroyCQ(cq=cq_8479) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq_8479))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[49] done.\n");

    printf("[50] AllocPD(pd=pd_8089) start.\n");

    /* ibv_alloc_pd */
    pd_8089 = ibv_alloc_pd(ctx);
    if (!pd_8089)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[50] done.\n");

    printf("[51] AllocPD(pd=pd_31363) start.\n");

    /* ibv_alloc_pd */
    pd_31363 = ibv_alloc_pd(ctx);
    if (!pd_31363)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[51] done.\n");

    printf("[52] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_54626) start.\n");

    /* ibv_create_cq */
    cq_54626 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_54626)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[52] done.\n");

    printf("[53] RegMR(pd=pd_30332, mr=mr_40241, addr=bufs[25], length=4096, access=1048954) start.\n");

    /* ibv_reg_mr */
    mr_40241 = ibv_reg_mr(pd_30332, bufs[25], 4096, 1048954);
    if (!mr_40241)
    {
        fprintf(stderr, "Failed to register memory region\n");
        ;
    }

    mrs[mrs_size++] = (PR_MR){
        .id = "mr_40241",
        .addr = (uint64_t)(mr_40241->addr),
        .length = 1024,
        .lkey = mr_40241->lkey};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);

    printf("[53] done.\n");

    printf("[54] AllocPD(pd=pd_26453) start.\n");

    /* ibv_alloc_pd */
    pd_26453 = ibv_alloc_pd(ctx);
    if (!pd_26453)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[54] done.\n");

    printf("[55] DeallocPD(pd=pd0) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd0))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[55] done.\n");

    printf("[56] PollCQ(cq=cq_3420) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_3420, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[56] done.\n");

    printf("[57] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_47623) start.\n");

    /* ibv_create_cq */
    cq_47623 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_47623)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[57] done.\n");

    printf("[58] AllocPD(pd=pd_39135) start.\n");

    /* ibv_alloc_pd */
    pd_39135 = ibv_alloc_pd(ctx);
    if (!pd_39135)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[58] done.\n");

    printf("[59] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_46537) start.\n");

    /* ibv_create_cq */
    cq_46537 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_46537)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[59] done.\n");

    printf("[60] ModifySRQ(srq=srq_49329, attr_var=srq_attr_srq_49329, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_49329, 0, sizeof(srq_attr_srq_49329));
    srq_attr_srq_49329.max_wr = 1;
    srq_attr_srq_49329.srq_limit = 0;

    if (ibv_modify_srq(srq_49329, &srq_attr_srq_49329, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[60] done.\n");

    printf("[61] ModifyCQ(cq=cq_13938, attr_obj=IbvModifyCQAttr{attr_mask=1, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 1;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_13938, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[61] done.\n");

    printf("[62] RegMR(pd=pd_19274, mr=mr_19049, addr=bufs[62], length=4096, access=IBV_ACCESS_LOCAL_WRITE) start.\n");

    /* ibv_reg_mr */
    mr_19049 = ibv_reg_mr(pd_19274, bufs[62], 4096, IBV_ACCESS_LOCAL_WRITE);
    if (!mr_19049)
    {
        fprintf(stderr, "Failed to register memory region\n");
        ;
    }

    mrs[mrs_size++] = (PR_MR){
        .id = "mr_19049",
        .addr = (uint64_t)(mr_19049->addr),
        .length = 1024,
        .lkey = mr_19049->lkey};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);

    printf("[62] done.\n");

    printf("[63] PollCQ(cq=cq_41912) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_41912, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[63] done.\n");

    printf("[64] CreateSRQ(pd=pd_19274, srq=srq_48306, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{max_sge=2, srq_limit=0}}) start.\n");

    /* ibv_create_srq */

    memset(&srq_init_attr__48306, 0, sizeof(srq_init_attr__48306));

    memset(&srq_init_attr__48306_attr, 0, sizeof(srq_init_attr__48306_attr));
    srq_init_attr__48306_attr.max_sge = 2;
    srq_init_attr__48306_attr.srq_limit = 0;
    srq_init_attr__48306.attr = srq_init_attr__48306_attr;

    srq_48306 = ibv_create_srq(pd_19274, &srq_init_attr__48306);
    if (!srq_48306)
    {
        fprintf(stderr, "Failed to create SRQ\n");
        ;
    }
    printf("[64] done.\n");

    printf("[65] PostSRQRecv(srq=srq_49329, wr_obj=IbvRecvWR{sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}], next=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}], wr_id=12196591005782943667}}, wr_var=recv_wr_srq_49329, bad_wr_var=bad_recv_wr_srq_49329) start.\n");

    memset(&recv_wr_srq_49329, 0, sizeof(recv_wr_srq_49329));

    memset(&recv_wr_srq_49329_sge_0, 0, sizeof(recv_wr_srq_49329_sge_0));
    recv_wr_srq_49329.sg_list = &recv_wr_srq_49329_sge_0;

    memset(&recv_wr_srq_49329_next, 0, sizeof(recv_wr_srq_49329_next));
    recv_wr_srq_49329_next.wr_id = 12196591005782943667;

    memset(&recv_wr_srq_49329_next_sge_0, 0, sizeof(recv_wr_srq_49329_next_sge_0));
    recv_wr_srq_49329_next.sg_list = &recv_wr_srq_49329_next_sge_0;
    recv_wr_srq_49329_next.num_sge = 1;
    recv_wr_srq_49329_next.next = NULL;
    recv_wr_srq_49329.next = &recv_wr_srq_49329_next;

    if (ibv_post_srq_recv(srq_49329, &recv_wr_srq_49329, &bad_recv_wr_srq_49329) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[65] done.\n");

    printf("[66] PollCQ(cq=cq_3420) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_3420, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[66] done.\n");

    printf("[67] ModifyCQ(cq=cq_13938, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_13938, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[67] done.\n");

    printf("[68] ModifySRQ(srq=srq_49329, attr_var=srq_attr_srq_49329, attr_obj=IbvSrqAttr{srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_49329, 0, sizeof(srq_attr_srq_49329));
    srq_attr_srq_49329.srq_limit = 0;

    if (ibv_modify_srq(srq_49329, &srq_attr_srq_49329, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[68] done.\n");

    printf("[69] CreateQP(pd=pd_19274, qp=qp_25614, init_attr_obj=IbvQPInitAttr{send_cq=cq_54626, recv_cq=cq_13938, qp_type=IBV_QPT_RC, cap=IbvQPCap{max_send_wr=1, max_send_sge=1, max_recv_sge=1}}, remote_qp=srv70) start.\n");

    /* ibv_create_qp */

    memset(&attr_init_qp_25614, 0, sizeof(attr_init_qp_25614));
    attr_init_qp_25614.send_cq = cq_54626;
    attr_init_qp_25614.recv_cq = cq_13938;

    memset(&attr_init_qp_25614_cap, 0, sizeof(attr_init_qp_25614_cap));
    attr_init_qp_25614_cap.max_send_wr = 1;
    attr_init_qp_25614_cap.max_send_sge = 1;
    attr_init_qp_25614_cap.max_recv_sge = 1;
    attr_init_qp_25614.cap = attr_init_qp_25614_cap;
    attr_init_qp_25614.qp_type = IBV_QPT_RC;

    qp_25614 = ibv_create_qp(pd_19274, &attr_init_qp_25614);
    if (!qp_25614)
    {
        fprintf(stderr, "Failed to create QP\n");
        ;
    }

    qps[qps_size++] = (PR_QP){
        .id = "qp_25614",
        .qpn = qp_25614->qp_num,
        .psn = 0,
        .port = 1,
        .lid = 0,
        .gid = "" // will set below
    };

    snprintf(qps[qps_size - 1].gid, sizeof(qps[qps_size - 1].gid),
             "%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x",
             gid.raw[0], gid.raw[1], gid.raw[2], gid.raw[3], gid.raw[4], gid.raw[5], gid.raw[6], gid.raw[7], gid.raw[8], gid.raw[9], gid.raw[10], gid.raw[11], gid.raw[12], gid.raw[13], gid.raw[14], gid.raw[15]);

    prs[prs_size++] = (PR_Pair){
        .id = "pair-qp_25614-srv70",
        .cli_id = "qp_25614",
        .srv_id = "srv70"};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
    printf("[69] done.\n");

    printf("[70] ModifySRQ(srq=srq_48306, attr_var=srq_attr_srq_48306, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_48306, 0, sizeof(srq_attr_srq_48306));
    srq_attr_srq_48306.max_wr = 1;
    srq_attr_srq_48306.srq_limit = 0;

    if (ibv_modify_srq(srq_48306, &srq_attr_srq_48306, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[70] done.\n");

    printf("[71] AllocPD(pd=pd_2612) start.\n");

    /* ibv_alloc_pd */
    pd_2612 = ibv_alloc_pd(ctx);
    if (!pd_2612)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[71] done.\n");

    printf("[72] DeregMR(mr=mr_40241) start.\n");

    /* ibv_dereg_mr */
    if (ibv_dereg_mr(mr_40241))
    {
        fprintf(stderr, "Failed to deregister MR\n");
        ;
    }
    printf("[72] done.\n");

    printf("[73] ModifySRQ(srq=srq_48306, attr_var=srq_attr_srq_48306, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_48306, 0, sizeof(srq_attr_srq_48306));
    srq_attr_srq_48306.max_wr = 1;
    srq_attr_srq_48306.srq_limit = 0;

    if (ibv_modify_srq(srq_48306, &srq_attr_srq_48306, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[73] done.\n");

    printf("[74] DeregMR(mr=mr_41358) start.\n");

    /* ibv_dereg_mr */
    if (ibv_dereg_mr(mr_41358))
    {
        fprintf(stderr, "Failed to deregister MR\n");
        ;
    }
    printf("[74] done.\n");

    printf("[75] DestroyCQ(cq=cq_8217) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq_8217))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[75] done.\n");

    printf("[76] DeallocPD(pd=pd_30332) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_30332))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[76] done.\n");

    printf("[77] PollCQ(cq=cq_41912) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_41912, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[77] done.\n");

    printf("[78] ModifyCQ(cq=cq_13938, attr_obj=IbvModifyCQAttr{moderate=IbvModerateCQ{cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_13938, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[78] done.\n");

    printf("[79] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_458) start.\n");

    /* ibv_create_cq */
    cq_458 = ibv_create_cq(ctx, 16,
                           NULL, NULL,
                           0);
    if (!cq_458)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[79] done.\n");

    printf("[80] ModifyCQ(cq=cq_41912, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_41912, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[80] done.\n");

    printf("[81] DestroyCQ(cq=cq0) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq0))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[81] done.\n");

    printf("[82] RegMR(pd=pd_7015, mr=mr_21526, addr=bufs[76], length=4095, access=IBV_ACCESS_LOCAL_WRITE) start.\n");

    /* ibv_reg_mr */
    mr_21526 = ibv_reg_mr(pd_7015, bufs[76], 4095, IBV_ACCESS_LOCAL_WRITE);
    if (!mr_21526)
    {
        fprintf(stderr, "Failed to register memory region\n");
        ;
    }

    mrs[mrs_size++] = (PR_MR){
        .id = "mr_21526",
        .addr = (uint64_t)(mr_21526->addr),
        .length = 1024,
        .lkey = mr_21526->lkey};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);

    printf("[82] done.\n");

    printf("[83] DeallocPD(pd=pd_7015) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_7015))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[83] done.\n");

    printf("[84] ModifyCQ(cq=cq_41912, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_41912, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[84] done.\n");

    printf("[85] ModifySRQ(srq=srq_48306, attr_var=srq_attr_srq_48306, attr_obj=IbvSrqAttr{max_wr=0, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_48306, 0, sizeof(srq_attr_srq_48306));
    srq_attr_srq_48306.max_wr = 0;
    srq_attr_srq_48306.srq_limit = 0;

    if (ibv_modify_srq(srq_48306, &srq_attr_srq_48306, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[85] done.\n");

    printf("[86] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_58715) start.\n");

    /* ibv_create_cq */
    cq_58715 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_58715)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[86] done.\n");

    printf("[87] PostSRQRecv(srq=srq_18393, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}], next=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}], wr_id=14329241455373390767}}, wr_var=recv_wr_srq_18393, bad_wr_var=bad_recv_wr_srq_18393) start.\n");

    memset(&recv_wr_srq_18393, 0, sizeof(recv_wr_srq_18393));

    memset(&recv_wr_srq_18393_sge_0, 0, sizeof(recv_wr_srq_18393_sge_0));
    recv_wr_srq_18393.sg_list = &recv_wr_srq_18393_sge_0;
    recv_wr_srq_18393.num_sge = 1;

    memset(&recv_wr_srq_18393_next, 0, sizeof(recv_wr_srq_18393_next));
    recv_wr_srq_18393_next.wr_id = 14329241455373390767;

    memset(&recv_wr_srq_18393_next_sge_0, 0, sizeof(recv_wr_srq_18393_next_sge_0));
    recv_wr_srq_18393_next.sg_list = &recv_wr_srq_18393_next_sge_0;
    recv_wr_srq_18393_next.num_sge = 1;
    recv_wr_srq_18393_next.next = NULL;
    recv_wr_srq_18393.next = &recv_wr_srq_18393_next;

    if (ibv_post_srq_recv(srq_18393, &recv_wr_srq_18393, &bad_recv_wr_srq_18393) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[87] done.\n");

    printf("[88] DeregMR(mr=mr_21526) start.\n");

    /* ibv_dereg_mr */
    if (ibv_dereg_mr(mr_21526))
    {
        fprintf(stderr, "Failed to deregister MR\n");
        ;
    }
    printf("[88] done.\n");

    printf("[89] DeallocPD(pd=pd_8089) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_8089))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[89] done.\n");

    printf("[90] DestroyCQ(cq=cq_36481) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq_36481))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[90] done.\n");

    printf("[91] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_33396) start.\n");

    /* ibv_create_cq */
    cq_33396 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_33396)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[91] done.\n");

    printf("[92] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_38699) start.\n");

    /* ibv_create_cq */
    cq_38699 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_38699)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[92] done.\n");

    printf("[93] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_49818) start.\n");

    /* ibv_create_cq */
    cq_49818 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_49818)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[93] done.\n");

    printf("[94] PollCQ(cq=cq_41912) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_41912, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[94] done.\n");

    printf("[95] PollCQ(cq=cq_458) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_458, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[95] done.\n");

    printf("[96] PostSRQRecv(srq=srq_49329, wr_obj=IbvRecvWR{num_sge=0, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq_49329, bad_wr_var=bad_recv_wr_srq_49329) start.\n");

    memset(&recv_wr_srq_49329, 0, sizeof(recv_wr_srq_49329));

    memset(&recv_wr_srq_49329_sge_0, 0, sizeof(recv_wr_srq_49329_sge_0));
    recv_wr_srq_49329.sg_list = &recv_wr_srq_49329_sge_0;
    recv_wr_srq_49329.num_sge = 0;
    recv_wr_srq_49329.next = NULL;

    if (ibv_post_srq_recv(srq_49329, &recv_wr_srq_49329, &bad_recv_wr_srq_49329) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[96] done.\n");

    printf("[97] PostSRQRecv(srq=srq_49329, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq_49329, bad_wr_var=bad_recv_wr_srq_49329) start.\n");

    memset(&recv_wr_srq_49329, 0, sizeof(recv_wr_srq_49329));

    memset(&recv_wr_srq_49329_sge_0, 0, sizeof(recv_wr_srq_49329_sge_0));
    recv_wr_srq_49329.sg_list = &recv_wr_srq_49329_sge_0;
    recv_wr_srq_49329.num_sge = 1;
    recv_wr_srq_49329.next = NULL;

    if (ibv_post_srq_recv(srq_49329, &recv_wr_srq_49329, &bad_recv_wr_srq_49329) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[97] done.\n");

    printf("[98] AllocPD(pd=pd_11062) start.\n");

    /* ibv_alloc_pd */
    pd_11062 = ibv_alloc_pd(ctx);
    if (!pd_11062)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[98] done.\n");

    printf("[99] DeallocPD(pd=pd_19274) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_19274))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[99] done.\n");

    printf("[100] AllocPD(pd=pd_22094) start.\n");

    /* ibv_alloc_pd */
    pd_22094 = ibv_alloc_pd(ctx);
    if (!pd_22094)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[100] done.\n");

    printf("[101] ModifySRQ(srq=srq_18393, attr_var=srq_attr_srq_18393, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_18393, 0, sizeof(srq_attr_srq_18393));
    srq_attr_srq_18393.max_wr = 1;
    srq_attr_srq_18393.srq_limit = 0;

    if (ibv_modify_srq(srq_18393, &srq_attr_srq_18393, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[101] done.\n");

    printf("[102] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_32181) start.\n");

    /* ibv_create_cq */
    cq_32181 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_32181)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[102] done.\n");

    printf("[103] AllocPD(pd=pd_12518) start.\n");

    /* ibv_alloc_pd */
    pd_12518 = ibv_alloc_pd(ctx);
    if (!pd_12518)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[103] done.\n");

    printf("[104] AllocDM(dm=dm0, attr_obj=IbvAllocDmAttr{log_align_req=13}, attr_var=dm_attr_dm0) start.\n");

    memset(&dm_attr_dm0, 0, sizeof(dm_attr_dm0));
    dm_attr_dm0.log_align_req = 13;

    dm0 = ibv_alloc_dm(ctx, &dm_attr_dm0);
    if (!dm0)
    {
        fprintf(stderr, "Failed to allocate device memory (DM)\n");
        ;
    }
    printf("[104] done.\n");

    printf("[105] PollCQ(cq=cq_458) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_458, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[105] done.\n");

    printf("[106] DeallocPD(pd=pd_22094) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_22094))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[106] done.\n");

    printf("[107] ModifySRQ(srq=srq_49329, attr_var=srq_attr_srq_49329, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_49329, 0, sizeof(srq_attr_srq_49329));
    srq_attr_srq_49329.max_wr = 1;
    srq_attr_srq_49329.srq_limit = 0;

    if (ibv_modify_srq(srq_49329, &srq_attr_srq_49329, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[107] done.\n");

    printf("[108] ModifyCQ(cq=cq_41912, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_41912, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[108] done.\n");

    printf("[109] CreateSRQ(pd=pd_12518, srq=srq_53103, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{max_wr=1, max_sge=1, srq_limit=0}}) start.\n");

    /* ibv_create_srq */

    memset(&srq_init_attr__53103, 0, sizeof(srq_init_attr__53103));

    memset(&srq_init_attr__53103_attr, 0, sizeof(srq_init_attr__53103_attr));
    srq_init_attr__53103_attr.max_wr = 1;
    srq_init_attr__53103_attr.max_sge = 1;
    srq_init_attr__53103_attr.srq_limit = 0;
    srq_init_attr__53103.attr = srq_init_attr__53103_attr;

    srq_53103 = ibv_create_srq(pd_12518, &srq_init_attr__53103);
    if (!srq_53103)
    {
        fprintf(stderr, "Failed to create SRQ\n");
        ;
    }
    printf("[109] done.\n");

    printf("[110] ModifyCQ(cq=cq_32181, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=2}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 2;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_32181, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[110] done.\n");

    printf("[111] PollCQ(cq=cq_38699) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_38699, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[111] done.\n");

    printf("[112] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_28748) start.\n");

    /* ibv_create_cq */
    cq_28748 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_28748)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[112] done.\n");

    printf("[113] PollCQ(cq=cq_41912) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_41912, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[113] done.\n");

    printf("[114] CreateSRQ(pd=pd_39135, srq=srq_14213, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{max_wr=1, max_sge=1, srq_limit=0}}) start.\n");

    /* ibv_create_srq */

    memset(&srq_init_attr__14213, 0, sizeof(srq_init_attr__14213));

    memset(&srq_init_attr__14213_attr, 0, sizeof(srq_init_attr__14213_attr));
    srq_init_attr__14213_attr.max_wr = 1;
    srq_init_attr__14213_attr.max_sge = 1;
    srq_init_attr__14213_attr.srq_limit = 0;
    srq_init_attr__14213.attr = srq_init_attr__14213_attr;

    srq_14213 = ibv_create_srq(pd_39135, &srq_init_attr__14213);
    if (!srq_14213)
    {
        fprintf(stderr, "Failed to create SRQ\n");
        ;
    }
    printf("[114] done.\n");

    printf("[115] DeallocPD(pd=pd_26453) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_26453))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[115] done.\n");

    printf("[116] PostSRQRecv(srq=srq_49329, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq_49329, bad_wr_var=bad_recv_wr_srq_49329) start.\n");

    memset(&recv_wr_srq_49329, 0, sizeof(recv_wr_srq_49329));

    memset(&recv_wr_srq_49329_sge_0, 0, sizeof(recv_wr_srq_49329_sge_0));
    recv_wr_srq_49329.sg_list = &recv_wr_srq_49329_sge_0;
    recv_wr_srq_49329.num_sge = 1;
    recv_wr_srq_49329.next = NULL;

    if (ibv_post_srq_recv(srq_49329, &recv_wr_srq_49329, &bad_recv_wr_srq_49329) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[116] done.\n");

    printf("[117] PostSRQRecv(srq=srq_14213, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq_48306, bad_wr_var=bad_recv_wr_srq_48306) start.\n");

    memset(&recv_wr_srq_48306, 0, sizeof(recv_wr_srq_48306));

    memset(&recv_wr_srq_48306_sge_0, 0, sizeof(recv_wr_srq_48306_sge_0));
    recv_wr_srq_48306.sg_list = &recv_wr_srq_48306_sge_0;
    recv_wr_srq_48306.num_sge = 1;
    recv_wr_srq_48306.next = NULL;

    if (ibv_post_srq_recv(srq_14213, &recv_wr_srq_48306, &bad_recv_wr_srq_48306) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[117] done.\n");

    printf("[118] DestroyCQ(cq=cq_28748) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq_28748))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[118] done.\n");

    printf("[119] DestroyCQ(cq=cq_38699) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq_38699))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[119] done.\n");

    printf("[120] DeallocPD(pd=pd_31363) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_31363))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[120] done.\n");

    printf("[121] AllocPD(pd=pd_21322) start.\n");

    /* ibv_alloc_pd */
    pd_21322 = ibv_alloc_pd(ctx);
    if (!pd_21322)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[121] done.\n");

    printf("[122] ModifySRQ(srq=srq_18393, attr_var=srq_attr_srq_18393, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_18393, 0, sizeof(srq_attr_srq_18393));
    srq_attr_srq_18393.max_wr = 1;
    srq_attr_srq_18393.srq_limit = 0;

    if (ibv_modify_srq(srq_18393, &srq_attr_srq_18393, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[122] done.\n");

    printf("[123] DestroyCQ(cq=cq_458) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq_458))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[123] done.\n");

    printf("[124] ModifySRQ(srq=srq_49329, attr_var=srq_attr_srq_49329, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_49329, 0, sizeof(srq_attr_srq_49329));
    srq_attr_srq_49329.max_wr = 1;
    srq_attr_srq_49329.srq_limit = 0;

    if (ibv_modify_srq(srq_49329, &srq_attr_srq_49329, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[124] done.\n");

    printf("[125] AllocPD(pd=pd_53713) start.\n");

    /* ibv_alloc_pd */
    pd_53713 = ibv_alloc_pd(ctx);
    if (!pd_53713)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[125] done.\n");

    printf("[126] RegMR(pd=pd_53713, mr=mr_14130, addr=bufs[74], length=4096, access=IBV_ACCESS_LOCAL_WRITE) start.\n");

    /* ibv_reg_mr */
    mr_14130 = ibv_reg_mr(pd_53713, bufs[74], 4096, IBV_ACCESS_LOCAL_WRITE);
    if (!mr_14130)
    {
        fprintf(stderr, "Failed to register memory region\n");
        ;
    }

    mrs[mrs_size++] = (PR_MR){
        .id = "mr_14130",
        .addr = (uint64_t)(mr_14130->addr),
        .length = 1024,
        .lkey = mr_14130->lkey};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);

    printf("[126] done.\n");

    printf("[127] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_34171) start.\n");

    /* ibv_create_cq */
    cq_34171 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_34171)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[127] done.\n");

    printf("[128] PollCQ(cq=cq1) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq1, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[128] done.\n");

    printf("[129] DeallocPD(pd=pd_2612) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_2612))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[129] done.\n");

    printf("[130] ModifyCQ(cq=cq_41912, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_41912, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[130] done.\n");

    printf("[131] ModifySRQ(srq=srq_18393, attr_var=srq_attr_srq_18393, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_18393, 0, sizeof(srq_attr_srq_18393));
    srq_attr_srq_18393.max_wr = 1;
    srq_attr_srq_18393.srq_limit = 0;

    if (ibv_modify_srq(srq_18393, &srq_attr_srq_18393, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[131] done.\n");

    printf("[132] ModifySRQ(srq=srq_14213, attr_var=srq_attr_srq_49329, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_49329, 0, sizeof(srq_attr_srq_49329));
    srq_attr_srq_49329.max_wr = 1;
    srq_attr_srq_49329.srq_limit = 0;

    if (ibv_modify_srq(srq_14213, &srq_attr_srq_49329, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[132] done.\n");

    printf("[133] DeallocPD(pd=pd_53713) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_53713))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[133] done.\n");

    printf("[134] ModifyCQ(cq=cq_58715, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_58715, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[134] done.\n");

    printf("[135] AllocPD(pd=pd_54343) start.\n");

    /* ibv_alloc_pd */
    pd_54343 = ibv_alloc_pd(ctx);
    if (!pd_54343)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[135] done.\n");

    printf("[136] ModifyCQ(cq=cq_58715, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_58715, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[136] done.\n");

    printf("[137] ModifySRQ(srq=srq_18393, attr_var=srq_attr_srq_18393, attr_obj=IbvSrqAttr{max_wr=1, max_sge=0, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_18393, 0, sizeof(srq_attr_srq_18393));
    srq_attr_srq_18393.max_wr = 1;
    srq_attr_srq_18393.max_sge = 0;
    srq_attr_srq_18393.srq_limit = 0;

    if (ibv_modify_srq(srq_18393, &srq_attr_srq_18393, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[137] done.\n");

    printf("[138] DeregMR(mr=mr_65532) start.\n");

    /* ibv_dereg_mr */
    if (ibv_dereg_mr(mr_65532))
    {
        fprintf(stderr, "Failed to deregister MR\n");
        ;
    }
    printf("[138] done.\n");

    printf("[139] AllocPD(pd=pd_7715) start.\n");

    /* ibv_alloc_pd */
    pd_7715 = ibv_alloc_pd(ctx);
    if (!pd_7715)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[139] done.\n");

    printf("[140] PostSRQRecv(srq=srq_49329, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq_49329, bad_wr_var=bad_recv_wr_srq_49329) start.\n");

    memset(&recv_wr_srq_49329, 0, sizeof(recv_wr_srq_49329));

    memset(&recv_wr_srq_49329_sge_0, 0, sizeof(recv_wr_srq_49329_sge_0));
    recv_wr_srq_49329.sg_list = &recv_wr_srq_49329_sge_0;
    recv_wr_srq_49329.num_sge = 1;
    recv_wr_srq_49329.next = NULL;

    if (ibv_post_srq_recv(srq_49329, &recv_wr_srq_49329, &bad_recv_wr_srq_49329) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[140] done.\n");

    printf("[141] ModifyCQ(cq=cq_58715, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_58715, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[141] done.\n");

    printf("[142] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_17581) start.\n");

    /* ibv_create_cq */
    cq_17581 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_17581)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[142] done.\n");

    printf("[143] PostSRQRecv(srq=srq_48306, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq_48306, bad_wr_var=bad_recv_wr_srq_48306) start.\n");

    memset(&recv_wr_srq_48306, 0, sizeof(recv_wr_srq_48306));

    memset(&recv_wr_srq_48306_sge_0, 0, sizeof(recv_wr_srq_48306_sge_0));
    recv_wr_srq_48306.sg_list = &recv_wr_srq_48306_sge_0;
    recv_wr_srq_48306.num_sge = 1;
    recv_wr_srq_48306.next = NULL;

    if (ibv_post_srq_recv(srq_48306, &recv_wr_srq_48306, &bad_recv_wr_srq_48306) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[143] done.\n");

    printf("[144] PollCQ(cq=cq_58715) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_58715, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[144] done.\n");

    printf("[145] ModifySRQ(srq=srq_14213, attr_var=srq_attr_srq_14213, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_14213, 0, sizeof(srq_attr_srq_14213));
    srq_attr_srq_14213.max_wr = 1;
    srq_attr_srq_14213.srq_limit = 0;

    if (ibv_modify_srq(srq_14213, &srq_attr_srq_14213, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[145] done.\n");

    printf("[146] AllocPD(pd=pd_60779) start.\n");

    /* ibv_alloc_pd */
    pd_60779 = ibv_alloc_pd(ctx);
    if (!pd_60779)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[146] done.\n");

    printf("[147] PollCQ(cq=cq_17581) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_17581, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[147] done.\n");

    printf("[148] ModifySRQ(srq=srq_14213, attr_var=srq_attr_srq_14213, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_14213, 0, sizeof(srq_attr_srq_14213));
    srq_attr_srq_14213.max_wr = 1;
    srq_attr_srq_14213.srq_limit = 0;

    if (ibv_modify_srq(srq_14213, &srq_attr_srq_14213, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[148] done.\n");

    printf("[149] PostSRQRecv(srq=srq_18393, wr_obj=IbvRecvWR{sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq_18393, bad_wr_var=bad_recv_wr_srq_18393) start.\n");

    memset(&recv_wr_srq_18393, 0, sizeof(recv_wr_srq_18393));

    memset(&recv_wr_srq_18393_sge_0, 0, sizeof(recv_wr_srq_18393_sge_0));
    recv_wr_srq_18393.sg_list = &recv_wr_srq_18393_sge_0;
    recv_wr_srq_18393.next = NULL;

    if (ibv_post_srq_recv(srq_18393, &recv_wr_srq_18393, &bad_recv_wr_srq_18393) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[149] done.\n");

    printf("[150] AllocPD(pd=pd_26424) start.\n");

    /* ibv_alloc_pd */
    pd_26424 = ibv_alloc_pd(ctx);
    if (!pd_26424)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[150] done.\n");

    printf("[151] DestroyCQ(cq=cq_41912) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq_41912))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[151] done.\n");

    printf("[152] DestroyCQ(cq=cq_17581) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq_17581))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[152] done.\n");

    printf("[153] ModifyCQ(cq=cq_27634, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_27634, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[153] done.\n");

    printf("[154] PollCQ(cq=cq_32181) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_32181, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[154] done.\n");

    printf("[155] PollCQ(cq=cq_54626) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_54626, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[155] done.\n");

    printf("[156] ModifyCQ(cq=cq_32181, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_32181, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[156] done.\n");

    printf("[157] AllocPD(pd=pd_36003) start.\n");

    /* ibv_alloc_pd */
    pd_36003 = ibv_alloc_pd(ctx);
    if (!pd_36003)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[157] done.\n");

    printf("[158] DestroyQP(qp=qp_25614) start.\n");

    /* ibv_destroy_qp */
    if (ibv_destroy_qp(qp_25614))
    {
        fprintf(stderr, "Failed to destroy QP\n");
        ;
    }
    printf("[158] done.\n");

    printf("[159] AllocPD(pd=pd_4461) start.\n");

    /* ibv_alloc_pd */
    pd_4461 = ibv_alloc_pd(ctx);
    if (!pd_4461)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[159] done.\n");

    printf("[160] RegMR(pd=pd_60779, mr=mr_65076, addr=bufs[36], length=4096, access=IBV_ACCESS_LOCAL_WRITE) start.\n");

    /* ibv_reg_mr */
    mr_65076 = ibv_reg_mr(pd_60779, bufs[36], 4096, IBV_ACCESS_LOCAL_WRITE);
    if (!mr_65076)
    {
        fprintf(stderr, "Failed to register memory region\n");
        ;
    }

    mrs[mrs_size++] = (PR_MR){
        .id = "mr_65076",
        .addr = (uint64_t)(mr_65076->addr),
        .length = 1024,
        .lkey = mr_65076->lkey};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);

    printf("[160] done.\n");

    printf("[161] ModifySRQ(srq=srq0, attr_var=srq_attr_srq0, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq0, 0, sizeof(srq_attr_srq0));
    srq_attr_srq0.max_wr = 1;
    srq_attr_srq0.srq_limit = 0;

    if (ibv_modify_srq(srq0, &srq_attr_srq0, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[161] done.\n");

    printf("[162] DestroyCQ(cq=cq_58715) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq_58715))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[162] done.\n");

    printf("[163] PollCQ(cq=cq_34171) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_34171, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[163] done.\n");

    printf("[164] ModifySRQ(srq=srq_14213, attr_var=srq_attr_srq_14213, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_14213, 0, sizeof(srq_attr_srq_14213));
    srq_attr_srq_14213.max_wr = 1;
    srq_attr_srq_14213.srq_limit = 0;

    if (ibv_modify_srq(srq_14213, &srq_attr_srq_14213, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[164] done.\n");

    printf("[165] AllocPD(pd=pd_56596) start.\n");

    /* ibv_alloc_pd */
    pd_56596 = ibv_alloc_pd(ctx);
    if (!pd_56596)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[165] done.\n");

    printf("[166] ModifyCQ(cq=cq_34171, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_34171, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[166] done.\n");

    printf("[167] PostSRQRecv(srq=srq_18393, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq_18393, bad_wr_var=bad_recv_wr_srq_18393) start.\n");

    memset(&recv_wr_srq_18393, 0, sizeof(recv_wr_srq_18393));

    memset(&recv_wr_srq_18393_sge_0, 0, sizeof(recv_wr_srq_18393_sge_0));
    recv_wr_srq_18393.sg_list = &recv_wr_srq_18393_sge_0;
    recv_wr_srq_18393.num_sge = 1;
    recv_wr_srq_18393.next = NULL;

    if (ibv_post_srq_recv(srq_18393, &recv_wr_srq_18393, &bad_recv_wr_srq_18393) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[167] done.\n");

    printf("[168] ModifySRQ(srq=srq0, attr_var=srq_attr_srq0, attr_obj=IbvSrqAttr{max_wr=1024}, attr_mask=0) start.\n");

    memset(&srq_attr_srq0, 0, sizeof(srq_attr_srq0));
    srq_attr_srq0.max_wr = 1024;

    if (ibv_modify_srq(srq0, &srq_attr_srq0, 0) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[168] done.\n");

    printf("[169] ModifyCQ(cq=cq_34171, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_34171, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[169] done.\n");

    printf("[170] PollCQ(cq=cq_34171) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_34171, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[170] done.\n");

    printf("[171] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_52634) start.\n");

    /* ibv_create_cq */
    cq_52634 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_52634)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[171] done.\n");

    printf("[172] DeallocPD(pd=pd_39135) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_39135))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[172] done.\n");

    printf("[173] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_33410) start.\n");

    /* ibv_create_cq */
    cq_33410 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_33410)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[173] done.\n");

    printf("[174] PostSRQRecv(srq=srq_14213, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq_14213, bad_wr_var=bad_recv_wr_srq_14213) start.\n");

    memset(&recv_wr_srq_14213, 0, sizeof(recv_wr_srq_14213));

    memset(&recv_wr_srq_14213_sge_0, 0, sizeof(recv_wr_srq_14213_sge_0));
    recv_wr_srq_14213.sg_list = &recv_wr_srq_14213_sge_0;
    recv_wr_srq_14213.num_sge = 1;
    recv_wr_srq_14213.next = NULL;

    if (ibv_post_srq_recv(srq_14213, &recv_wr_srq_14213, &bad_recv_wr_srq_14213) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[174] done.\n");

    printf("[175] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=1, cq=cq_23583) start.\n");

    /* ibv_create_cq */
    cq_23583 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             1);
    if (!cq_23583)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[175] done.\n");

    printf("[176] DeregMR(mr=mr_65076) start.\n");

    /* ibv_dereg_mr */
    if (ibv_dereg_mr(mr_65076))
    {
        fprintf(stderr, "Failed to deregister MR\n");
        ;
    }
    printf("[176] done.\n");

    printf("[177] ModifySRQ(srq=srq_18393, attr_var=srq_attr_srq_48306, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=2) start.\n");

    memset(&srq_attr_srq_48306, 0, sizeof(srq_attr_srq_48306));
    srq_attr_srq_48306.max_wr = 1;
    srq_attr_srq_48306.srq_limit = 0;

    if (ibv_modify_srq(srq_18393, &srq_attr_srq_48306, 2) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[177] done.\n");

    printf("[178] ModifyCQ(cq=cq_33410, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_33410, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[178] done.\n");

    printf("[179] CreateSRQ(pd=pd_26424, srq=srq_49998, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{max_wr=1, max_sge=1, srq_limit=0}}) start.\n");

    /* ibv_create_srq */

    memset(&srq_init_attr__49998, 0, sizeof(srq_init_attr__49998));

    memset(&srq_init_attr__49998_attr, 0, sizeof(srq_init_attr__49998_attr));
    srq_init_attr__49998_attr.max_wr = 1;
    srq_init_attr__49998_attr.max_sge = 1;
    srq_init_attr__49998_attr.srq_limit = 0;
    srq_init_attr__49998.attr = srq_init_attr__49998_attr;

    srq_49998 = ibv_create_srq(pd_26424, &srq_init_attr__49998);
    if (!srq_49998)
    {
        fprintf(stderr, "Failed to create SRQ\n");
        ;
    }
    printf("[179] done.\n");

    printf("[180] CreateSRQ(pd=pd_7715, srq=srq_34475, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{max_wr=1, max_sge=1, srq_limit=0}}) start.\n");

    /* ibv_create_srq */

    memset(&srq_init_attr__34475, 0, sizeof(srq_init_attr__34475));

    memset(&srq_init_attr__34475_attr, 0, sizeof(srq_init_attr__34475_attr));
    srq_init_attr__34475_attr.max_wr = 1;
    srq_init_attr__34475_attr.max_sge = 1;
    srq_init_attr__34475_attr.srq_limit = 0;
    srq_init_attr__34475.attr = srq_init_attr__34475_attr;

    srq_34475 = ibv_create_srq(pd_7715, &srq_init_attr__34475);
    if (!srq_34475)
    {
        fprintf(stderr, "Failed to create SRQ\n");
        ;
    }
    printf("[180] done.\n");

    printf("[181] PostSRQRecv(srq=srq_18393, wr_obj=IbvRecvWR{num_sge=0, sg_list=[]}, wr_var=recv_wr_srq_18393, bad_wr_var=bad_recv_wr_srq_18393) start.\n");

    memset(&recv_wr_srq_18393, 0, sizeof(recv_wr_srq_18393));
    recv_wr_srq_18393.num_sge = 0;
    recv_wr_srq_18393.next = NULL;

    if (ibv_post_srq_recv(srq_18393, &recv_wr_srq_18393, &bad_recv_wr_srq_18393) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[181] done.\n");

    printf("[182] AllocPD(pd=pd_20875) start.\n");

    /* ibv_alloc_pd */
    pd_20875 = ibv_alloc_pd(ctx);
    if (!pd_20875)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[182] done.\n");

    printf("[183] PollCQ(cq=cq_33410) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_33410, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[183] done.\n");

    printf("[184] PollCQ(cq=cq_33410) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_33410, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[184] done.\n");

    printf("[185] AllocPD(pd=pd_21661) start.\n");

    /* ibv_alloc_pd */
    pd_21661 = ibv_alloc_pd(ctx);
    if (!pd_21661)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[185] done.\n");

    printf("[186] ModifySRQ(srq=srq_48306, attr_var=srq_attr_srq_48306, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_48306, 0, sizeof(srq_attr_srq_48306));
    srq_attr_srq_48306.max_wr = 1;
    srq_attr_srq_48306.srq_limit = 0;

    if (ibv_modify_srq(srq_48306, &srq_attr_srq_48306, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[186] done.\n");

    printf("[187] ModifyCQ(cq=cq_46537, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_46537, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[187] done.\n");

    printf("[188] PollCQ(cq=cq_46537) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_46537, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[188] done.\n");

    printf("[189] DestroyCQ(cq=cq_49818) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq_49818))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[189] done.\n");

    printf("[190] PostSRQRecv(srq=srq_53103, wr_obj=IbvRecvWR{num_sge=1, next=IbvRecvWR{num_sge=0, sg_list=[], wr_id=8590635366150132686}}, wr_var=recv_wr_srq_53103, bad_wr_var=bad_recv_wr_srq_53103) start.\n");

    memset(&recv_wr_srq_53103, 0, sizeof(recv_wr_srq_53103));
    recv_wr_srq_53103.num_sge = 1;

    memset(&recv_wr_srq_53103_next, 0, sizeof(recv_wr_srq_53103_next));
    recv_wr_srq_53103_next.wr_id = 8590635366150132686;
    recv_wr_srq_53103_next.num_sge = 0;
    recv_wr_srq_53103_next.next = NULL;
    recv_wr_srq_53103.next = &recv_wr_srq_53103_next;

    if (ibv_post_srq_recv(srq_53103, &recv_wr_srq_53103, &bad_recv_wr_srq_53103) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[190] done.\n");

    printf("[191] PollCQ(cq=cq_46537) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_46537, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[191] done.\n");

    printf("[192] RegMR(pd=pd_26424, mr=mr_44723, addr=bufs[56], length=4096, access=IBV_ACCESS_LOCAL_WRITE) start.\n");

    /* ibv_reg_mr */
    mr_44723 = ibv_reg_mr(pd_26424, bufs[56], 4096, IBV_ACCESS_LOCAL_WRITE);
    if (!mr_44723)
    {
        fprintf(stderr, "Failed to register memory region\n");
        ;
    }

    mrs[mrs_size++] = (PR_MR){
        .id = "mr_44723",
        .addr = (uint64_t)(mr_44723->addr),
        .length = 1024,
        .lkey = mr_44723->lkey};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);

    printf("[192] done.\n");

    printf("[193] ModifyCQ(cq=cq_46537, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_46537, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[193] done.\n");

    printf("[194] CreateCQ(cqe=15, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_12619) start.\n");

    /* ibv_create_cq */
    cq_12619 = ibv_create_cq(ctx, 15,
                             NULL, NULL,
                             0);
    if (!cq_12619)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[194] done.\n");

    printf("[195] ModifySRQ(srq=srq_14213, attr_var=srq_attr_srq_14213, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_14213, 0, sizeof(srq_attr_srq_14213));
    srq_attr_srq_14213.max_wr = 1;
    srq_attr_srq_14213.srq_limit = 0;

    if (ibv_modify_srq(srq_14213, &srq_attr_srq_14213, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[195] done.\n");

    printf("[196] DestroyCQ(cq=cq_32181) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq_32181))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[196] done.\n");

    printf("[197] PostSRQRecv(srq=srq_18393, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq_18393, bad_wr_var=bad_recv_wr_srq_18393) start.\n");

    memset(&recv_wr_srq_18393, 0, sizeof(recv_wr_srq_18393));

    memset(&recv_wr_srq_18393_sge_0, 0, sizeof(recv_wr_srq_18393_sge_0));
    recv_wr_srq_18393.sg_list = &recv_wr_srq_18393_sge_0;
    recv_wr_srq_18393.num_sge = 1;
    recv_wr_srq_18393.next = NULL;

    if (ibv_post_srq_recv(srq_18393, &recv_wr_srq_18393, &bad_recv_wr_srq_18393) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[197] done.\n");

    printf("[198] DestroyCQ(cq=cq_33396) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq_33396))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[198] done.\n");

    printf("[199] PostSRQRecv(srq=srq_49329, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq_49329, bad_wr_var=bad_recv_wr_srq_49329) start.\n");

    memset(&recv_wr_srq_49329, 0, sizeof(recv_wr_srq_49329));

    memset(&recv_wr_srq_49329_sge_0, 0, sizeof(recv_wr_srq_49329_sge_0));
    recv_wr_srq_49329.sg_list = &recv_wr_srq_49329_sge_0;
    recv_wr_srq_49329.num_sge = 1;
    recv_wr_srq_49329.next = NULL;

    if (ibv_post_srq_recv(srq_49329, &recv_wr_srq_49329, &bad_recv_wr_srq_49329) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[199] done.\n");

    printf("[200] ModifySRQ(srq=srq_18393, attr_var=srq_attr_srq_18393, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_18393, 0, sizeof(srq_attr_srq_18393));
    srq_attr_srq_18393.max_wr = 1;
    srq_attr_srq_18393.srq_limit = 0;

    if (ibv_modify_srq(srq_18393, &srq_attr_srq_18393, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[200] done.\n");

    printf("[201] ModifyCQ(cq=cq_12619, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_12619, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[201] done.\n");

    printf("[202] ModifySRQ(srq=srq_18393, attr_var=srq_attr_srq_18393, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_18393, 0, sizeof(srq_attr_srq_18393));
    srq_attr_srq_18393.max_wr = 1;
    srq_attr_srq_18393.srq_limit = 0;

    if (ibv_modify_srq(srq_18393, &srq_attr_srq_18393, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[202] done.\n");

    printf("[203] AllocPD(pd=pd_51130) start.\n");

    /* ibv_alloc_pd */
    pd_51130 = ibv_alloc_pd(ctx);
    if (!pd_51130)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[203] done.\n");

    printf("[204] DeallocPD(pd=pd_56596) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_56596))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[204] done.\n");

    printf("[205] CreateSRQ(pd=pd1, srq=srq_29539, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{max_wr=1, max_sge=1, srq_limit=0}}) start.\n");

    /* ibv_create_srq */

    memset(&srq_init_attr__29539, 0, sizeof(srq_init_attr__29539));

    memset(&srq_init_attr__29539_attr, 0, sizeof(srq_init_attr__29539_attr));
    srq_init_attr__29539_attr.max_wr = 1;
    srq_init_attr__29539_attr.max_sge = 1;
    srq_init_attr__29539_attr.srq_limit = 0;
    srq_init_attr__29539.attr = srq_init_attr__29539_attr;

    srq_29539 = ibv_create_srq(pd1, &srq_init_attr__29539);
    if (!srq_29539)
    {
        fprintf(stderr, "Failed to create SRQ\n");
        ;
    }
    printf("[205] done.\n");

    printf("[206] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_53207) start.\n");

    /* ibv_create_cq */
    cq_53207 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_53207)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[206] done.\n");

    printf("[207] AllocPD(pd=pd_11319) start.\n");

    /* ibv_alloc_pd */
    pd_11319 = ibv_alloc_pd(ctx);
    if (!pd_11319)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[207] done.\n");

    printf("[208] ModifySRQ(srq=srq_18393, attr_var=srq_attr_srq_18393, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_18393, 0, sizeof(srq_attr_srq_18393));
    srq_attr_srq_18393.max_wr = 1;
    srq_attr_srq_18393.srq_limit = 0;

    if (ibv_modify_srq(srq_18393, &srq_attr_srq_18393, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[208] done.\n");

    printf("[209] DestroyCQ(cq=cq1) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq1))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[209] done.\n");

    printf("[210] CreateQP(pd=pd_26424, qp=qp_43498, init_attr_obj=IbvQPInitAttr{send_cq=cq_12619, recv_cq=cq_54626, qp_type=IBV_QPT_RC, cap=IbvQPCap{max_send_wr=1, max_recv_wr=1, max_send_sge=1, max_recv_sge=1}}, remote_qp=srv44) start.\n");

    /* ibv_create_qp */

    memset(&attr_init_qp_43498, 0, sizeof(attr_init_qp_43498));
    attr_init_qp_43498.send_cq = cq_12619;
    attr_init_qp_43498.recv_cq = cq_54626;

    memset(&attr_init_qp_43498_cap, 0, sizeof(attr_init_qp_43498_cap));
    attr_init_qp_43498_cap.max_send_wr = 1;
    attr_init_qp_43498_cap.max_recv_wr = 1;
    attr_init_qp_43498_cap.max_send_sge = 1;
    attr_init_qp_43498_cap.max_recv_sge = 1;
    attr_init_qp_43498.cap = attr_init_qp_43498_cap;
    attr_init_qp_43498.qp_type = IBV_QPT_RC;

    qp_43498 = ibv_create_qp(pd_26424, &attr_init_qp_43498);
    if (!qp_43498)
    {
        fprintf(stderr, "Failed to create QP\n");
        ;
    }

    qps[qps_size++] = (PR_QP){
        .id = "qp_43498",
        .qpn = qp_43498->qp_num,
        .psn = 0,
        .port = 1,
        .lid = 0,
        .gid = "" // will set below
    };

    snprintf(qps[qps_size - 1].gid, sizeof(qps[qps_size - 1].gid),
             "%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x",
             gid.raw[0], gid.raw[1], gid.raw[2], gid.raw[3], gid.raw[4], gid.raw[5], gid.raw[6], gid.raw[7], gid.raw[8], gid.raw[9], gid.raw[10], gid.raw[11], gid.raw[12], gid.raw[13], gid.raw[14], gid.raw[15]);

    prs[prs_size++] = (PR_Pair){
        .id = "pair-qp_43498-srv44",
        .cli_id = "qp_43498",
        .srv_id = "srv44"};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
    printf("[210] done.\n");

    printf("[211] DestroyQP(qp=qp_43498) start.\n");

    /* ibv_destroy_qp */
    if (ibv_destroy_qp(qp_43498))
    {
        fprintf(stderr, "Failed to destroy QP\n");
        ;
    }
    printf("[211] done.\n");

    printf("[212] ModifySRQ(srq=srq_29539, attr_var=srq_attr_srq_29539, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_29539, 0, sizeof(srq_attr_srq_29539));
    srq_attr_srq_29539.max_wr = 1;
    srq_attr_srq_29539.srq_limit = 0;

    if (ibv_modify_srq(srq_29539, &srq_attr_srq_29539, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[212] done.\n");

    printf("[213] CreateSRQ(pd=pd_20875, srq=srq_19331, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{max_wr=1, max_sge=1, srq_limit=0}}) start.\n");

    /* ibv_create_srq */

    memset(&srq_init_attr__19331, 0, sizeof(srq_init_attr__19331));

    memset(&srq_init_attr__19331_attr, 0, sizeof(srq_init_attr__19331_attr));
    srq_init_attr__19331_attr.max_wr = 1;
    srq_init_attr__19331_attr.max_sge = 1;
    srq_init_attr__19331_attr.srq_limit = 0;
    srq_init_attr__19331.attr = srq_init_attr__19331_attr;

    srq_19331 = ibv_create_srq(pd_20875, &srq_init_attr__19331);
    if (!srq_19331)
    {
        fprintf(stderr, "Failed to create SRQ\n");
        ;
    }
    printf("[213] done.\n");

    printf("[214] PostSRQRecv(srq=srq_53103, wr_obj=IbvRecvWR{num_sge=1}, wr_var=recv_wr_srq_53103, bad_wr_var=bad_recv_wr_srq_53103) start.\n");

    memset(&recv_wr_srq_53103, 0, sizeof(recv_wr_srq_53103));
    recv_wr_srq_53103.num_sge = 1;
    recv_wr_srq_53103.next = NULL;

    if (ibv_post_srq_recv(srq_53103, &recv_wr_srq_53103, &bad_recv_wr_srq_53103) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[214] done.\n");

    printf("[215] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_30626) start.\n");

    /* ibv_create_cq */
    cq_30626 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_30626)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[215] done.\n");

    printf("[216] AllocPD(pd=pd_47444) start.\n");

    /* ibv_alloc_pd */
    pd_47444 = ibv_alloc_pd(ctx);
    if (!pd_47444)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[216] done.\n");

    printf("[217] DestroyCQ(cq=cq_23583) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq_23583))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[217] done.\n");

    printf("[218] AllocPD(pd=pd_1795) start.\n");

    /* ibv_alloc_pd */
    pd_1795 = ibv_alloc_pd(ctx);
    if (!pd_1795)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[218] done.\n");

    printf("[219] CreateSRQ(pd=pd_1795, srq=srq_32812, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{max_wr=1, max_sge=1, srq_limit=0}}) start.\n");

    /* ibv_create_srq */

    memset(&srq_init_attr__32812, 0, sizeof(srq_init_attr__32812));

    memset(&srq_init_attr__32812_attr, 0, sizeof(srq_init_attr__32812_attr));
    srq_init_attr__32812_attr.max_wr = 1;
    srq_init_attr__32812_attr.max_sge = 1;
    srq_init_attr__32812_attr.srq_limit = 0;
    srq_init_attr__32812.attr = srq_init_attr__32812_attr;

    srq_32812 = ibv_create_srq(pd_1795, &srq_init_attr__32812);
    if (!srq_32812)
    {
        fprintf(stderr, "Failed to create SRQ\n");
        ;
    }
    printf("[219] done.\n");

    printf("[220] ModifySRQ(srq=srq_29539, attr_var=srq_attr_srq_29539, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_29539, 0, sizeof(srq_attr_srq_29539));
    srq_attr_srq_29539.max_wr = 1;
    srq_attr_srq_29539.srq_limit = 0;

    if (ibv_modify_srq(srq_29539, &srq_attr_srq_29539, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[220] done.\n");

    printf("[221] DeallocPD(pd=pd_36003) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_36003))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[221] done.\n");

    printf("[222] PostSRQRecv(srq=srq_34475, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq_34475, bad_wr_var=bad_recv_wr_srq_34475) start.\n");

    memset(&recv_wr_srq_34475, 0, sizeof(recv_wr_srq_34475));

    memset(&recv_wr_srq_34475_sge_0, 0, sizeof(recv_wr_srq_34475_sge_0));
    recv_wr_srq_34475.sg_list = &recv_wr_srq_34475_sge_0;
    recv_wr_srq_34475.num_sge = 1;
    recv_wr_srq_34475.next = NULL;

    if (ibv_post_srq_recv(srq_34475, &recv_wr_srq_34475, &bad_recv_wr_srq_34475) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[222] done.\n");

    printf("[223] PollCQ(cq=cq_30626) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_30626, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[223] done.\n");

    printf("[224] DeallocPD(pd=pd_11319) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_11319))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[224] done.\n");

    printf("[225] DeallocPD(pd=pd_21661) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_21661))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[225] done.\n");

    printf("[226] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_23893) start.\n");

    /* ibv_create_cq */
    cq_23893 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_23893)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[226] done.\n");

    printf("[227] DeallocPD(pd=pd1) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd1))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[227] done.\n");

    printf("[228] ModifyCQ(cq=cq_30626, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_30626, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[228] done.\n");

    printf("[229] AllocPD(pd=pd_32462) start.\n");

    /* ibv_alloc_pd */
    pd_32462 = ibv_alloc_pd(ctx);
    if (!pd_32462)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[229] done.\n");

    printf("[230] ModifyCQ(cq=cq_23893, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_23893, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[230] done.\n");

    printf("[231] DeregMR(mr=mr_14130) start.\n");

    /* ibv_dereg_mr */
    if (ibv_dereg_mr(mr_14130))
    {
        fprintf(stderr, "Failed to deregister MR\n");
        ;
    }
    printf("[231] done.\n");

    printf("[232] PollCQ(cq=cq_30626) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_30626, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[232] done.\n");

    printf("[233] ModifyCQ(cq=cq_23893, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_23893, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[233] done.\n");

    printf("[234] DestroyCQ(cq=cq_23893) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq_23893))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[234] done.\n");

    printf("[235] RegMR(pd=pd_32462, mr=mr_8841, addr=bufs[39], length=4096, access=IBV_ACCESS_LOCAL_WRITE) start.\n");

    /* ibv_reg_mr */
    mr_8841 = ibv_reg_mr(pd_32462, bufs[39], 4096, IBV_ACCESS_LOCAL_WRITE);
    if (!mr_8841)
    {
        fprintf(stderr, "Failed to register memory region\n");
        ;
    }

    mrs[mrs_size++] = (PR_MR){
        .id = "mr_8841",
        .addr = (uint64_t)(mr_8841->addr),
        .length = 1024,
        .lkey = mr_8841->lkey};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);

    printf("[235] done.\n");

    printf("[236] PollCQ(cq=cq_54626) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_54626, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[236] done.\n");

    printf("[237] ModifyCQ(cq=cq_54626, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_54626, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[237] done.\n");

    printf("[238] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_38993) start.\n");

    /* ibv_create_cq */
    cq_38993 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_38993)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[238] done.\n");

    printf("[239] ModifySRQ(srq=srq_29539, attr_var=srq_attr_srq_29539, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_29539, 0, sizeof(srq_attr_srq_29539));
    srq_attr_srq_29539.max_wr = 1;
    srq_attr_srq_29539.srq_limit = 0;

    if (ibv_modify_srq(srq_29539, &srq_attr_srq_29539, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[239] done.\n");

    printf("[240] DeallocPD(pd=pd_4461) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_4461))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[240] done.\n");

    printf("[241] ModifySRQ(srq=srq_29539, attr_var=srq_attr_srq_29539, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_29539, 0, sizeof(srq_attr_srq_29539));
    srq_attr_srq_29539.max_wr = 1;
    srq_attr_srq_29539.srq_limit = 0;

    if (ibv_modify_srq(srq_29539, &srq_attr_srq_29539, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[241] done.\n");

    printf("[242] DeallocPD(pd=pd_60779) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_60779))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[242] done.\n");

    printf("[243] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_36440) start.\n");

    /* ibv_create_cq */
    cq_36440 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_36440)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[243] done.\n");

    printf("[244] PostSRQRecv(srq=srq_53103, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq_53103, bad_wr_var=bad_recv_wr_srq_53103) start.\n");

    memset(&recv_wr_srq_53103, 0, sizeof(recv_wr_srq_53103));

    memset(&recv_wr_srq_53103_sge_0, 0, sizeof(recv_wr_srq_53103_sge_0));
    recv_wr_srq_53103.sg_list = &recv_wr_srq_53103_sge_0;
    recv_wr_srq_53103.num_sge = 1;
    recv_wr_srq_53103.next = NULL;

    if (ibv_post_srq_recv(srq_53103, &recv_wr_srq_53103, &bad_recv_wr_srq_53103) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[244] done.\n");

    printf("[245] DeallocPD(pd=pd_47444) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_47444))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[245] done.\n");

    printf("[246] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_6228) start.\n");

    /* ibv_create_cq */
    cq_6228 = ibv_create_cq(ctx, 16,
                            NULL, NULL,
                            0);
    if (!cq_6228)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[246] done.\n");

    printf("[247] PostSRQRecv(srq=srq_49329, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq_49329, bad_wr_var=bad_recv_wr_srq_49329) start.\n");

    memset(&recv_wr_srq_49329, 0, sizeof(recv_wr_srq_49329));

    memset(&recv_wr_srq_49329_sge_0, 0, sizeof(recv_wr_srq_49329_sge_0));
    recv_wr_srq_49329.sg_list = &recv_wr_srq_49329_sge_0;
    recv_wr_srq_49329.num_sge = 1;
    recv_wr_srq_49329.next = NULL;

    if (ibv_post_srq_recv(srq_49329, &recv_wr_srq_49329, &bad_recv_wr_srq_49329) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[247] done.\n");

    printf("[248] DeallocPD(pd=pd_7715) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_7715))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[248] done.\n");

    printf("[249] ModifySRQ(srq=srq_32812, attr_var=srq_attr_srq_32812, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_32812, 0, sizeof(srq_attr_srq_32812));
    srq_attr_srq_32812.max_wr = 1;
    srq_attr_srq_32812.srq_limit = 0;

    if (ibv_modify_srq(srq_32812, &srq_attr_srq_32812, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[249] done.\n");

    printf("[250] PostSRQRecv(srq=srq_49998, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}], next=IbvRecvWR{num_sge=0, sg_list=[], wr_id=14806519126992121009}}, wr_var=recv_wr_srq_49998, bad_wr_var=bad_recv_wr_srq_49998) start.\n");

    memset(&recv_wr_srq_49998, 0, sizeof(recv_wr_srq_49998));

    memset(&recv_wr_srq_49998_sge_0, 0, sizeof(recv_wr_srq_49998_sge_0));
    recv_wr_srq_49998.sg_list = &recv_wr_srq_49998_sge_0;
    recv_wr_srq_49998.num_sge = 1;

    memset(&recv_wr_srq_49998_next, 0, sizeof(recv_wr_srq_49998_next));
    recv_wr_srq_49998_next.wr_id = 14806519126992121009;
    recv_wr_srq_49998_next.num_sge = 0;
    recv_wr_srq_49998_next.next = NULL;
    recv_wr_srq_49998.next = &recv_wr_srq_49998_next;

    if (ibv_post_srq_recv(srq_49998, &recv_wr_srq_49998, &bad_recv_wr_srq_49998) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[250] done.\n");

    printf("[251] PollCQ(cq=cq_54626) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_54626, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[251] done.\n");

    printf("[252] PollCQ(cq=cq_33410) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_33410, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[252] done.\n");

    printf("[253] PollCQ(cq=cq_30626) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_30626, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[253] done.\n");

    printf("[254] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_55033) start.\n");

    /* ibv_create_cq */
    cq_55033 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_55033)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[254] done.\n");

    printf("[255] CreateQP(pd=pd_20875, qp=qp_41889, init_attr_obj=IbvQPInitAttr{send_cq=cq_30626, recv_cq=cq_38993, qp_type=IBV_QPT_RC, cap=IbvQPCap{max_send_wr=1, max_recv_wr=1, max_send_sge=1, max_recv_sge=1}}, remote_qp=srv67) start.\n");

    /* ibv_create_qp */

    memset(&attr_init_qp_41889, 0, sizeof(attr_init_qp_41889));
    attr_init_qp_41889.send_cq = cq_30626;
    attr_init_qp_41889.recv_cq = cq_38993;

    memset(&attr_init_qp_41889_cap, 0, sizeof(attr_init_qp_41889_cap));
    attr_init_qp_41889_cap.max_send_wr = 1;
    attr_init_qp_41889_cap.max_recv_wr = 1;
    attr_init_qp_41889_cap.max_send_sge = 1;
    attr_init_qp_41889_cap.max_recv_sge = 1;
    attr_init_qp_41889.cap = attr_init_qp_41889_cap;
    attr_init_qp_41889.qp_type = IBV_QPT_RC;

    qp_41889 = ibv_create_qp(pd_20875, &attr_init_qp_41889);
    if (!qp_41889)
    {
        fprintf(stderr, "Failed to create QP\n");
        ;
    }

    qps[qps_size++] = (PR_QP){
        .id = "qp_41889",
        .qpn = qp_41889->qp_num,
        .psn = 0,
        .port = 1,
        .lid = 0,
        .gid = "" // will set below
    };

    snprintf(qps[qps_size - 1].gid, sizeof(qps[qps_size - 1].gid),
             "%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x",
             gid.raw[0], gid.raw[1], gid.raw[2], gid.raw[3], gid.raw[4], gid.raw[5], gid.raw[6], gid.raw[7], gid.raw[8], gid.raw[9], gid.raw[10], gid.raw[11], gid.raw[12], gid.raw[13], gid.raw[14], gid.raw[15]);

    prs[prs_size++] = (PR_Pair){
        .id = "pair-qp_41889-srv67",
        .cli_id = "qp_41889",
        .srv_id = "srv67"};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
    printf("[255] done.\n");

    printf("[256] AllocPD(pd=pd_25161) start.\n");

    /* ibv_alloc_pd */
    pd_25161 = ibv_alloc_pd(ctx);
    if (!pd_25161)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[256] done.\n");

    printf("[257] DestroyQP(qp=qp_41889) start.\n");

    /* ibv_destroy_qp */
    if (ibv_destroy_qp(qp_41889))
    {
        fprintf(stderr, "Failed to destroy QP\n");
        ;
    }
    printf("[257] done.\n");

    printf("[258] DestroyCQ(cq=cq_12619) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq_12619))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[258] done.\n");

    printf("[259] PostSRQRecv(srq=srq0, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq0, bad_wr_var=bad_recv_wr_srq0) start.\n");

    memset(&recv_wr_srq0, 0, sizeof(recv_wr_srq0));

    memset(&recv_wr_srq0_sge_0, 0, sizeof(recv_wr_srq0_sge_0));
    recv_wr_srq0.sg_list = &recv_wr_srq0_sge_0;
    recv_wr_srq0.num_sge = 1;
    recv_wr_srq0.next = NULL;

    if (ibv_post_srq_recv(srq0, &recv_wr_srq0, &bad_recv_wr_srq0) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[259] done.\n");

    printf("[260] AllocPD(pd=pd_64898) start.\n");

    /* ibv_alloc_pd */
    pd_64898 = ibv_alloc_pd(ctx);
    if (!pd_64898)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[260] done.\n");

    printf("[261] DestroyCQ(cq=cq_5925) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq_5925))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[261] done.\n");

    printf("[262] ModifyCQ(cq=cq_33410, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_33410, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[262] done.\n");

    printf("[263] ModifySRQ(srq=srq_14213, attr_var=srq_attr_srq_14213, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_14213, 0, sizeof(srq_attr_srq_14213));
    srq_attr_srq_14213.max_wr = 1;
    srq_attr_srq_14213.srq_limit = 0;

    if (ibv_modify_srq(srq_14213, &srq_attr_srq_14213, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[263] done.\n");

    printf("[264] DeallocPD(pd=pd_25161) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_25161))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[264] done.\n");

    printf("[265] PostSRQRecv(srq=srq_29539, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq_29539, bad_wr_var=bad_recv_wr_srq_29539) start.\n");

    memset(&recv_wr_srq_29539, 0, sizeof(recv_wr_srq_29539));

    memset(&recv_wr_srq_29539_sge_0, 0, sizeof(recv_wr_srq_29539_sge_0));
    recv_wr_srq_29539.sg_list = &recv_wr_srq_29539_sge_0;
    recv_wr_srq_29539.num_sge = 1;
    recv_wr_srq_29539.next = NULL;

    if (ibv_post_srq_recv(srq_29539, &recv_wr_srq_29539, &bad_recv_wr_srq_29539) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[265] done.\n");

    printf("[266] RegMR(pd=pd_21322, mr=mr_2793, addr=bufs[13], length=4096, access=IBV_ACCESS_LOCAL_WRITE) start.\n");

    /* ibv_reg_mr */
    mr_2793 = ibv_reg_mr(pd_21322, bufs[13], 4096, IBV_ACCESS_LOCAL_WRITE);
    if (!mr_2793)
    {
        fprintf(stderr, "Failed to register memory region\n");
        ;
    }

    mrs[mrs_size++] = (PR_MR){
        .id = "mr_2793",
        .addr = (uint64_t)(mr_2793->addr),
        .length = 1024,
        .lkey = mr_2793->lkey};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);

    printf("[266] done.\n");

    printf("[267] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_18411) start.\n");

    /* ibv_create_cq */
    cq_18411 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_18411)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[267] done.\n");

    printf("[268] ModifySRQ(srq=srq_32812, attr_var=srq_attr_srq_32812, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_32812, 0, sizeof(srq_attr_srq_32812));
    srq_attr_srq_32812.max_wr = 1;
    srq_attr_srq_32812.srq_limit = 0;

    if (ibv_modify_srq(srq_32812, &srq_attr_srq_32812, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[268] done.\n");

    printf("[269] AllocPD(pd=pd_61297) start.\n");

    /* ibv_alloc_pd */
    pd_61297 = ibv_alloc_pd(ctx);
    if (!pd_61297)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[269] done.\n");

    printf("[270] CreateQP(pd=pd_1795, qp=qp_63079, init_attr_obj=IbvQPInitAttr{send_cq=cq_30626, recv_cq=cq_46537, qp_type=IBV_QPT_RC, cap=IbvQPCap{max_send_wr=1, max_recv_wr=1, max_send_sge=1, max_recv_sge=1}}, remote_qp=srv12) start.\n");

    /* ibv_create_qp */

    memset(&attr_init_qp_63079, 0, sizeof(attr_init_qp_63079));
    attr_init_qp_63079.send_cq = cq_30626;
    attr_init_qp_63079.recv_cq = cq_46537;

    memset(&attr_init_qp_63079_cap, 0, sizeof(attr_init_qp_63079_cap));
    attr_init_qp_63079_cap.max_send_wr = 1;
    attr_init_qp_63079_cap.max_recv_wr = 1;
    attr_init_qp_63079_cap.max_send_sge = 1;
    attr_init_qp_63079_cap.max_recv_sge = 1;
    attr_init_qp_63079.cap = attr_init_qp_63079_cap;
    attr_init_qp_63079.qp_type = IBV_QPT_RC;

    qp_63079 = ibv_create_qp(pd_1795, &attr_init_qp_63079);
    if (!qp_63079)
    {
        fprintf(stderr, "Failed to create QP\n");
        ;
    }

    qps[qps_size++] = (PR_QP){
        .id = "qp_63079",
        .qpn = qp_63079->qp_num,
        .psn = 0,
        .port = 1,
        .lid = 0,
        .gid = "" // will set below
    };

    snprintf(qps[qps_size - 1].gid, sizeof(qps[qps_size - 1].gid),
             "%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x",
             gid.raw[0], gid.raw[1], gid.raw[2], gid.raw[3], gid.raw[4], gid.raw[5], gid.raw[6], gid.raw[7], gid.raw[8], gid.raw[9], gid.raw[10], gid.raw[11], gid.raw[12], gid.raw[13], gid.raw[14], gid.raw[15]);

    prs[prs_size++] = (PR_Pair){
        .id = "pair-qp_63079-srv12",
        .cli_id = "qp_63079",
        .srv_id = "srv12"};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
    printf("[270] done.\n");

    printf("[271] CreateQP(pd=pd_26424, qp=qp_35711, init_attr_obj=IbvQPInitAttr{send_cq=cq_47623, recv_cq=cq_6228, qp_type=IBV_QPT_RC, cap=IbvQPCap{max_send_wr=1, max_recv_wr=1, max_send_sge=1, max_recv_sge=1}}, remote_qp=srv31) start.\n");

    /* ibv_create_qp */

    memset(&attr_init_qp_35711, 0, sizeof(attr_init_qp_35711));
    attr_init_qp_35711.send_cq = cq_47623;
    attr_init_qp_35711.recv_cq = cq_6228;

    memset(&attr_init_qp_35711_cap, 0, sizeof(attr_init_qp_35711_cap));
    attr_init_qp_35711_cap.max_send_wr = 1;
    attr_init_qp_35711_cap.max_recv_wr = 1;
    attr_init_qp_35711_cap.max_send_sge = 1;
    attr_init_qp_35711_cap.max_recv_sge = 1;
    attr_init_qp_35711.cap = attr_init_qp_35711_cap;
    attr_init_qp_35711.qp_type = IBV_QPT_RC;

    qp_35711 = ibv_create_qp(pd_26424, &attr_init_qp_35711);
    if (!qp_35711)
    {
        fprintf(stderr, "Failed to create QP\n");
        ;
    }

    qps[qps_size++] = (PR_QP){
        .id = "qp_35711",
        .qpn = qp_35711->qp_num,
        .psn = 0,
        .port = 1,
        .lid = 0,
        .gid = "" // will set below
    };

    snprintf(qps[qps_size - 1].gid, sizeof(qps[qps_size - 1].gid),
             "%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x",
             gid.raw[0], gid.raw[1], gid.raw[2], gid.raw[3], gid.raw[4], gid.raw[5], gid.raw[6], gid.raw[7], gid.raw[8], gid.raw[9], gid.raw[10], gid.raw[11], gid.raw[12], gid.raw[13], gid.raw[14], gid.raw[15]);

    prs[prs_size++] = (PR_Pair){
        .id = "pair-qp_35711-srv31",
        .cli_id = "qp_35711",
        .srv_id = "srv31"};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
    printf("[271] done.\n");

    printf("[272] DestroyQP(qp=qp_35711) start.\n");

    /* ibv_destroy_qp */
    if (ibv_destroy_qp(qp_35711))
    {
        fprintf(stderr, "Failed to destroy QP\n");
        ;
    }
    printf("[272] done.\n");

    printf("[273] PostSRQRecv(srq=srq0, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq0, bad_wr_var=bad_recv_wr_srq0) start.\n");

    memset(&recv_wr_srq0, 0, sizeof(recv_wr_srq0));

    memset(&recv_wr_srq0_sge_0, 0, sizeof(recv_wr_srq0_sge_0));
    recv_wr_srq0.sg_list = &recv_wr_srq0_sge_0;
    recv_wr_srq0.num_sge = 1;
    recv_wr_srq0.next = NULL;

    if (ibv_post_srq_recv(srq0, &recv_wr_srq0, &bad_recv_wr_srq0) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[273] done.\n");

    printf("[274] CreateSRQ(pd=pd_1795, srq=srq_45126, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{max_wr=1, max_sge=1, srq_limit=0}}) start.\n");

    /* ibv_create_srq */

    memset(&srq_init_attr__45126, 0, sizeof(srq_init_attr__45126));

    memset(&srq_init_attr__45126_attr, 0, sizeof(srq_init_attr__45126_attr));
    srq_init_attr__45126_attr.max_wr = 1;
    srq_init_attr__45126_attr.max_sge = 1;
    srq_init_attr__45126_attr.srq_limit = 0;
    srq_init_attr__45126.attr = srq_init_attr__45126_attr;

    srq_45126 = ibv_create_srq(pd_1795, &srq_init_attr__45126);
    if (!srq_45126)
    {
        fprintf(stderr, "Failed to create SRQ\n");
        ;
    }
    printf("[274] done.\n");

    printf("[275] RegMR(pd=pd_20875, mr=mr_48797, addr=bufs[26], length=4096, access=IBV_ACCESS_LOCAL_WRITE) start.\n");

    /* ibv_reg_mr */
    mr_48797 = ibv_reg_mr(pd_20875, bufs[26], 4096, IBV_ACCESS_LOCAL_WRITE);
    if (!mr_48797)
    {
        fprintf(stderr, "Failed to register memory region\n");
        ;
    }

    mrs[mrs_size++] = (PR_MR){
        .id = "mr_48797",
        .addr = (uint64_t)(mr_48797->addr),
        .length = 1024,
        .lkey = mr_48797->lkey};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);

    printf("[275] done.\n");

    printf("[276] PollCQ(cq=cq_18411) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_18411, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[276] done.\n");

    printf("[277] CreateQP(pd=pd_64898, qp=qp_21954, init_attr_obj=IbvQPInitAttr{send_cq=cq_47623, recv_cq=cq_30626, qp_type=IBV_QPT_RC, cap=IbvQPCap{max_send_wr=1, max_recv_wr=1, max_send_sge=1, max_recv_sge=1}}, remote_qp=srv59) start.\n");

    /* ibv_create_qp */

    memset(&attr_init_qp_21954, 0, sizeof(attr_init_qp_21954));
    attr_init_qp_21954.send_cq = cq_47623;
    attr_init_qp_21954.recv_cq = cq_30626;

    memset(&attr_init_qp_21954_cap, 0, sizeof(attr_init_qp_21954_cap));
    attr_init_qp_21954_cap.max_send_wr = 1;
    attr_init_qp_21954_cap.max_recv_wr = 1;
    attr_init_qp_21954_cap.max_send_sge = 1;
    attr_init_qp_21954_cap.max_recv_sge = 1;
    attr_init_qp_21954.cap = attr_init_qp_21954_cap;
    attr_init_qp_21954.qp_type = IBV_QPT_RC;

    qp_21954 = ibv_create_qp(pd_64898, &attr_init_qp_21954);
    if (!qp_21954)
    {
        fprintf(stderr, "Failed to create QP\n");
        ;
    }

    qps[qps_size++] = (PR_QP){
        .id = "qp_21954",
        .qpn = qp_21954->qp_num,
        .psn = 0,
        .port = 1,
        .lid = 0,
        .gid = "" // will set below
    };

    snprintf(qps[qps_size - 1].gid, sizeof(qps[qps_size - 1].gid),
             "%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x",
             gid.raw[0], gid.raw[1], gid.raw[2], gid.raw[3], gid.raw[4], gid.raw[5], gid.raw[6], gid.raw[7], gid.raw[8], gid.raw[9], gid.raw[10], gid.raw[11], gid.raw[12], gid.raw[13], gid.raw[14], gid.raw[15]);

    prs[prs_size++] = (PR_Pair){
        .id = "pair-qp_21954-srv59",
        .cli_id = "qp_21954",
        .srv_id = "srv59"};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
    printf("[277] done.\n");

    printf("[278] ModifySRQ(srq=srq_49329, attr_var=srq_attr_srq_49329, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_49329, 0, sizeof(srq_attr_srq_49329));
    srq_attr_srq_49329.max_wr = 1;
    srq_attr_srq_49329.srq_limit = 0;

    if (ibv_modify_srq(srq_49329, &srq_attr_srq_49329, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[278] done.\n");

    printf("[279] CreateSRQ(pd=pd_32462, srq=srq_25231, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{max_wr=1, max_sge=1, srq_limit=0}}) start.\n");

    /* ibv_create_srq */

    memset(&srq_init_attr__25231, 0, sizeof(srq_init_attr__25231));

    memset(&srq_init_attr__25231_attr, 0, sizeof(srq_init_attr__25231_attr));
    srq_init_attr__25231_attr.max_wr = 1;
    srq_init_attr__25231_attr.max_sge = 1;
    srq_init_attr__25231_attr.srq_limit = 0;
    srq_init_attr__25231.attr = srq_init_attr__25231_attr;

    srq_25231 = ibv_create_srq(pd_32462, &srq_init_attr__25231);
    if (!srq_25231)
    {
        fprintf(stderr, "Failed to create SRQ\n");
        ;
    }
    printf("[279] done.\n");

    printf("[280] PostSRQRecv(srq=srq_18393, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq_18393, bad_wr_var=bad_recv_wr_srq_18393) start.\n");

    memset(&recv_wr_srq_18393, 0, sizeof(recv_wr_srq_18393));

    memset(&recv_wr_srq_18393_sge_0, 0, sizeof(recv_wr_srq_18393_sge_0));
    recv_wr_srq_18393.sg_list = &recv_wr_srq_18393_sge_0;
    recv_wr_srq_18393.num_sge = 1;
    recv_wr_srq_18393.next = NULL;

    if (ibv_post_srq_recv(srq_18393, &recv_wr_srq_18393, &bad_recv_wr_srq_18393) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[280] done.\n");

    printf("[281] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_30816) start.\n");

    /* ibv_create_cq */
    cq_30816 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_30816)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[281] done.\n");

    printf("[282] ModifySRQ(srq=srq_53103, attr_var=srq_attr_srq_53103, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq_53103, 0, sizeof(srq_attr_srq_53103));
    srq_attr_srq_53103.max_wr = 1;
    srq_attr_srq_53103.srq_limit = 0;

    if (ibv_modify_srq(srq_53103, &srq_attr_srq_53103, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[282] done.\n");

    printf("[283] ModifyQP(qp=qp_63079, attr_obj=IbvQPAttr{qp_state=IBV_QPS_INIT, dest_qp_num=rr_u32_by_id(\"remote.QP\", \"srv12\", \"qpn\")}, attr_mask=IBV_QP_STATE) start.\n");

    memset(&qp_attr_qp_63079, 0, sizeof(qp_attr_qp_63079));

    memset(&qp_attr_qp_63079, 0, sizeof(qp_attr_qp_63079));
    qp_attr_qp_63079.qp_state = IBV_QPS_INIT;
    qp_attr_qp_63079.dest_qp_num = rr_u32_by_id("remote.QP", "srv12", "qpn");

    ibv_modify_qp(qp_63079, &qp_attr_qp_63079, IBV_QP_STATE);
    printf("[283] done.\n");

    printf("[284] RegMR(pd=pd_64898, mr=mr_15727, addr=bufs[88], length=4096, access=IBV_ACCESS_LOCAL_WRITE) start.\n");

    /* ibv_reg_mr */
    mr_15727 = ibv_reg_mr(pd_64898, bufs[88], 4096, IBV_ACCESS_LOCAL_WRITE);
    if (!mr_15727)
    {
        fprintf(stderr, "Failed to register memory region\n");
        ;
    }

    mrs[mrs_size++] = (PR_MR){
        .id = "mr_15727",
        .addr = (uint64_t)(mr_15727->addr),
        .length = 1024,
        .lkey = mr_15727->lkey};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);

    printf("[284] done.\n");

    printf("[285] CreateSRQ(pd=pd_51130, srq=srq_23908, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{max_wr=1, max_sge=1, srq_limit=0}}) start.\n");

    /* ibv_create_srq */

    memset(&srq_init_attr__23908, 0, sizeof(srq_init_attr__23908));

    memset(&srq_init_attr__23908_attr, 0, sizeof(srq_init_attr__23908_attr));
    srq_init_attr__23908_attr.max_wr = 1;
    srq_init_attr__23908_attr.max_sge = 1;
    srq_init_attr__23908_attr.srq_limit = 0;
    srq_init_attr__23908.attr = srq_init_attr__23908_attr;

    srq_23908 = ibv_create_srq(pd_51130, &srq_init_attr__23908);
    if (!srq_23908)
    {
        fprintf(stderr, "Failed to create SRQ\n");
        ;
    }
    printf("[285] done.\n");

    printf("[286] AllocPD(pd=pd_45886) start.\n");

    /* ibv_alloc_pd */
    pd_45886 = ibv_alloc_pd(ctx);
    if (!pd_45886)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[286] done.\n");

    printf("[287] CreateSRQ(pd=pd_1795, srq=srq_36186, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{max_wr=1, max_sge=1, srq_limit=0}}) start.\n");

    /* ibv_create_srq */

    memset(&srq_init_attr__36186, 0, sizeof(srq_init_attr__36186));

    memset(&srq_init_attr__36186_attr, 0, sizeof(srq_init_attr__36186_attr));
    srq_init_attr__36186_attr.max_wr = 1;
    srq_init_attr__36186_attr.max_sge = 1;
    srq_init_attr__36186_attr.srq_limit = 0;
    srq_init_attr__36186.attr = srq_init_attr__36186_attr;

    srq_36186 = ibv_create_srq(pd_1795, &srq_init_attr__36186);
    if (!srq_36186)
    {
        fprintf(stderr, "Failed to create SRQ\n");
        ;
    }
    printf("[287] done.\n");

    printf("[288] PollCQ(cq=cq_6228) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_6228, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[288] done.\n");

    printf("[289] DestroyQP(qp=qp_63079) start.\n");

    /* ibv_destroy_qp */
    if (ibv_destroy_qp(qp_63079))
    {
        fprintf(stderr, "Failed to destroy QP\n");
        ;
    }
    printf("[289] done.\n");

    printf("[290] DeregMR(mr=mr_2793) start.\n");

    /* ibv_dereg_mr */
    if (ibv_dereg_mr(mr_2793))
    {
        fprintf(stderr, "Failed to deregister MR\n");
        ;
    }
    printf("[290] done.\n");

    printf("[291] CreateSRQ(pd=pd_21322, srq=srq_17737, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{max_wr=1, max_sge=1, srq_limit=0}}) start.\n");

    /* ibv_create_srq */

    memset(&srq_init_attr__17737, 0, sizeof(srq_init_attr__17737));

    memset(&srq_init_attr__17737_attr, 0, sizeof(srq_init_attr__17737_attr));
    srq_init_attr__17737_attr.max_wr = 1;
    srq_init_attr__17737_attr.max_sge = 1;
    srq_init_attr__17737_attr.srq_limit = 0;
    srq_init_attr__17737.attr = srq_init_attr__17737_attr;

    srq_17737 = ibv_create_srq(pd_21322, &srq_init_attr__17737);
    if (!srq_17737)
    {
        fprintf(stderr, "Failed to create SRQ\n");
        ;
    }
    printf("[291] done.\n");

    printf("[292] CreateQP(pd=pd_54343, qp=qp_22910, init_attr_obj=IbvQPInitAttr{send_cq=cq_46537, recv_cq=cq_36440, qp_type=IBV_QPT_RC, cap=IbvQPCap{max_send_wr=1, max_recv_wr=1, max_send_sge=1, max_recv_sge=1}}, remote_qp=srv68) start.\n");

    /* ibv_create_qp */

    memset(&attr_init_qp_22910, 0, sizeof(attr_init_qp_22910));
    attr_init_qp_22910.send_cq = cq_46537;
    attr_init_qp_22910.recv_cq = cq_36440;

    memset(&attr_init_qp_22910_cap, 0, sizeof(attr_init_qp_22910_cap));
    attr_init_qp_22910_cap.max_send_wr = 1;
    attr_init_qp_22910_cap.max_recv_wr = 1;
    attr_init_qp_22910_cap.max_send_sge = 1;
    attr_init_qp_22910_cap.max_recv_sge = 1;
    attr_init_qp_22910.cap = attr_init_qp_22910_cap;
    attr_init_qp_22910.qp_type = IBV_QPT_RC;

    qp_22910 = ibv_create_qp(pd_54343, &attr_init_qp_22910);
    if (!qp_22910)
    {
        fprintf(stderr, "Failed to create QP\n");
        ;
    }

    qps[qps_size++] = (PR_QP){
        .id = "qp_22910",
        .qpn = qp_22910->qp_num,
        .psn = 0,
        .port = 1,
        .lid = 0,
        .gid = "" // will set below
    };

    snprintf(qps[qps_size - 1].gid, sizeof(qps[qps_size - 1].gid),
             "%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x",
             gid.raw[0], gid.raw[1], gid.raw[2], gid.raw[3], gid.raw[4], gid.raw[5], gid.raw[6], gid.raw[7], gid.raw[8], gid.raw[9], gid.raw[10], gid.raw[11], gid.raw[12], gid.raw[13], gid.raw[14], gid.raw[15]);

    prs[prs_size++] = (PR_Pair){
        .id = "pair-qp_22910-srv68",
        .cli_id = "qp_22910",
        .srv_id = "srv68"};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
    printf("[292] done.\n");

    printf("[293] CreateQP(pd=pd_20875, qp=qp_24314, init_attr_obj=IbvQPInitAttr{send_cq=cq_18411, recv_cq=cq_6228, qp_type=IBV_QPT_RC, cap=IbvQPCap{max_send_wr=1, max_recv_wr=1, max_send_sge=1, max_recv_sge=1}}, remote_qp=srv21) start.\n");

    /* ibv_create_qp */

    memset(&attr_init_qp_24314, 0, sizeof(attr_init_qp_24314));
    attr_init_qp_24314.send_cq = cq_18411;
    attr_init_qp_24314.recv_cq = cq_6228;

    memset(&attr_init_qp_24314_cap, 0, sizeof(attr_init_qp_24314_cap));
    attr_init_qp_24314_cap.max_send_wr = 1;
    attr_init_qp_24314_cap.max_recv_wr = 1;
    attr_init_qp_24314_cap.max_send_sge = 1;
    attr_init_qp_24314_cap.max_recv_sge = 1;
    attr_init_qp_24314.cap = attr_init_qp_24314_cap;
    attr_init_qp_24314.qp_type = IBV_QPT_RC;

    qp_24314 = ibv_create_qp(pd_20875, &attr_init_qp_24314);
    if (!qp_24314)
    {
        fprintf(stderr, "Failed to create QP\n");
        ;
    }

    qps[qps_size++] = (PR_QP){
        .id = "qp_24314",
        .qpn = qp_24314->qp_num,
        .psn = 0,
        .port = 1,
        .lid = 0,
        .gid = "" // will set below
    };

    snprintf(qps[qps_size - 1].gid, sizeof(qps[qps_size - 1].gid),
             "%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x",
             gid.raw[0], gid.raw[1], gid.raw[2], gid.raw[3], gid.raw[4], gid.raw[5], gid.raw[6], gid.raw[7], gid.raw[8], gid.raw[9], gid.raw[10], gid.raw[11], gid.raw[12], gid.raw[13], gid.raw[14], gid.raw[15]);

    prs[prs_size++] = (PR_Pair){
        .id = "pair-qp_24314-srv21",
        .cli_id = "qp_24314",
        .srv_id = "srv21"};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
    printf("[293] done.\n");

    printf("[294] PostSRQRecv(srq=srq_34475, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq_17737, bad_wr_var=bad_recv_wr_srq_17737) start.\n");

    memset(&recv_wr_srq_17737, 0, sizeof(recv_wr_srq_17737));

    memset(&recv_wr_srq_17737_sge_0, 0, sizeof(recv_wr_srq_17737_sge_0));
    recv_wr_srq_17737.sg_list = &recv_wr_srq_17737_sge_0;
    recv_wr_srq_17737.num_sge = 1;
    recv_wr_srq_17737.next = NULL;

    if (ibv_post_srq_recv(srq_34475, &recv_wr_srq_17737, &bad_recv_wr_srq_17737) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[294] done.\n");

    printf("[295] CreateSRQ(pd=pd_26424, srq=srq_21981, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{max_wr=1, max_sge=1, srq_limit=0}}) start.\n");

    /* ibv_create_srq */

    memset(&srq_init_attr__21981, 0, sizeof(srq_init_attr__21981));

    memset(&srq_init_attr__21981_attr, 0, sizeof(srq_init_attr__21981_attr));
    srq_init_attr__21981_attr.max_wr = 1;
    srq_init_attr__21981_attr.max_sge = 1;
    srq_init_attr__21981_attr.srq_limit = 0;
    srq_init_attr__21981.attr = srq_init_attr__21981_attr;

    srq_21981 = ibv_create_srq(pd_26424, &srq_init_attr__21981);
    if (!srq_21981)
    {
        fprintf(stderr, "Failed to create SRQ\n");
        ;
    }
    printf("[295] done.\n");

    printf("[296] CreateQP(pd=pd_51130, qp=qp_34374, init_attr_obj=IbvQPInitAttr{send_cq=cq_33410, recv_cq=cq_34171, qp_type=IBV_QPT_RC, cap=IbvQPCap{max_send_wr=1, max_recv_wr=1, max_send_sge=1, max_recv_sge=1}}, remote_qp=srv85) start.\n");

    /* ibv_create_qp */

    memset(&attr_init_qp_34374, 0, sizeof(attr_init_qp_34374));
    attr_init_qp_34374.send_cq = cq_33410;
    attr_init_qp_34374.recv_cq = cq_34171;

    memset(&attr_init_qp_34374_cap, 0, sizeof(attr_init_qp_34374_cap));
    attr_init_qp_34374_cap.max_send_wr = 1;
    attr_init_qp_34374_cap.max_recv_wr = 1;
    attr_init_qp_34374_cap.max_send_sge = 1;
    attr_init_qp_34374_cap.max_recv_sge = 1;
    attr_init_qp_34374.cap = attr_init_qp_34374_cap;
    attr_init_qp_34374.qp_type = IBV_QPT_RC;

    qp_34374 = ibv_create_qp(pd_51130, &attr_init_qp_34374);
    if (!qp_34374)
    {
        fprintf(stderr, "Failed to create QP\n");
        ;
    }

    qps[qps_size++] = (PR_QP){
        .id = "qp_34374",
        .qpn = qp_34374->qp_num,
        .psn = 0,
        .port = 1,
        .lid = 0,
        .gid = "" // will set below
    };

    snprintf(qps[qps_size - 1].gid, sizeof(qps[qps_size - 1].gid),
             "%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x",
             gid.raw[0], gid.raw[1], gid.raw[2], gid.raw[3], gid.raw[4], gid.raw[5], gid.raw[6], gid.raw[7], gid.raw[8], gid.raw[9], gid.raw[10], gid.raw[11], gid.raw[12], gid.raw[13], gid.raw[14], gid.raw[15]);

    prs[prs_size++] = (PR_Pair){
        .id = "pair-qp_34374-srv85",
        .cli_id = "qp_34374",
        .srv_id = "srv85"};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
    printf("[296] done.\n");

    printf("[297] DeregMR(mr=mr_48797) start.\n");

    /* ibv_dereg_mr */
    if (ibv_dereg_mr(mr_48797))
    {
        fprintf(stderr, "Failed to deregister MR\n");
        ;
    }
    printf("[297] done.\n");

    printf("[298] DestroyQP(qp=qp_21954) start.\n");

    /* ibv_destroy_qp */
    if (ibv_destroy_qp(qp_21954))
    {
        fprintf(stderr, "Failed to destroy QP\n");
        ;
    }
    printf("[298] done.\n");

    printf("[299] CreateQP(pd=pd_32462, qp=qp_28385, init_attr_obj=IbvQPInitAttr{send_cq=cq_33410, recv_cq=cq_18411, qp_type=IBV_QPT_RC, cap=IbvQPCap{max_send_wr=1, max_recv_wr=1, max_send_sge=1, max_recv_sge=1}}, remote_qp=srv19) start.\n");

    /* ibv_create_qp */

    memset(&attr_init_qp_28385, 0, sizeof(attr_init_qp_28385));
    attr_init_qp_28385.send_cq = cq_33410;
    attr_init_qp_28385.recv_cq = cq_18411;

    memset(&attr_init_qp_28385_cap, 0, sizeof(attr_init_qp_28385_cap));
    attr_init_qp_28385_cap.max_send_wr = 1;
    attr_init_qp_28385_cap.max_recv_wr = 1;
    attr_init_qp_28385_cap.max_send_sge = 1;
    attr_init_qp_28385_cap.max_recv_sge = 1;
    attr_init_qp_28385.cap = attr_init_qp_28385_cap;
    attr_init_qp_28385.qp_type = IBV_QPT_RC;

    qp_28385 = ibv_create_qp(pd_32462, &attr_init_qp_28385);
    if (!qp_28385)
    {
        fprintf(stderr, "Failed to create QP\n");
        ;
    }

    qps[qps_size++] = (PR_QP){
        .id = "qp_28385",
        .qpn = qp_28385->qp_num,
        .psn = 0,
        .port = 1,
        .lid = 0,
        .gid = "" // will set below
    };

    snprintf(qps[qps_size - 1].gid, sizeof(qps[qps_size - 1].gid),
             "%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x",
             gid.raw[0], gid.raw[1], gid.raw[2], gid.raw[3], gid.raw[4], gid.raw[5], gid.raw[6], gid.raw[7], gid.raw[8], gid.raw[9], gid.raw[10], gid.raw[11], gid.raw[12], gid.raw[13], gid.raw[14], gid.raw[15]);

    prs[prs_size++] = (PR_Pair){
        .id = "pair-qp_28385-srv19",
        .cli_id = "qp_28385",
        .srv_id = "srv19"};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
    printf("[299] done.\n");

    printf("[300] PostSRQRecv(srq=srq_53103, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq_53103, bad_wr_var=bad_recv_wr_srq_53103) start.\n");

    memset(&recv_wr_srq_53103, 0, sizeof(recv_wr_srq_53103));

    memset(&recv_wr_srq_53103_sge_0, 0, sizeof(recv_wr_srq_53103_sge_0));
    recv_wr_srq_53103.sg_list = &recv_wr_srq_53103_sge_0;
    recv_wr_srq_53103.num_sge = 1;
    recv_wr_srq_53103.next = NULL;

    if (ibv_post_srq_recv(srq_53103, &recv_wr_srq_53103, &bad_recv_wr_srq_53103) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[300] done.\n");

    printf("[301] AllocPD(pd=pd_65297) start.\n");

    /* ibv_alloc_pd */
    pd_65297 = ibv_alloc_pd(ctx);
    if (!pd_65297)
    {
        fprintf(stderr, "Failed to allocate protection domain\n");
        ;
    }
    printf("[301] done.\n");

    printf("[302] RegMR(pd=pd_54343, mr=mr_63467, addr=bufs[67], length=4096, access=IBV_ACCESS_LOCAL_WRITE) start.\n");

    /* ibv_reg_mr */
    mr_63467 = ibv_reg_mr(pd_54343, bufs[67], 4096, IBV_ACCESS_LOCAL_WRITE);
    if (!mr_63467)
    {
        fprintf(stderr, "Failed to register memory region\n");
        ;
    }

    mrs[mrs_size++] = (PR_MR){
        .id = "mr_63467",
        .addr = (uint64_t)(mr_63467->addr),
        .length = 1024,
        .lkey = mr_63467->lkey};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);

    printf("[302] done.\n");

    printf("[303] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq_40763) start.\n");

    /* ibv_create_cq */
    cq_40763 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             0);
    if (!cq_40763)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[303] done.\n");

    printf("[304] PostSRQRecv(srq=srq_49998, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}]}, wr_var=recv_wr_srq_49998, bad_wr_var=bad_recv_wr_srq_49998) start.\n");

    memset(&recv_wr_srq_49998, 0, sizeof(recv_wr_srq_49998));

    memset(&recv_wr_srq_49998_sge_0, 0, sizeof(recv_wr_srq_49998_sge_0));
    recv_wr_srq_49998.sg_list = &recv_wr_srq_49998_sge_0;
    recv_wr_srq_49998.num_sge = 1;
    recv_wr_srq_49998.next = NULL;

    if (ibv_post_srq_recv(srq_49998, &recv_wr_srq_49998, &bad_recv_wr_srq_49998) != 0)
    {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        ;
    }
    printf("[304] done.\n");

    printf("[305] ModifyCQ(cq=cq_52634, attr_obj=IbvModifyCQAttr{attr_mask=0, moderate=IbvModerateCQ{cq_count=1, cq_period=1}}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));
    modify_cq_attr.attr_mask = 0;

    memset(&modify_cq_attr_moderate, 0, sizeof(modify_cq_attr_moderate));
    modify_cq_attr_moderate.cq_count = 1;
    modify_cq_attr_moderate.cq_period = 1;
    modify_cq_attr.moderate = modify_cq_attr_moderate;

    if (ibv_modify_cq(cq_52634, &modify_cq_attr) != 0)
    {
        fprintf(stderr, "ibv_modify_cq failed\n");
        ;
    }
    printf("[305] done.\n");

    printf("[306] DeallocPD(pd=pd_45886) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_45886))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[306] done.\n");

    printf("[307] DeregMR(mr=mr_15727) start.\n");

    /* ibv_dereg_mr */
    if (ibv_dereg_mr(mr_15727))
    {
        fprintf(stderr, "Failed to deregister MR\n");
        ;
    }
    printf("[307] done.\n");

    printf("[308] DestroyQP(qp=qp_24314) start.\n");

    /* ibv_destroy_qp */
    if (ibv_destroy_qp(qp_24314))
    {
        fprintf(stderr, "Failed to destroy QP\n");
        ;
    }
    printf("[308] done.\n");

    printf("[309] DeallocPD(pd=pd_20875) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_20875))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[309] done.\n");

    printf("[310] ModifyQP(qp=qp_28385, attr_obj=IbvQPAttr{qp_state=IBV_QPS_INIT, dest_qp_num=rr_u32_by_id(\"remote.QP\", \"srv19\", \"qpn\")}, attr_mask=IBV_QP_STATE) start.\n");

    memset(&qp_attr_qp_28385, 0, sizeof(qp_attr_qp_28385));

    memset(&qp_attr_qp_28385, 0, sizeof(qp_attr_qp_28385));
    qp_attr_qp_28385.qp_state = IBV_QPS_INIT;
    qp_attr_qp_28385.dest_qp_num = rr_u32_by_id("remote.QP", "srv19", "qpn");

    ibv_modify_qp(qp_28385, &qp_attr_qp_28385, IBV_QP_STATE);
    printf("[310] done.\n");

    printf("[311] ModifyQP(qp=qp_28385, attr_obj=IbvQPAttr{qp_state=IBV_QPS_RTR, dest_qp_num=rr_u32_by_id(\"remote.QP\", \"srv19\", \"qpn\")}, attr_mask=32896) start.\n");

    pr_wait_pair_state(BUNDLE_ENV, "pair-qp_28385-srv19", "BOTH_RTS", /*timeout_ms=*/15000);
    memset(&qp_attr_qp_28385, 0, sizeof(qp_attr_qp_28385));

    memset(&qp_attr_qp_28385, 0, sizeof(qp_attr_qp_28385));
    qp_attr_qp_28385.qp_state = IBV_QPS_RTR;
    qp_attr_qp_28385.dest_qp_num = rr_u32_by_id("remote.QP", "srv19", "qpn");

    ibv_modify_qp(qp_28385, &qp_attr_qp_28385, 32896);
    printf("[311] done.\n");

    printf("[312] ModifySRQ(srq=srq0, attr_var=srq_attr_srq0, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) start.\n");

    memset(&srq_attr_srq0, 0, sizeof(srq_attr_srq0));
    srq_attr_srq0.max_wr = 1;
    srq_attr_srq0.srq_limit = 0;

    if (ibv_modify_srq(srq0, &srq_attr_srq0, IBV_SRQ_MAX_WR | IBV_SRQ_LIMIT) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[312] done.\n");

    printf("[313] DeregMR(mr=mr_8841) start.\n");

    /* ibv_dereg_mr */
    if (ibv_dereg_mr(mr_8841))
    {
        fprintf(stderr, "Failed to deregister MR\n");
        ;
    }
    printf("[313] done.\n");

    printf("[314] DestroyCQ(cq=cq_34171) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq_34171))
    {
        fprintf(stderr, "Failed to destroy CQ\n");
        ;
    }
    printf("[314] done.\n");

    printf("[315] CreateSRQ(pd=pd_64898, srq=srq_38693, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{max_wr=1, max_sge=1, srq_limit=0}}) start.\n");

    /* ibv_create_srq */

    memset(&srq_init_attr__38693, 0, sizeof(srq_init_attr__38693));

    memset(&srq_init_attr__38693_attr, 0, sizeof(srq_init_attr__38693_attr));
    srq_init_attr__38693_attr.max_wr = 1;
    srq_init_attr__38693_attr.max_sge = 1;
    srq_init_attr__38693_attr.srq_limit = 0;
    srq_init_attr__38693.attr = srq_init_attr__38693_attr;

    srq_38693 = ibv_create_srq(pd_64898, &srq_init_attr__38693);
    if (!srq_38693)
    {
        fprintf(stderr, "Failed to create SRQ\n");
        ;
    }
    printf("[315] done.\n");

    printf("[316] PollCQ(cq=cq_18411) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_18411, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[316] done.\n");

    printf("[317] DestroyQP(qp=qp_34374) start.\n");

    /* ibv_destroy_qp */
    if (ibv_destroy_qp(qp_34374))
    {
        fprintf(stderr, "Failed to destroy QP\n");
        ;
    }
    printf("[317] done.\n");

    printf("[318] CreateQP(pd=pd_64898, qp=qp_7527, init_attr_obj=IbvQPInitAttr{send_cq=cq_54626, recv_cq=cq_46537, qp_type=IBV_QPT_RC, cap=IbvQPCap{max_send_wr=1, max_recv_wr=1, max_send_sge=1, max_recv_sge=1}}, remote_qp=srv13) start.\n");

    /* ibv_create_qp */

    memset(&attr_init_qp_7527, 0, sizeof(attr_init_qp_7527));
    attr_init_qp_7527.send_cq = cq_54626;
    attr_init_qp_7527.recv_cq = cq_46537;

    memset(&attr_init_qp_7527_cap, 0, sizeof(attr_init_qp_7527_cap));
    attr_init_qp_7527_cap.max_send_wr = 1;
    attr_init_qp_7527_cap.max_recv_wr = 1;
    attr_init_qp_7527_cap.max_send_sge = 1;
    attr_init_qp_7527_cap.max_recv_sge = 1;
    attr_init_qp_7527.cap = attr_init_qp_7527_cap;
    attr_init_qp_7527.qp_type = IBV_QPT_RC;

    qp_7527 = ibv_create_qp(pd_64898, &attr_init_qp_7527);
    if (!qp_7527)
    {
        fprintf(stderr, "Failed to create QP\n");
        ;
    }

    qps[qps_size++] = (PR_QP){
        .id = "qp_7527",
        .qpn = qp_7527->qp_num,
        .psn = 0,
        .port = 1,
        .lid = 0,
        .gid = "" // will set below
    };

    snprintf(qps[qps_size - 1].gid, sizeof(qps[qps_size - 1].gid),
             "%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x",
             gid.raw[0], gid.raw[1], gid.raw[2], gid.raw[3], gid.raw[4], gid.raw[5], gid.raw[6], gid.raw[7], gid.raw[8], gid.raw[9], gid.raw[10], gid.raw[11], gid.raw[12], gid.raw[13], gid.raw[14], gid.raw[15]);

    prs[prs_size++] = (PR_Pair){
        .id = "pair-qp_7527-srv13",
        .cli_id = "qp_7527",
        .srv_id = "srv13"};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
    printf("[318] done.\n");

    printf("[319] ModifySRQ(srq=srq0, attr_var=srq_attr_srq0, attr_obj=IbvSrqAttr{max_wr=1, srq_limit=0}, attr_mask=2) start.\n");

    memset(&srq_attr_srq0, 0, sizeof(srq_attr_srq0));
    srq_attr_srq0.max_wr = 1;
    srq_attr_srq0.srq_limit = 0;

    if (ibv_modify_srq(srq0, &srq_attr_srq0, 2) != 0)
    {
        fprintf(stderr, "ibv_modify_srq failed\n");
        ;
    }
    printf("[319] done.\n");

    printf("[320] DeregMR(mr=mr0) start.\n");

    /* ibv_dereg_mr */
    if (ibv_dereg_mr(mr0))
    {
        fprintf(stderr, "Failed to deregister MR\n");
        ;
    }
    printf("[320] done.\n");

    printf("[321] CreateCQ(cqe=16, cq_context=NULL, channel=NULL, comp_vector=1, cq=cq_59233) start.\n");

    /* ibv_create_cq */
    cq_59233 = ibv_create_cq(ctx, 16,
                             NULL, NULL,
                             1);
    if (!cq_59233)
    {
        fprintf(stderr, "Failed to create completion queue\n");
        ;
    }
    printf("[321] done.\n");

    printf("[322] RegMR(pd=pd_21322, mr=mr_20970, addr=bufs[63], length=4096, access=IBV_ACCESS_LOCAL_WRITE) start.\n");

    /* ibv_reg_mr */
    mr_20970 = ibv_reg_mr(pd_21322, bufs[63], 4096, IBV_ACCESS_LOCAL_WRITE);
    if (!mr_20970)
    {
        fprintf(stderr, "Failed to register memory region\n");
        ;
    }

    mrs[mrs_size++] = (PR_MR){
        .id = "mr_20970",
        .addr = (uint64_t)(mr_20970->addr),
        .length = 1024,
        .lkey = mr_20970->lkey};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);

    printf("[322] done.\n");

    printf("[323] DeallocPD(pd=pd_26424) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd_26424))
    {
        fprintf(stderr, "Failed to deallocate PD \n");
        ;
    }
    printf("[323] done.\n");

    printf("[324] DeregMR(mr=mr_19049) start.\n");

    /* ibv_dereg_mr */
    if (ibv_dereg_mr(mr_19049))
    {
        fprintf(stderr, "Failed to deregister MR\n");
        ;
    }
    printf("[324] done.\n");

    printf("[325] CreateQP(pd=pd_64898, qp=qp_27913, init_attr_obj=IbvQPInitAttr{send_cq=cq_36440, recv_cq=cq_36440, qp_type=IBV_QPT_RC, cap=IbvQPCap{max_send_wr=1, max_recv_wr=1, max_send_sge=1, max_recv_sge=1}}, remote_qp=srv88) start.\n");

    /* ibv_create_qp */

    memset(&attr_init_qp_27913, 0, sizeof(attr_init_qp_27913));
    attr_init_qp_27913.send_cq = cq_36440;
    attr_init_qp_27913.recv_cq = cq_36440;

    memset(&attr_init_qp_27913_cap, 0, sizeof(attr_init_qp_27913_cap));
    attr_init_qp_27913_cap.max_send_wr = 1;
    attr_init_qp_27913_cap.max_recv_wr = 1;
    attr_init_qp_27913_cap.max_send_sge = 1;
    attr_init_qp_27913_cap.max_recv_sge = 1;
    attr_init_qp_27913.cap = attr_init_qp_27913_cap;
    attr_init_qp_27913.qp_type = IBV_QPT_RC;

    qp_27913 = ibv_create_qp(pd_64898, &attr_init_qp_27913);
    if (!qp_27913)
    {
        fprintf(stderr, "Failed to create QP\n");
        ;
    }

    qps[qps_size++] = (PR_QP){
        .id = "qp_27913",
        .qpn = qp_27913->qp_num,
        .psn = 0,
        .port = 1,
        .lid = 0,
        .gid = "" // will set below
    };

    snprintf(qps[qps_size - 1].gid, sizeof(qps[qps_size - 1].gid),
             "%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x",
             gid.raw[0], gid.raw[1], gid.raw[2], gid.raw[3], gid.raw[4], gid.raw[5], gid.raw[6], gid.raw[7], gid.raw[8], gid.raw[9], gid.raw[10], gid.raw[11], gid.raw[12], gid.raw[13], gid.raw[14], gid.raw[15]);

    prs[prs_size++] = (PR_Pair){
        .id = "pair-qp_27913-srv88",
        .cli_id = "qp_27913",
        .srv_id = "srv88"};

    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
    printf("[325] done.\n");

    printf("[326] CreateSRQ(pd=pd_21322, srq=srq_508, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{max_wr=1, max_sge=1, srq_limit=0}}) start.\n");

    /* ibv_create_srq */

    memset(&srq_init_attr__508, 0, sizeof(srq_init_attr__508));

    memset(&srq_init_attr__508_attr, 0, sizeof(srq_init_attr__508_attr));
    srq_init_attr__508_attr.max_wr = 1;
    srq_init_attr__508_attr.max_sge = 1;
    srq_init_attr__508_attr.srq_limit = 0;
    srq_init_attr__508.attr = srq_init_attr__508_attr;

    srq_508 = ibv_create_srq(pd_21322, &srq_init_attr__508);
    if (!srq_508)
    {
        fprintf(stderr, "Failed to create SRQ\n");
        ;
    }
    printf("[326] done.\n");

    printf("[327] PollCQ(cq=cq_53207) start.\n");

    /* ibv_poll_cq â€” self-contained minimal polling */
    {
        struct ibv_wc wc;
        int n = 0;
        int attempts = 100; /* ~100 * 100us â‰ˆ 10ms */
        while (attempts-- > 0)
        {
            n = ibv_poll_cq(cq_53207, 1, &wc);
            if (n < 0)
            {
                fprintf(stderr, "ibv_poll_cq failed\n");
                ;
            }
            if (n == 1)
            {
                if (wc.status != IBV_WC_SUCCESS)
                {
                    fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                            wc.status, wc.vendor_err);
                    ;
                }
                /* success â€“ got one completion */
                break;
            }
            /* n == 0: no CQE yet, back off briefly */
            usleep(100); /* 100us */
        }
        if (n == 0)
        {
            fprintf(stderr, "no completion within budget\n");
            ;
        }
    }
    printf("[327] done.\n");

    // --- Optional CQ polling / cleanup (generated or static) ---
    /* optional CQ polling & cleanup */

    return 0;
}