import copy
import json
import os
from typing import Dict, List

from jinja2 import Environment, FileSystemLoader

from lib.codegen_context import CodeGenContext
from lib.ibv_all import IbvAHAttr, IbvGID, IbvGlobalRoute, IbvQPAttr, IbvQPCap, IbvQPInitAttr, IbvSendWR, IbvSge
from lib.verbs import (
    AllocPD,
    CreateCQ,
    CreateQP,
    FreeDeviceList,
    GetDeviceList,
    ModifyQP,
    OpenDevice,
    PollCQ,
    PostSend,
    QueryDeviceAttr,
    QueryGID,
    QueryPortAttr,
    RegMR,
    VerbCall,
)

if __name__ == "__main__":
    ctx = CodeGenContext()
    verbs: list[VerbCall] = [
        GetDeviceList("dev_list"),
        OpenDevice("dev_list"),
        FreeDeviceList(),
        QueryDeviceAttr(),
        QueryPortAttr(),
        QueryGID(),
        AllocPD(pd="pd0"),
        CreateCQ(cq="cq0"),
        RegMR(
            pd="pd0",
            addr="bufs[0]",
            length=1024,
            mr="mr0",
            access="IBV_ACCESS_LOCAL_WRITE | IBV_ACCESS_REMOTE_READ | IBV_ACCESS_REMOTE_WRITE",
        ),
        CreateQP(
            qp="qp0",
            pd="pd0",
            init_attr_obj=IbvQPInitAttr(
                send_cq="cq0",
                recv_cq="cq0",
                cap=IbvQPCap(max_send_wr=1, max_recv_wr=1, max_send_sge=1, max_recv_sge=1),
                qp_type="IBV_QPT_RC",
                sq_sig_all=1,
            ),
        ),
        ModifyQP(
            qp="qp0",
            attr_mask="IBV_QP_STATE | IBV_QP_PKEY_INDEX | IBV_QP_PORT | IBV_QP_ACCESS_FLAGS",
            attr_obj=IbvQPAttr(
                qp_state="IBV_QPS_INIT",
                pkey_index=0,
                port_num=1,
                qp_access_flags="IBV_ACCESS_REMOTE_READ | IBV_ACCESS_REMOTE_WRITE | IBV_ACCESS_LOCAL_WRITE",
            ),
        ),
        ModifyQP(
            qp="qp0",
            attr_mask="IBV_QP_STATE | IBV_QP_AV | IBV_QP_PATH_MTU | IBV_QP_DEST_QPN | IBV_QP_RQ_PSN | IBV_QP_MAX_DEST_RD_ATOMIC | IBV_QP_MIN_RNR_TIMER",
            attr_obj=IbvQPAttr(
                qp_state="IBV_QPS_RTR",
                path_mtu="IBV_MTU_1024",
                dest_qp_num="",  # DeferredValue
                rq_psn=0,
                max_dest_rd_atomic=1,
                min_rnr_timer=12,
                ah_attr=IbvAHAttr(
                    is_global=1,
                    dlid="",  # DeferredValue
                    sl=0,
                    src_path_bits=0,
                    port_num=1,
                    grh=IbvGlobalRoute(
                        sgid_index=1,
                        hop_limit=1,
                        traffic_class=0,
                        flow_label=0,
                        dgid="",  # DeferredValue
                    ),
                ),
            ),
        ),
        ModifyQP(
            qp="qp0",
            attr_mask="IBV_QP_STATE | IBV_QP_TIMEOUT | IBV_QP_RETRY_CNT | IBV_QP_RNR_RETRY | IBV_QP_SQ_PSN | IBV_QP_MAX_QP_RD_ATOMIC",
            attr_obj=IbvQPAttr(qp_state="IBV_QPS_RTS", timeout=14, retry_cnt=7, rnr_retry=7, sq_psn=0, max_rd_atomic=1),
        ),
        # 这里可以添加更多的操作，比如发送数据等
        PostSend(
            qp="qp0",
            wr_obj=IbvSendWR(
                wr_id=1,
                num_sge=1,
                opcode="IBV_WR_SEND",
                send_flags="IBV_SEND_SIGNALED",
                sg_list=[IbvSge(addr="mr0", length="MSG_SIZE", lkey="mr0")],
            ),
        ),
        # PollCQ(cq="cq0"),
    ]
    for v in verbs:
        v.apply(ctx)
    print(verbs)
    body = "".join(v.generate_c(ctx) for v in verbs)
    template_dir = "./templates"
    template_name = "client.cpp.j2"
    env = Environment(loader=FileSystemLoader(template_dir), trim_blocks=True, lstrip_blocks=True)
    tpl = env.get_template(template_name)
    rendered = tpl.render(
        compile_units="pair_runtime.cpp runtime_resolver.c -lcjson",
        output_name="rdma_client_autogen",
        ib_port=1,
        msg_size=1024,
        bundle_env="RDMA_FUZZ_RUNTIME",
        client_update="client_update.json",
        length=1000,
        setup_region="/* setup generated by verbs (alloc/reg/create) moved here if你把这些也用 generate_c 产出 */",
        early_verbs_region="".join([]),
        verbs_region="".join(body),
        epilog_region="/* optional CQ polling & cleanup */",
        prolog_extra=ctx.generate_variable_definitions_all(),  # 如果你想注入额外 helper，这里填
    )
    print()

    # ctx.alloc_variables_objtracker()
    # variable_definitions = ctx.generate_variable_definitions_all()
    # rendered = template.render(
    #     body=body,
    #     ctx="ctx",
    #     dev_list=ctx.dev_list,
    #     dev_attr=ctx.dev_attr,
    #     port_attr=ctx.port_attr,
    #     max_QPs=ctx.max_QPs,
    #     variable_definitions=variable_definitions,
    # )
    # print(rendered)
    with open("client.cpp", "w") as f:
        f.write(rendered)
