#!/usr/bin/env python3
"""
Auto-generate a static aggregator: lib/ibv_all.py

- Scans target directory (default: ./lib)
- Finds files named Ibv*.py
- Parses top-level classes starting with "Ibv"
- Emits a static aggregator with explicit imports and __all__

Usage:
  python gen_ibv_all.py               # assumes ./lib
  python gen_ibv_all.py --lib ./lib   # specify lib dir
  python gen_ibv_all.py --pkg lib     # package name (default: lib)
"""

import argparse
import ast
from pathlib import Path
from typing import Dict, List


def find_ibv_classes(pyfile: Path) -> List[str]:
    try:
        src = pyfile.read_text(encoding="utf-8")
    except UnicodeDecodeError:
        src = pyfile.read_text(encoding="latin-1")
    tree = ast.parse(src, filename=str(pyfile))
    classes = []
    for node in tree.body:
        if isinstance(node, ast.ClassDef):
            # Only top-level classes that start with Ibv
            if node.name.startswith("Ibv"):
                classes.append(node.name)
    return classes


def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--lib", default="./lib", help="Directory where Ibv*.py live")
    ap.add_argument("--pkg", default="lib", help="Package name used for relative imports")
    ap.add_argument("--outfile", default=None, help="Output file (default: <lib>/ibv_all.py)")
    args = ap.parse_args()

    lib_dir = Path(args.lib).resolve()
    if not lib_dir.exists():
        raise SystemExit(f"Lib directory not found: {lib_dir}")

    modules: Dict[str, List[str]] = {}
    for py in sorted(lib_dir.glob("Ibv*.py")):
        if py.name == "ibv_all.py":
            continue
        classes = find_ibv_classes(py)
        if classes:
            modname = py.stem  # e.g., IbvQPAttr
            modules[modname] = sorted(classes)

    lines = []
    lines.append("# Auto-generated by gen_ibv_all.py; do not edit manually.")
    lines.append("# Aggregates Ibv* classes for easy import.")
    lines.append("")
    # Import lines
    for mod, classes in modules.items():
        cls_list = ", ".join(classes)
        lines.append(f"from .{mod} import {cls_list}")
    lines.append("")
    # __all__
    all_items = [cls for classes in modules.values() for cls in classes]
    all_str = ", ".join(f'"{n}"' for n in all_items)
    lines.append(f"__all__ = [{all_str}]")
    lines.append("")

    out_path = Path(args.outfile) if args.outfile else (lib_dir / "ibv_all.py")
    out_path.write_text("\n".join(lines), encoding="utf-8")
    print(f"[ok] Wrote {out_path} with {len(all_items)} classes from {len(modules)} modules.")


if __name__ == "__main__":
    main()
