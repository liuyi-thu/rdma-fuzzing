```python
class CreateWQ(VerbCall):
    def __init__(self, wq_addr: str, pd_addr: str, cq_addr: str, wq_type: str = "IBV_WQT_RQ", max_wr: int = 1, max_sge: int = 1, comp_mask: int = 0, create_flags: int = 0):
        self.wq_addr = wq_addr
        self.pd_addr = pd_addr
        self.cq_addr = cq_addr
        self.wq_type = wq_type
        self.max_wr = max_wr
        self.max_sge = max_sge
        self.comp_mask = comp_mask
        self.create_flags = create_flags

    @classmethod
    def from_trace(cls, info: str, ctx: CodeGenContext):
        kv = _parse_kv(info)
        wq = kv.get("wq", "unknown")
        pd = kv.get("pd", "unknown")
        cq = kv.get("cq", "unknown")
        return cls(
            wq_addr=wq,
            pd_addr=pd,
            cq_addr=cq,
            wq_type=kv.get("wq_type", "IBV_WQT_RQ"),
            max_wr=int(kv.get("max_wr", 1)),
            max_sge=int(kv.get("max_sge", 1)),
            comp_mask=int(kv.get("comp_mask", 0)),
            create_flags=int(kv.get("create_flags", 0))
        )

    def generate_c(self, ctx: CodeGenContext) -> str:
        wq_name = ctx.alloc_wq(self.wq_addr)
        pd_name = ctx.get_pd(self.pd_addr)
        cq_name = ctx.get_cq(self.cq_addr)
        attr_name = f"wq_init_attr_{wq_name.replace('wq[', '').replace(']', '')}"
        return f"""
    /* ibv_create_wq */
    struct ibv_wq_init_attr {attr_name} = {{0}};
    {attr_name}.wq_context = NULL;
    {attr_name}.wq_type = {self.wq_type};
    {attr_name}.max_wr = {self.max_wr};
    {attr_name}.max_sge = {self.max_sge};
    {attr_name}.pd = {pd_name};
    {attr_name}.cq = {cq_name};
    {attr_name}.comp_mask = {self.comp_mask};
    {attr_name}.create_flags = {self.create_flags};
    {wq_name} = ibv_create_wq({ctx.ib_ctx}, &{attr_name});
    if (!{wq_name}) {{
        fprintf(stderr, "Failed to create Work Queue\\n");
        return -1;
    }}
"""
# Mapping verb -> constructor
VERB_FACTORY.update({
    "ibv_create_wq": CreateWQ.from_trace
})
```