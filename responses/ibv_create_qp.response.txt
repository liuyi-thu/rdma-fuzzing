```python
class CreateQP(VerbCall):
    """Create a Queue Pair (QP) using the given attributes."""
    def __init__(self, pd_addr="pd[0]", qp_addr="unknown", cq_addr="cq[0]", qp_type="IBV_QPT_RC", cap_params=None, ctx=None):
        self.pd_addr = pd_addr
        self.qp_addr = qp_addr
        self.cq_addr = cq_addr  # Completion queue address, used for code generation
        self.qp_type = qp_type
        self.cap_params = cap_params or {}
        ctx.alloc_qp(self.qp_addr)

    @classmethod
    def from_trace(cls, info: str, ctx: CodeGenContext):
        kv = _parse_kv(info)
        cap_keys = {"max_send_wr", "max_recv_wr", "max_send_sge", "max_recv_sge", "max_inline_data"}
        cap_params = {k: kv[k] for k in cap_keys if k in kv}
        pd = kv.get("pd", "pd[0]")
        qp = kv.get("qp", "unknown")
        cq = kv.get("cq", "cq[0]")  # Default CQ address
        
        return cls(pd_addr=pd, qp_addr=qp, cq_addr=cq, qp_type="IBV_QPT_RC", cap_params=cap_params, ctx=ctx)

    def generate_c(self, ctx: CodeGenContext) -> str:
        qp_name = ctx.get_qp(self.qp_addr)
        pd_name = ctx.get_pd(self.pd_addr)
        cq_name = ctx.get_cq(self.cq_addr)
        cap = self.cap_params
        cap_lines = "\n    ".join(
            f"{qp_name}_init_attr.cap.{k} = {v};" for k, v in cap.items()
        )
        return f"""
    /* ibv_create_qp */
    struct ibv_qp_init_attr {qp_name}_init_attr = {{0}};
    {qp_name}_init_attr.qp_context = NULL;
    {qp_name}_init_attr.send_cq = {cq_name};
    {qp_name}_init_attr.recv_cq = {cq_name};
    {qp_name}_init_attr.srq = NULL;
    {qp_name}_init_attr.qp_type = {self.qp_type};
    {cap_lines}
    {qp_name} = ibv_create_qp({pd_name}, &{qp_name}_init_attr);
    if (!{qp_name}) {{
        fprintf(stderr, "Failed to create QP\\n");
        return -1;
    }}
"""
```