```python
class MemcpyToDM(VerbCall):
    def __init__(self, dm_addr: str, dm_offset: int, host_addr: str, length: int):
        self.dm_addr = dm_addr  # Device memory address
        self.dm_offset = dm_offset  # Offset in the device memory
        self.host_addr = host_addr  # Host memory address
        self.length = length  # Length of data to copy

    @classmethod
    def from_trace(cls, info: str, ctx: CodeGenContext):
        kv = _parse_kv(info)
        dm = kv.get("dm", "unknown")
        ctx.use_dm(dm)  # Ensure the DM is used before generating code
        return cls(
            dm_addr=dm,
            dm_offset=int(kv.get("dm_offset", 0)),
            host_addr=kv.get("host_addr", "host_buf"),
            length=int(kv.get("length", 0))
        )

    def generate_c(self, ctx: CodeGenContext) -> str:
        dm_name = ctx.get_dm(self.dm_addr)
        return f"""
    /* ibv_memcpy_to_dm */
    if (ibv_memcpy_to_dm({dm_name}, {self.dm_offset}, {self.host_addr}, {self.length}) != 0) {{
        fprintf(stderr, "Failed to copy to device memory\\n");
        return -1;
    }}
"""

VERB_FACTORY["ibv_memcpy_to_dm"] = MemcpyToDM.from_trace
```