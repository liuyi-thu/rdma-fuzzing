```python
class AllocMW(VerbCall):
    def __init__(self, pd_addr, mw_addr, mw_type='IBV_MW_TYPE_1', ctx: CodeGenContext = None):
        self.pd_addr = pd_addr
        self.mw_addr = mw_addr
        self.mw_type = mw_type
        ctx.alloc_mw(mw_addr)  # Register the MW address in the context

    @classmethod
    def from_trace(cls, info: str, ctx: CodeGenContext):
        kv = _parse_kv(info)
        pd = kv.get('pd', 'unknown')
        mw = kv.get('mw', 'unknown')
        mw_type = kv.get('type', 'IBV_MW_TYPE_1')
        return cls(pd_addr=pd, mw_addr=mw, mw_type=mw_type, ctx=ctx)

    def generate_c(self, ctx: CodeGenContext) -> str:
        pd_name = ctx.get_pd(self.pd_addr)
        mw_name = ctx.get_mw(self.mw_addr)
        
        return f"""
    /* ibv_alloc_mw */
    {mw_name} = ibv_alloc_mw({pd_name}, {self.mw_type});
    if (!{mw_name}) {{
        fprintf(stderr, "Failed to allocate memory window\\n");
        return -1;
    }}
"""

VERB_FACTORY["ibv_alloc_mw"] = AllocMW.from_trace
```