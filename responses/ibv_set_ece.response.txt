以下是我选择的最好的方案，并添加到 `VERB_FACTORY` 映射中：

```python
class SetECE(VerbCall):
    def __init__(self, qp_addr: str, vendor_id: int, options: int, comp_mask: int):
        self.qp_addr = qp_addr
        self.vendor_id = vendor_id
        self.options = options
        self.comp_mask = comp_mask

    @classmethod
    def from_trace(cls, info: str, ctx: CodeGenContext):
        kv = _parse_kv(info)
        qp = kv.get("qp", "unknown")
        vendor_id = int(kv.get("vendor_id", "0"))
        options = int(kv.get("options", "0"))
        comp_mask = int(kv.get("comp_mask", "0"))
        ctx.use_qp(qp)  # Ensure the QP is used before generating code
        return cls(qp_addr=qp, vendor_id=vendor_id, options=options, comp_mask=comp_mask)

    def generate_c(self, ctx: CodeGenContext) -> str:
        qp_name = ctx.get_qp(self.qp_addr)
        ece_name = f"ece_{self.qp_addr.replace('[', '_').replace(']', '')}"
        return f"""
    struct ibv_ece {ece_name} = {{
        .vendor_id = {self.vendor_id},
        .options = {self.options},
        .comp_mask = {self.comp_mask}
    }};
    if (ibv_set_ece({qp_name}, &{ece_name}) != 0) {{
        fprintf(stderr, "Failed to set ECE on QP {qp_name}\\n");
        return -1;
    }}
"""

# Add this to the VERB_FACTORY mapping
VERB_FACTORY["ibv_set_ece"] = SetECE.from_trace
```