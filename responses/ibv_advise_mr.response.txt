```python
class AdviseMR(VerbCall):
    def __init__(self, pd_addr: str, advice: str, flags: int, sg_list: List[Dict[str, str]], num_sge: int):
        self.pd_addr = pd_addr
        self.advice = advice
        self.flags = flags
        self.sg_list = sg_list
        self.num_sge = num_sge

    @classmethod
    def from_trace(cls, info: str, ctx: CodeGenContext):
        kv = _parse_kv(info)
        pd = kv.get("pd", "unknown")
        advice = kv.get("advice", "IBV_ADVISE_MR_ADVICE_PREFETCH")
        flags = int(kv.get("flags", 0))
        num_sge = int(kv.get("num_sge", 0))
        
        # Parse scatter-gather list
        sg_list_raw = kv.get("sg_list", "")
        sg_list = []
        for sg in sg_list_raw.split(";"):
            sg_kv = _parse_kv(sg)
            sg_list.append(sg_kv)

        ctx.use_pd(pd)  # Ensure the PD is used before generating code
        return cls(pd_addr=pd, advice=advice, flags=flags, sg_list=sg_list, num_sge=num_sge)

    def generate_c(self, ctx: CodeGenContext) -> str:
        pd_name = ctx.get_pd(self.pd_addr)
        sg_list_str = ", ".join(
            f"{{ .addr = {sg['addr']}, .length = {sg['length']}, .lkey = {sg['lkey']} }}" for sg in self.sg_list
        )
        return f"""
    /* ibv_advise_mr */
    struct ibv_sge sg_list[{self.num_sge}] = {{ {sg_list_str} }};
    if (ibv_advise_mr({pd_name}, {self.advice}, {self.flags}, sg_list, {self.num_sge}) != 0) {{
        fprintf(stderr, "Failed to advise memory region\\n");
        return -1;
    }}
"""

# Add to VERB_FACTORY
VERB_FACTORY["ibv_advise_mr"] = AdviseMR.from_trace
```