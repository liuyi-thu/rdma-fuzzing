```python
class PostSRQRecv(VerbCall):
    def __init__(self, srq_addr: str, wr_id: str = "0", num_sge: int = 1, addr: str = "0", length: str = "0", lkey: str = "0"):
        self.srq_addr = srq_addr
        self.wr_id = wr_id
        self.num_sge = num_sge
        self.addr = addr
        self.length = length
        self.lkey = lkey

    @classmethod
    def from_trace(cls, info: str, ctx: CodeGenContext):
        kv = _parse_kv(info)
        srq = kv.get("srq", "unknown")
        ctx.use_srq(srq)
        return cls(
            srq_addr=srq,
            wr_id=kv.get("wr_id", "0"),
            num_sge=int(kv.get("num_sge", "1")),
            addr=kv.get("addr", "0"),
            length=kv.get("length", "0"),
            lkey=kv.get("lkey", "0")
        )

    def generate_c(self, ctx: CodeGenContext) -> str:
        srq_name = ctx.get_srq(self.srq_addr)
        wr_suffix = "_" + srq_name.replace("srq[", "").replace("]", "")
        recv_wr_name = f"recv_wr{wr_suffix}"
        sge_name = f"sge_recv{wr_suffix}"
        bad_recv_wr_name = f"bad_recv_wr{wr_suffix}"

        return f"""
    /* ibv_post_srq_recv */
    struct ibv_recv_wr {recv_wr_name};
    struct ibv_sge {sge_name};
    struct ibv_recv_wr *{bad_recv_wr_name};

    memset(&{sge_name}, 0, sizeof({sge_name}));
    {sge_name}.addr = (uintptr_t){self.addr};
    {sge_name}.length = {self.length};
    {sge_name}.lkey = {self.lkey};

    memset(&{recv_wr_name}, 0, sizeof({recv_wr_name}));
    {recv_wr_name}.wr_id = {self.wr_id};
    {recv_wr_name}.num_sge = {self.num_sge};
    {recv_wr_name}.sg_list = &{sge_name};
    {recv_wr_name}.next = NULL;

    ibv_post_srq_recv({srq_name}, &{recv_wr_name}, &{bad_recv_wr_name});
"""
```