```python
class BindMW(VerbCall):
    def __init__(self, qp_addr: str, mw_addr: str, mw_bind_info: Dict[str, str]):
        self.qp_addr = qp_addr
        self.mw_addr = mw_addr
        self.mw_bind_info = mw_bind_info

    @classmethod
    def from_trace(cls, info: str, ctx: CodeGenContext):
        kv = _parse_kv(info)
        qp = kv.get("qp", "unknown")
        mw = kv.get("mw", "unknown")
        bind_info_keys = {"wr_id", "send_flags", "mr", "addr", "length", "mw_access_flags"}
        mw_bind_info = {k: kv[k] for k in bind_info_keys if k in kv}
        
        ctx.use_qp(qp)  # Ensure the QP is used before generating code
        ctx.use_mw(mw)  # Ensure the MW is used before generating code
        
        return cls(qp_addr=qp, mw_addr=mw, mw_bind_info=mw_bind_info)

    def generate_c(self, ctx: CodeGenContext) -> str:
        qp_name = ctx.get_qp(self.qp_addr)
        mw_name = ctx.get_mw(self.mw_addr)
        mw_bind_name = f"mw_bind_{mw_name.replace('mw[', '').replace(']', '')}"
        
        return f"""
    /* ibv_bind_mw */
    struct ibv_mw_bind {mw_bind_name} = {{0}};
    {mw_bind_name}.wr_id = {self.mw_bind_info.get("wr_id", "0")};
    {mw_bind_name}.send_flags = {self.mw_bind_info.get("send_flags", "IBV_SEND_SIGNALED")};
    {mw_bind_name}.bind_info.mr = {ctx.get_mr(self.mw_bind_info["mr"])};
    {mw_bind_name}.bind_info.addr = {self.mw_bind_info.get("addr", "0")};
    {mw_bind_name}.bind_info.length = {self.mw_bind_info.get("length", "0")};
    {mw_bind_name}.bind_info.mw_access_flags = {self.mw_bind_info.get("mw_access_flags", "IBV_ACCESS_REMOTE_WRITE")};
    
    if (ibv_bind_mw({qp_name}, {mw_name}, &{mw_bind_name}) != 0) {{
        fprintf(stderr, "Failed to bind MW\\n");
        return -1;
    }}
"""
```