```python
class DetachMcast(VerbCall):
    """Detach a QP from a multicast group."""
    def __init__(self, qp_addr: str, gid: str, lid: int):
        self.qp_addr = qp_addr
        self.gid = gid
        self.lid = lid

    @classmethod
    def from_trace(cls, info: str, ctx: CodeGenContext):
        kv = _parse_kv(info)
        qp = kv.get("qp", "unknown")
        gid = kv.get("gid", "unknown")
        lid = int(kv.get("lid", "0"))
        ctx.use_qp(qp)  # Ensure the QP is used before generating code
        return cls(qp_addr=qp, gid=gid, lid=lid)

    def generate_c(self, ctx: CodeGenContext) -> str:
        qp_name = ctx.get_qp(self.qp_addr)
        return f"""
    /* ibv_detach_mcast */
    int rc_detach = ibv_detach_mcast({qp_name}, &{self.gid}, {self.lid});
    if (rc_detach) {{
        fprintf(stderr, "Failed to detach multicast group with rc: %d\\n", rc_detach);
        return -1;
    }}
"""
```