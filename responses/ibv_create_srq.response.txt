```python
class CreateSRQ(VerbCall):
    """Create a shared receive queue (SRQ)"""

    def __init__(self, pd_addr: str, srq_addr: str, srq_attr_params: Optional[Dict[str, int]] = None, ctx: CodeGenContext = None):
        self.pd_addr = pd_addr
        self.srq_addr = srq_addr
        self.srq_attr_params = srq_attr_params or {
            "max_wr": 32,
            "max_sge": 1,
            "srq_limit": 0
        }
        if ctx:
            ctx.alloc_srq(srq_addr)  # Register SRQ address in context if provided

    @classmethod
    def from_trace(cls, info: str, ctx: CodeGenContext):
        kv = _parse_kv(info)
        pd = kv.get("pd", "unknown")
        srq = kv.get("srq", "unknown")
        srq_attr_keys = {"max_wr", "max_sge", "srq_limit"}
        srq_attr_params = {k: kv[k] for k in srq_attr_keys if k in kv}
        return cls(pd_addr=pd, srq_addr=srq, srq_attr_params=srq_attr_params, ctx=ctx)

    def generate_c(self, ctx: CodeGenContext) -> str:
        pd_name = ctx.get_pd(self.pd_addr)
        srq_name = ctx.get_srq(self.srq_addr)
        
        attr_name = f"srq_init_attr_{srq_name.replace('srq', '').replace('[', '').replace(']', '')}"
        cap_lines = ", ".join(
            f"{k} = {v}" for k, v in self.srq_attr_params.items()
        )

        return f"""
    /* ibv_create_srq */
    struct ibv_srq_init_attr {attr_name} = {{
        .srq_context = NULL,
        .attr = {{ {cap_lines} }}
    }};
    {srq_name} = ibv_create_srq({pd_name}, &{attr_name});
    if (!{srq_name}) {{
        fprintf(stderr, "Failed to create SRQ\\n");
        return -1;
    }}
"""
```