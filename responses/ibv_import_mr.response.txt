```python
class ImportMR(VerbCall):
    def __init__(self, pd_addr: str, mr_handle: int, mr_addr: str, ctx: CodeGenContext):
        self.pd_addr = pd_addr
        self.mr_handle = mr_handle
        self.mr_addr = mr_addr
        ctx.alloc_mr(mr_addr)  # Register the MR address in the context

    @classmethod
    def from_trace(cls, info: str, ctx: CodeGenContext):
        kv = _parse_kv(info)
        pd = kv.get("pd", "unknown")
        mr_handle = int(kv.get("mr_handle", 0))
        mr = kv.get("mr", "unknown")
        return cls(pd_addr=pd, mr_handle=mr_handle, mr_addr=mr, ctx=ctx)

    def generate_c(self, ctx: CodeGenContext) -> str:
        pd_name = ctx.get_pd(self.pd_addr)
        mr_name = ctx.get_mr(self.mr_addr)
        return f"""
    /* ibv_import_mr */
    {mr_name} = ibv_import_mr({pd_name}, {self.mr_handle});
    if (!{mr_name}) {{
        fprintf(stderr, "Failed to import MR\\n");
        return -1;
    }}
"""
```