```python
class RegMRIova(VerbCall):
    def __init__(self, pd_addr, mr_addr, buf="buf", length=4096, iova=0, access="IBV_ACCESS_LOCAL_WRITE", ctx=None):
        self.pd_addr = pd_addr
        self.mr_addr = mr_addr
        self.buf = buf
        self.length = length
        self.iova = iova
        self.access = access
        ctx.alloc_mr(mr_addr)  # Register the MR address in the context

    @classmethod
    def from_trace(cls, info: str, ctx: CodeGenContext):
        kv = _parse_kv(info)
        pd = kv.get("pd", "pd[0]")
        mr = kv.get("mr", "unknown")
        return cls(
            pd_addr=pd, 
            mr_addr=mr, 
            buf=kv.get("buf", "buf"), 
            length=int(kv.get("length", 4096)),
            iova=int(kv.get("iova", 0)), 
            access=kv.get("access", "IBV_ACCESS_LOCAL_WRITE"),
            ctx=ctx
        )

    def generate_c(self, ctx: CodeGenContext) -> str:
        pd_name = ctx.get_pd(self.pd_addr)
        mr_name = ctx.get_mr(self.mr_addr)
        return f"""
    /* ibv_reg_mr_iova */
    {mr_name} = ibv_reg_mr_iova({pd_name}, {self.buf}, {self.length}, {self.iova}, {self.access});
    if (!{mr_name}) {{
        fprintf(stderr, "Failed to register MR with IOVA\\n");
        return -1;
    }}
"""
```