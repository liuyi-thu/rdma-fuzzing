```python
class CreateAHFromWC(VerbCall):
    def __init__(self, pd_addr: str, wc_addr: str, grh_addr: str, port_num: int):
        self.pd_addr = pd_addr
        self.wc_addr = wc_addr
        self.grh_addr = grh_addr
        self.port_num = port_num

    @classmethod
    def from_trace(cls, info: str, ctx: CodeGenContext):
        kv = _parse_kv(info)
        pd = kv.get("pd", "unknown")
        wc = kv.get("wc", "unknown")
        grh = kv.get("grh", "unknown")
        port_num = int(kv.get("port_num", 1))
        ctx.use_pd(pd)  # Ensure the PD is used before generating code
        return cls(pd_addr=pd, wc_addr=wc, grh_addr=grh, port_num=port_num)

    def generate_c(self, ctx: CodeGenContext) -> str:
        pd_name = ctx.get_pd(self.pd_addr)
        wc_name = self.wc_addr
        grh_name = self.grh_addr
        port_num = self.port_num

        return f"""
    /* ibv_create_ah_from_wc */
    struct ibv_ah *ah;
    ah = ibv_create_ah_from_wc({pd_name}, &{wc_name}, &{grh_name}, {port_num});
    if (!ah) {{
        fprintf(stderr, "Failed to create AH from work completion\\n");
        return -1;
    }}
"""
```