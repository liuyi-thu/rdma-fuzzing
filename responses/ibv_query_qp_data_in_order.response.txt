```python
class QueryQPDataInOrder(VerbCall):
    def __init__(self, qp_addr: str, opcode: str, flags: int):
        self.qp_addr = qp_addr
        self.opcode = opcode
        self.flags = flags

    @classmethod
    def from_trace(cls, info: str, ctx: CodeGenContext):
        kv = _parse_kv(info)
        qp = kv.get("qp", "unknown")
        opcode = kv.get("opcode", "IBV_WR_SEND")
        flags = int(kv.get("flags", "0"), 0)
        ctx.use_qp(qp)  # Ensure the QP is used before generating code
        return cls(qp_addr=qp, opcode=opcode, flags=flags)

    def generate_c(self, ctx: CodeGenContext) -> str:
        qp_name = ctx.get_qp(self.qp_addr)
        return f"""
    /* ibv_query_qp_data_in_order */
    int in_order = ibv_query_qp_data_in_order({qp_name}, {self.opcode}, {self.flags});
    if (in_order < 0) {{
        fprintf(stderr, "Failed to query QP data in order\\n");
        return -1;
    }}
    printf("QP data in order query result: %d\\n", in_order);
"""
```