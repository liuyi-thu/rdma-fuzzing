```python
class QueryQP(VerbCall):
    def __init__(self, qp_addr: str, attr_mask: int):
        self.qp_addr = qp_addr
        self.attr_mask = attr_mask

    @classmethod
    def from_trace(cls, info: str, ctx: CodeGenContext):
        kv = _parse_kv(info)
        qp = kv.get("qp", "unknown")
        mask = kv.get("attr_mask", "0")
        ctx.use_qp(qp)  # Ensure the QP is used before generating code
        return cls(qp_addr=qp, attr_mask=int(mask))

    def generate_c(self, ctx: CodeGenContext) -> str:
        qp_name = ctx.get_qp(self.qp_addr)
        attr_suffix = "_" + qp_name.replace("qp[", "").replace("]", "")  # e.g., "_0" for qp[0]
        attr_name = f"attr_query{attr_suffix}"
        init_attr_name = f"init_attr{attr_suffix}"
        return f"""
    /* ibv_query_qp */
    struct ibv_qp_attr {attr_name} = {{0}};
    struct ibv_qp_init_attr {init_attr_name} = {{0}};
    int rc = ibv_query_qp({qp_name}, &{attr_name}, {self.attr_mask}, &{init_attr_name});
    if (rc) {{
        fprintf(stderr, "Failed to query QP\\n");
        return -1;
    }}
"""
```