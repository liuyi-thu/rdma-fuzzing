```python
class InitAHFromWC(VerbCall):
    def __init__(self, context: str, port_num: int, wc: str, grh: str, ah_attr: str):
        self.context = context
        self.port_num = port_num
        self.wc = wc
        self.grh = grh
        self.ah_attr = ah_attr

    @classmethod
    def from_trace(cls, info: str, ctx: CodeGenContext):
        kv = _parse_kv(info)
        context = kv.get("context", "ctx")
        port_num = int(kv.get("port_num", 1))
        wc = kv.get("wc", "wc")
        grh = kv.get("grh", "grh")
        ah_attr = kv.get("ah_attr", "ah_attr")
        return cls(context=context, port_num=port_num, wc=wc, grh=grh, ah_attr=ah_attr)

    def generate_c(self, ctx: CodeGenContext) -> str:
        return f"""
    /* ibv_init_ah_from_wc */
    if (ibv_init_ah_from_wc({self.context}, {self.port_num}, &{self.wc}, &{self.grh}, &{self.ah_attr})) {{
        fprintf(stderr, "Failed to initialize AH from WC\\n");
        return -1;
    }}
"""
```