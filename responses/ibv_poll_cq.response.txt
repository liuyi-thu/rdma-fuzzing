```python
class PollCQ(VerbCall):
    def __init__(self, cq_addr: str, num_entries: int = 1):
        self.cq_addr = cq_addr
        self.num_entries = num_entries

    @classmethod
    def from_trace(cls, info: str, ctx: CodeGenContext):
        kv = _parse_kv(info)
        cq = kv.get("cq", "unknown")
        num_entries = kv.get("num_entries", 1)
        ctx.use_cq(cq)
        return cls(cq_addr=cq, num_entries=int(num_entries))

    def generate_c(self, ctx: CodeGenContext) -> str:
        cq_name = ctx.get_cq(self.cq_addr)
        return f"""
    /* Poll completion queue */
    struct ibv_wc wc[{self.num_entries}];
    int num_completions = ibv_poll_cq({cq_name}, {self.num_entries}, wc);

    if (num_completions < 0) {{
        fprintf(stderr, "Error polling CQ\\n");
        return -1;
    }} else {{
        fprintf(stdout, "Found %d completions\\n", num_completions);
    }}

    for (int i = 0; i < num_completions; ++i) {{
        if (wc[i].status != IBV_WC_SUCCESS) {{
            fprintf(stderr, "Completion with error: %d, vendor error: %d\\n", wc[i].status, wc[i].vendor_err);
        }} else {{
            fprintf(stdout, "Completion successful, opcode: %d, byte_len: %d\\n", wc[i].opcode, wc[i].byte_len);
        }}
    }}
"""
```