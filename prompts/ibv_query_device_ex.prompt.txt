请补全以下函数对应的verb描述（用在verbs.py中）：

- ibv_query_device_ex

请直接生成python代码，我之后会自行添加到verbs.py中。
函数详细信息：
Function Name: ibv_query_device_ex
Output:
int ibv_query_device_ex(struct ibv_context * context, const struct ibv_query_device_ex_input * input, struct ibv_device_attr_ex * attr);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};
struct ibv_query_device_ex_input {
    uint32_t comp_mask;
};
struct ibv_device_attr_ex {
    struct ibv_device_attr orig_attr;
    struct ibv_device_attr {
        char[64] fw_ver;
        __be64 node_guid;
        __be64 sys_image_guid;
        uint64_t max_mr_size;
        uint64_t page_size_cap;
        uint32_t vendor_id;
        uint32_t vendor_part_id;
        uint32_t hw_ver;
        int max_qp;
        int max_qp_wr;
        unsigned int device_cap_flags;
        int max_sge;
        int max_sge_rd;
        int max_cq;
        int max_cqe;
        int max_mr;
        int max_pd;
        int max_qp_rd_atom;
        int max_ee_rd_atom;
        int max_res_rd_atom;
        int max_qp_init_rd_atom;
        int max_ee_init_rd_atom;
        enum ibv_atomic_cap atomic_cap;
        enum ibv_atomic_cap {
            IBV_ATOMIC_NONE = 0,
            IBV_ATOMIC_HCA = 1,
            IBV_ATOMIC_GLOB = 2,
        };
        int max_ee;
        int max_rdd;
        int max_mw;
        int max_raw_ipv6_qp;
        int max_raw_ethy_qp;
        int max_mcast_grp;
        int max_mcast_qp_attach;
        int max_total_mcast_qp_attach;
        int max_ah;
        int max_fmr;
        int max_map_per_fmr;
        int max_srq;
        int max_srq_wr;
        int max_srq_sge;
        uint16_t max_pkeys;
        uint8_t local_ca_ack_delay;
        uint8_t phys_port_cnt;
    };
    uint32_t comp_mask;
    struct ibv_odp_caps odp_caps;
    struct ibv_odp_caps {
        uint64_t general_caps;
        struct (unnamed struct at verbs.h:241:2) per_transport_caps;
    };
    uint64_t completion_timestamp_mask;
    uint64_t hca_core_clock;
    uint64_t device_cap_flags_ex;
    struct ibv_tso_caps tso_caps;
    struct ibv_tso_caps {
        uint32_t max_tso;
        uint32_t supported_qpts;
    };
    struct ibv_rss_caps rss_caps;
    struct ibv_rss_caps {
        uint32_t supported_qpts;
        uint32_t max_rwq_indirection_tables;
        uint32_t max_rwq_indirection_table_size;
        uint64_t rx_hash_fields_mask;
        uint8_t rx_hash_function;
    };
    uint32_t max_wq_type_rq;
    struct ibv_packet_pacing_caps packet_pacing_caps;
    struct ibv_packet_pacing_caps {
        uint32_t qp_rate_limit_min;
        uint32_t qp_rate_limit_max;
        uint32_t supported_qpts;
    };
    uint32_t raw_packet_caps;
    struct ibv_tm_caps tm_caps;
    struct ibv_tm_caps {
        uint32_t max_rndv_hdr_size;
        uint32_t max_num_tags;
        uint32_t flags;
        uint32_t max_ops;
        uint32_t max_sge;
    };
    struct ibv_cq_moderation_caps cq_mod_caps;
    struct ibv_cq_moderation_caps {
        uint16_t max_cq_count;
        uint16_t max_cq_period;
    };
    uint64_t max_dm_size;
    struct ibv_pci_atomic_caps pci_atomic_caps;
    struct ibv_pci_atomic_caps {
        uint16_t fetch_add;
        uint16_t swap;
        uint16_t compare_swap;
    };
    uint32_t xrc_odp_caps;
    uint32_t phys_port_cnt_ex;
};

函数相关文档：
---
date: 2014-12-17
section: 3
title: IBV_QUERY_DEVICE_EX
---

# NAME

ibv_query_device_ex - query an RDMA device\'s attributes including
extended device properties.

# SYNOPSIS

    #include <infiniband/verbs.h>

    int ibv_query_device_ex(struct ibv_context *context,
     struct ibv_query_device_ex_input *input,
     struct ibv_device_attr_ex *attr);

# DESCRIPTION

**ibv_query_device_ex()** returns the attributes of the device with
context *context.* The argument *input* is a pointer to an
ibv_query_device_ex_input structure, used for future extensions The
argument *attr* is a pointer to an ibv_device_attr_ex struct, as defined
in \<infiniband/verbs.h\>.

    struct ibv_device_attr_ex {
    struct ibv_device_attr orig_attr;
    uint32_t               comp_mask;                  /* Compatibility mask that defines which of the following variables are valid */
    struct ibv_odp_caps    odp_caps;                   /* On-Demand Paging capabilities */
    uint64_t               completion_timestamp_mask;  /* Completion timestamp mask (0 = unsupported) */
    uint64_t               hca_core_clock;             /* The frequency (in kHZ) of the HCA (0 = unsupported) */
    uint64_t               device_cap_flags_ex;        /* Extended device capability flags */
    struct ibv_tso_caps    tso_caps;                   /* TCP segmentation offload capabilities */
    struct ibv_rss_caps    rss_caps;                   /* RSS capabilities */
    uint32_t               max_wq_type_rq;             /* Max Work Queue from type RQ */
    struct ibv_packet_pacing_caps packet_pacing_caps; /* Packet pacing capabilities */
    uint32_t               raw_packet_caps;            /* Raw packet capabilities, use enum ibv_raw_packet_caps */
    struct ibv_tm_caps     tm_caps;                    /* Tag matching capabilities */
    struct ibv_cq_moderation_caps  cq_mod_caps;        /* CQ moderation max capabilities */
    uint64_t     	       max_dm_size;		   /* Max Device Memory size (in bytes) available for allocation */
    struct ibv_pci_atomic_caps atomic_caps;            /* PCI atomic operations capabilities, use enum ibv_pci_atomic_op_size */
    uint32_t               xrc_odp_caps;               /* Mask with enum ibv_odp_transport_cap_bits to know which operations are supported. */
    uint32_t	       phys_port_cnt_ex		   /* Extended number of physical port count, allows exposing more than 255 ports device */
    };

    struct ibv_odp_caps {
            uint64_t general_odp_caps;    /* Mask with enum ibv_odp_general_cap_bits */
            struct {
                    uint32_t rc_odp_caps; /* Mask with enum ibv_odp_tranport_cap_bits to know which operations are supported. */
                    uint32_t uc_odp_caps; /* Mask with enum ibv_odp_tranport_cap_bits to know which operations are supported. */
                    uint32_t ud_odp_caps; /* Mask with enum ibv_odp_tranport_cap_bits to know which operations are supported. */
            } per_transport_caps;
    };

    enum ibv_odp_general_cap_bits {
            IBV_ODP_SUPPORT = 1 << 0, /* On demand paging is supported */
            IBV_ODP_SUPPORT_IMPLICIT = 1 << 1, /* Implicit on demand paging is supported */
    };

    enum ibv_odp_transport_cap_bits {
            IBV_ODP_SUPPORT_SEND     = 1 << 0, /* Send operations support on-demand paging */
            IBV_ODP_SUPPORT_RECV     = 1 << 1, /* Receive operations support on-demand paging */
            IBV_ODP_SUPPORT_WRITE    = 1 << 2, /* RDMA-Write operations support on-demand paging */
            IBV_ODP_SUPPORT_READ     = 1 << 3, /* RDMA-Read operations support on-demand paging */
            IBV_ODP_SUPPORT_ATOMIC   = 1 << 4, /* RDMA-Atomic operations support on-demand paging */
            IBV_ODP_SUPPORT_SRQ_RECV = 1 << 5, /* SRQ receive operations support on-demand paging */
    };

    struct ibv_tso_caps {
            uint32_t max_tso;        /* Maximum payload size in bytes supported for segmentation by TSO engine.*/
            uint32_t supported_qpts; /* Bitmap showing which QP types are supported by TSO operation. */
    };

    struct ibv_rss_caps {
            uint32_t supported_qpts;                   /* Bitmap showing which QP types are supported RSS */
            uint32_t max_rwq_indirection_tables;       /* Max receive work queue indirection tables */
            uint32_t max_rwq_indirection_table_size;   /* Max receive work queue indirection table size */
            uint64_t rx_hash_fields_mask;              /* Mask with enum ibv_rx_hash_fields to know which incoming packet's field can participates in the RX hash */
            uint8_t  rx_hash_function;                 /* Mask with enum ibv_rx_hash_function_flags to know which hash functions are supported */
    };

    struct ibv_packet_pacing_caps {
           uint32_t qp_rate_limit_min; /* Minimum rate limit in kbps */
           uint32_t qp_rate_limit_max; /* Maximum rate limit in kbps */
           uint32_t supported_qpts;    /* Bitmap showing which QP types are supported. */
    };

    enum ibv_raw_packet_caps {
    IBV_RAW_PACKET_CAP_CVLAN_STRIPPING	= 1 << 0, /* CVLAN stripping is supported */
    IBV_RAW_PACKET_CAP_SCATTER_FCS		= 1 << 1, /* FCS scattering is supported */
    IBV_RAW_PACKET_CAP_IP_CSUM		= 1 << 2, /* IP CSUM offload is supported */
    };

    enum ibv_tm_cap_flags {
    IBV_TM_CAP_RC   = 1 << 0,            /* Support tag matching on RC transport */
    };

    struct ibv_tm_caps {
    uint32_t        max_rndv_hdr_size;   /* Max size of rendezvous request header */
    uint32_t        max_num_tags;        /* Max number of tagged buffers in a TM-SRQ matching list */
    uint32_t        flags;    	     /* From enum ibv_tm_cap_flags */
    uint32_t        max_ops;             /* Max number of outstanding list operations */
    uint32_t        max_sge;             /* Max number of SGEs in a tagged buffer */
    };

    struct ibv_cq_moderation_caps {
    	uint16_t max_cq_count;
    	uint16_t max_cq_period;
    };

    enum ibv_pci_atomic_op_size {
    IBV_PCI_ATOMIC_OPERATION_4_BYTE_SIZE_SUP = 1 << 0,
    IBV_PCI_ATOMIC_OPERATION_8_BYTE_SIZE_SUP = 1 << 1,
    IBV_PCI_ATOMIC_OPERATION_16_BYTE_SIZE_SUP = 1 << 2,
    };

    struct ibv_pci_atomic_caps {
    uint16_t fetch_add;	/* Supported sizes for an atomic fetch and add operation, use enum ibv_pci_atomic_op_size */
    uint16_t swap;		/* Supported sizes for an atomic unconditional swap operation, use enum ibv_pci_atomic_op_size */
    uint16_t compare_swap;	/* Supported sizes for an atomic compare and swap operation, use enum ibv_pci_atomic_op_size */
    };

Extended device capability flags (device_cap_flags_ex):\

IBV_DEVICE_PCI_WRITE_END_PADDING

:   Indicates the device has support for padding PCI writes to a full
    cache line.

    Padding packets to full cache lines reduces the amount of traffic
    required at the memory controller at the expense of creating more
    traffic on the PCI-E port.

    Workloads that have a high CPU memory load and low PCI-E utilization
    will benefit from this feature, while workloads that have a high
    PCI-E utilization and small packets will be harmed.

    For instance, with a 128 byte cache line size, the transfer of any
    packets less than 128 bytes will require a full 128 transfer on PCI,
    potentially doubling the required PCI-E bandwidth.

    This feature can be enabled on a QP or WQ basis via the
    IBV_QP_CREATE_PCI_WRITE_END_PADDING or
    IBV_WQ_FLAGS_PCI_WRITE_END_PADDING flags.

# RETURN VALUE

**ibv_query_device_ex()** returns 0 on success, or the value of errno on
failure (which indicates the failure reason).

# NOTES

The maximum values returned by this function are the upper limits of
supported resources by the device. However, it may not be possible to
use these maximum values, since the actual number of any resource that
can be created may be limited by the machine configuration, the amount
of host memory, user permissions, and the amount of resources already in
use by other users/processes.

# SEE ALSO

**ibv_query_device**(3), **ibv_open_device**(3), **ibv_query_port**(3),
**ibv_query_pkey**(3), **ibv_query_gid**(3)

# AUTHORS

Majd Dibbiny \<majd@mellanox.com\>

请确保描述简洁明了，适合放在verbs.py中。输出中只需要含有python代码本身即可，无需含有说明性文字。