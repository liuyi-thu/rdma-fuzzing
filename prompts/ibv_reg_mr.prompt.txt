请补全以下函数对应的verb描述（用在verbs.py中）：

- ibv_reg_mr

请直接生成python代码，我之后会自行添加到verbs.py中。
函数详细信息：
Function Name: ibv_reg_mr
Output:
struct ibv_mr * ibv_reg_mr(struct ibv_pd * pd, void * addr, int length, int access);
struct ibv_mr {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    void * addr;
    int length;
    uint32_t handle;
    uint32_t lkey;
    uint32_t rkey;
};

函数相关文档：
---
date: 2006-10-31
section: 3
title: IBV_REG_MR
---

# NAME

ibv_reg_mr, ibv_reg_mr_iova, ibv_reg_dmabuf_mr, ibv_dereg_mr - register
or deregister a memory region (MR)

# SYNOPSIS

    #include <infiniband/verbs.h>

    struct ibv_mr *ibv_reg_mr(struct ibv_pd *pd, void *addr,
     size_t length, int access);

    struct ibv_mr *ibv_reg_mr_iova(struct ibv_pd *pd, void *addr,
     size_t length, uint64_t hca_va,
     int access);

    struct ibv_mr *ibv_reg_dmabuf_mr(struct ibv_pd *pd, uint64_t offset,
     size_t length, uint64_t iova,
     int fd, int access);

    int ibv_dereg_mr(struct ibv_mr *mr);

# DESCRIPTION

**ibv_reg_mr()** registers a memory region (MR) associated with the
protection domain *pd.* The MR\'s starting address is *addr* and its
size is *length.* The argument *access* describes the desired memory
protection attributes; it is either 0 or the bitwise OR of one or more
of the following flags:

**IBV_ACCESS_LOCAL_WRITE** 

:   Enable Local Write Access

**IBV_ACCESS_REMOTE_WRITE** 

:   Enable Remote Write Access

**IBV_ACCESS_REMOTE_READ**

:   Enable Remote Read Access

**IBV_ACCESS_REMOTE_ATOMIC**

:   Enable Remote Atomic Operation Access (if supported)

**IBV_ACCESS_FLUSH_GLOBAL**

:   Enable Remote Flush Operation with global visibility placement type
    (if supported)

**IBV_ACCESS_FLUSH_PERSISTENT**

:   Enable Remote Flush Operation with persistence placement type (if
    supported)

**IBV_ACCESS_MW_BIND**

:   Enable Memory Window Binding

**IBV_ACCESS_ZERO_BASED**

:   Use byte offset from beginning of MR to access this MR, instead of a
    pointer address

**IBV_ACCESS_ON_DEMAND**

:   Create an on-demand paging MR

**IBV_ACCESS_HUGETLB**

:   Huge pages are guaranteed to be used for this MR, applicable with
    IBV_ACCESS_ON_DEMAND in explicit mode only

**IBV_ACCESS_RELAXED_ORDERING**

:   This setting allows the NIC to relax the order that data is
    transferred between the network and the target memory region.
    Relaxed ordering allows network initiated writes (such as incoming
    message send or RDMA write operations) to reach memory in an
    arbitrary order. This can improve the performance of some
    applications. However, relaxed ordering has the following impact:
    RDMA write-after-write message order is no longer guaranteed. (Send
    messages will still match posted receive buffers in order.)
    Back-to-back network writes that target the same memory region leave
    the region in an unknown state. Relaxed ordering does not change
    completion semantics, such as data visibility. That is, a completion
    still ensures that all data is visible, including data from prior
    transfers. Relaxed ordered operations will also not bypass atomic
    operations.

If **IBV_ACCESS_REMOTE_WRITE** or **IBV_ACCESS_REMOTE_ATOMIC** is set,
then **IBV_ACCESS_LOCAL_WRITE** must be set too.

Local read access is always enabled for the MR.

To create an implicit ODP MR, IBV_ACCESS_ON_DEMAND should be set, addr
should be 0 and length should be SIZE_MAX.

If **IBV_ACCESS_HUGETLB** is set, then application awares that for this
MR all pages are huge and must promise it will never do anything to
break huge pages.

**ibv_reg_mr_iova()** ibv_reg_mr_iova is the same as the normal reg_mr,
except that the user is allowed to specify the virtual base address of
the MR when accessed through a lkey or rkey. The offset in the memory
region is computed as \'addr + (iova - hca_va)\'. Specifying 0 for
hca_va has the same effect as IBV_ACCESS_ZERO_BASED.

**ibv_reg_dmabuf_mr()** registers a dma-buf based memory region (MR)
associated with the protection domain *pd.* The MR starts at *offset* of
the dma-buf and its size is *length.* The dma-buf is identified by the
file descriptor *fd.* The argument *iova* specifies the virtual base
address of the MR when accessed through a lkey or rkey. It must have the
same page offset as *offset.* The argument *access* describes the
desired memory protection attributes; it is similar to the ibv_reg_mr
case except that only the following flags are supported:
**IBV_ACCESS_LOCAL_WRITE, IBV_ACCESS_REMOTE_WRITE,
IBV_ACCESS_REMOTE_READ, IBV_ACCESS_REMOTE_ATOMIC,
IBV_ACCESS_RELAXED_ORDERING.**

**ibv_dereg_mr()** deregisters the MR *mr.*

# RETURN VALUE

**ibv_reg_mr() / ibv_reg_mr_iova() / ibv_reg_dmabuf_mr()** returns a
pointer to the registered MR, or NULL if the request fails. The local
key (**L_Key**) field **lkey** is used as the lkey field of struct
ibv_sge when posting buffers with ibv_post\_\* verbs, and the the remote
key (**R_Key**) field **rkey** is used by remote processes to perform
Atomic and RDMA operations. The remote process places this **rkey** as
the rkey field of struct ibv_send_wr passed to the ibv_post_send
function.

**ibv_dereg_mr()** returns 0 on success, or the value of errno on
failure (which indicates the failure reason).

# NOTES

**ibv_dereg_mr()** fails if any memory window is still bound to this MR.

# SEE ALSO

**ibv_alloc_pd**(3), **ibv_post_send**(3), **ibv_post_recv**(3),
**ibv_post_srq_recv**(3)

# AUTHORS

Dotan Barak \<dotanba@gmail.com\>

请确保描述简洁明了，适合放在verbs.py中。输出中只需要含有python代码本身即可，无需含有说明性文字。