请补全以下函数对应的verb描述（用在verbs.py中）：

- ibv_advise_mr

请直接生成python代码，我之后会自行添加到verbs.py中。
函数详细信息：
Function Name: ibv_advise_mr
Output:
int ibv_advise_mr(struct ibv_pd * pd, enum ib_uverbs_advise_mr_advice advice, uint32_t flags, struct ibv_sge * sg_list, uint32_t num_sge);
struct ibv_pd {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    uint32_t handle;
};
enum ib_uverbs_advise_mr_advice {
    IB_UVERBS_ADVISE_MR_ADVICE_PREFETCH = 0,
    IB_UVERBS_ADVISE_MR_ADVICE_PREFETCH_WRITE = 1,
    IB_UVERBS_ADVISE_MR_ADVICE_PREFETCH_NO_FAULT = 2,
};
struct ibv_sge {
    uint64_t addr;
    uint32_t length;
    uint32_t lkey;
};

函数相关文档：
---
date: 2018-10-19
footer: libibverbs
header: "Libibverbs Programmer's Manual"
layout: page
license: 'Licensed under the OpenIB.org BSD license (FreeBSD Variant) - See COPYING.md'
section: 3
title: IBV_ADVISE_MR
---

# NAME

ibv_advise_mr - Gives advice or directions to the kernel about an
		address range belongs to a memory region (MR).

# SYNOPSIS

```c
#include <infiniband/verbs.h>

int ibv_advise_mr(struct ibv_pd *pd,
		  enum ibv_advise_mr_advice advice,
		  uint32_t flags,
		  struct ibv_sge *sg_list,
		  uint32_t num_sge)
```

# DESCRIPTION

**ibv_advise_mr()** Give advice or directions to the kernel about an
address range belonging to a memory region (MR).
Applications that are aware of future access patterns can use this verb
in order to leverage this knowledge to improve system or
application performance.

**Conventional advice values**

*IBV_ADVISE_MR_ADVICE_PREFETCH*
:	Pre-fetch a range of an on-demand paging MR.
	Make pages present with read-only permission before the actual IO is conducted.
	This would provide a way to reduce latency by overlapping paging-in
	and either compute time or IO to other ranges.

*IBV_ADVISE_MR_ADVICE_PREFETCH_WRITE*
:	Like IBV_ADVISE_MR_ADVICE_PREFETCH but with read-access
	and write-access permission to the fetched memory.

*IBV_ADVISE_MR_ADVICE_PREFETCH_NO_FAULT*
:	Pre-fetch a range of an on-demand paging MR without faulting.
	This allows presented pages in the CPU to become presented to the device.

# ARGUMENTS
*pd*
:	The protection domain (PD) associated with the MR.

*advice*
:	The requested advise value (as listed above).

*flags*
:	Describes the properties of the advise operation
	**Conventional advice values**
	*IBV_ADVISE_MR_FLAG_FLUSH*
	:	Request to be a synchronized operation. Return to the caller
		after the operation is completed.

*sg_list*
:	Pointer to the s/g array
	When using IBV_ADVISE_OP_PREFETCH advise value, all the lkeys of all
	the scatter gather elements (SGEs) must be associated with ODP MRs
	(MRs that were registered with IBV_ACCESS_ON_DEMAND).

*num_sge*
:	Number of elements in the s/g array

# RETURN VALUE

**ibv_advise_mr()** returns 0 when the call was successful, or the value
		    of errno on failure (which indicates the failure reason).

*EOPNOTSUPP*
:	libibverbs or provider driver doesn't support the ibv_advise_mr() verb
	(ENOSYS may sometimes be returned by old versions of libibverbs).

*ENOTSUP*
:	The advise operation isn't supported.

*EFAULT*
:	In one of the following:
	o When the range requested is out of the MR bounds, or when parts of
	  it are not part of the process address space.
	o One of the lkeys provided in the scatter gather list is invalid or
	  with wrong write access.

*EINVAL*
:	In one of the following:
	o The PD is invalid.
	o The flags are invalid.
	o The requested address doesn't belong to a MR, but a MW or something.

*EPERM*
:	In one of the following:
	o Referencing a valid lkey outside the caller's security scope.
	o The advice is IBV_ADVISE_MR_ADVICE_PREFETCH_WRITE but the specified
	  MR in the scatter gather list is not registered as writable access.

*ENOENT*
:	The providing lkeys aren't consistent with the MR's.

*ENOMEM*
:	Not enough memory.
# NOTES

An application may pre-fetch any address range within an ODP MR when using the
**IBV_ADVISE_MR_ADVICE_PREFETCH** or **IBV_ADVISE_MR_ADVICE_PREFETCH_WRITE** advice.
Semantically, this operation is best-effort. That means the kernel does not
guarantee that underlying pages are updated in the HCA or the pre-fetched pages
would remain resident.

When using **IBV_ADVISE_MR_ADVICE_PREFETCH** or **IBV_ADVISE_MR_ADVICE_PREFETCH_WRITE**
advice, the operation will be done in the following stages:
	o Page in the user pages to memory (pages aren't pinned).
	o Get the dma mapping of these user pages.
	o Post the underlying page translations to the HCA.

If **IBV_ADVISE_MR_FLAG_FLUSH** is specified then the underlying pages are
guaranteed to be updated in the HCA before returning SUCCESS.
Otherwise the driver can choose to postpone the posting of the new translations
to the HCA.
When performing a local RDMA access operation it is recommended to use
IBV_ADVISE_MR_FLAG_FLUSH flag with one of the pre-fetch advices to
increase probability that the pages translations are valid in the HCA
and avoid future page faults.

# SEE ALSO

**ibv_reg_mr**(3),
**ibv_rereg_mr**(3),
**ibv_dereg_mr**(3)

# AUTHOR

Aviad Yehezkel <aviadye@mellanox.com>

请确保描述简洁明了，适合放在verbs.py中。输出中只需要含有python代码本身即可，无需含有说明性文字。