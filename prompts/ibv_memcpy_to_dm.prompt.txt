请补全以下函数对应的verb描述（用在verbs.py中）：

- ibv_memcpy_to_dm

请直接生成python代码，我之后会自行添加到verbs.py中。
函数详细信息：
Function Name: ibv_memcpy_to_dm
Output:
int ibv_memcpy_to_dm(struct ibv_dm * dm, uint64_t dm_offset, const void * host_addr, int length);
struct ibv_dm {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    int (*)(struct ibv_dm *, uint64_t, const void *, int) memcpy_to_dm;
    int (*)(void *, struct ibv_dm *, uint64_t, int) memcpy_from_dm;
    uint32_t comp_mask;
    uint32_t handle;
};

函数相关文档：
---
date: 2017-07-25
section: 3
title: IBV_ALLOC_DM
---

# NAME

ibv_alloc_dm, ibv_free_dm, ibv_memcpy_to/from_dm - allocate or free a
device memory buffer (DMs) and perform memory copy to or from it

# SYNOPSIS

    #include <infiniband/verbs.h>

    struct ibv_dm *ibv_alloc_dm(struct ibv_context *context,
     struct ibv_alloc_dm_attr *attr);

    int ibv_free_dm(struct ibv_dm *dm);

# DESCRIPTION

**ibv_alloc_dm()** allocates a device memory buffer for the RDMA device
context *context.* The argument *attr* is a pointer to an
ibv_alloc_dm_attr struct, as defined in \<infiniband/verbs.h\>.

**ibv_free_dm()** free the device memory buffer *dm.*

    struct ibv_alloc_dm_attr {
    size_t length;			/* Length of desired device memory buffer */
    uint32_t log_align_req;		/* Log base 2 of address alignment requirement */
    uint32_t comp_mask;		/* Compatibility mask that defines which of the following variables are valid */
    };

    Address alignment may be required in cases where RDMA atomic operations will be performed using the device memory.

    In such cases, the user may specify the device memory start address alignment using the log_align_req parameter

    in the allocation attributes struct.

# Accessing an allocated device memory

    In order to perform a write/read memory access to an allocated device memory, a user could use the ibv_memcpy_to_dm
    and ibv_memcpy_from_dm calls respectively.

    int ibv_memcpy_to_dm(struct ibv_dm *dm, uint64_t dm_offset,
     void *host_addr, size_t length");

    int ibv_memcpy_from_dm(void *host_addr, struct ibv_dm *dm",
     uint64_t dm_offset, size_t length");

    dm_offest
    is the byte offset from the beginning of the allocated device memory buffer to access.

    host_addr
    is the host memory buffer address to access.

    length
    is the copy length in bytes.

# Device memory registration

    User may register the allocated device memory as a memory region and use the lkey/rkey inside sge when posting receive
    or sending work request. This type of MR is defined as zero based and therefore any reference to it (specifically in sge)
    is done with a byte offset from the beginning of the region.

    This type of registration is done using ibv_reg_dm_mr.

    struct ibv_mr* ibv_reg_dm_mr(struct ibv_pd *pd, struct ibv_dm *dm, uint64_t dm_offset,
     size_t length, uint32_t access);

    pd
    the associated pd for this registration.

    dm
    the associated dm for this registration.

    dm_offest
    is the byte offset from the beginning of the allocated device memory buffer to register.

    length
    the memory length to register.

    access
    mr access flags (Use enum ibv_access_flags). For this type of registration, user must set the IBV_ACCESS_ZERO_BASED
    flag.

# RETURN VALUE

**ibv_alloc_dm()** returns a pointer to an ibv_dm struct or NULL if the
request fails. The output dm contains the handle which could be used by
user to import this device memory.

**ibv_free_dm()** returns 0 on success, or the value of errno on failure
(which indicates the failure reason).

**ibv_reg_dm_mr()** returns a pointer to an ibv_mr struct on success or
NULL if request fails.

**ibv_memcpy_to_dm()/ibv_memcpy_from_dm()** returns 0 on success or the
failure reason value on failure.

# NOTES

**ibv_alloc_dm()** may fail if device has no more free device memory
left, where the maximum amount of allocated memory is provided by the
*max_dm_size attribute in* *ibv_device_attr_ex struct.*
**ibv_free_dm()** may fail if any other resources (such as an MR) is
still associated with the DM being freed.

# SEE ALSO

**ibv_query_device_ex**(3),

# AUTHORS

Ariel Levkovich \<lariel@mellanox.com\>

请确保描述简洁明了，适合放在verbs.py中。输出中只需要含有python代码本身即可，无需含有说明性文字。