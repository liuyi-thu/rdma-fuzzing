请补全以下函数对应的verb描述（用在verbs.py中）：

- ibv_free_device_list

请直接生成python代码，我之后会自行添加到verbs.py中。
函数详细信息：
Function Name: ibv_free_device_list
Output:
void ibv_free_device_list(struct ibv_device ** list);
struct ibv_device {
    struct _ibv_device_ops _ops;
    struct _ibv_device_ops {
        struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
        void (*)(struct ibv_context *) _dummy2;
    };
    enum ibv_node_type node_type;
    enum ibv_node_type {
        IBV_NODE_UNKNOWN = -1,
        IBV_NODE_CA = 1,
        IBV_NODE_SWITCH = 2,
        IBV_NODE_ROUTER = 3,
        IBV_NODE_RNIC = 4,
        IBV_NODE_USNIC = 5,
        IBV_NODE_USNIC_UDP = 6,
        IBV_NODE_UNSPECIFIED = 7,
    };
    enum ibv_transport_type transport_type;
    enum ibv_transport_type {
        IBV_TRANSPORT_UNKNOWN = -1,
        IBV_TRANSPORT_IB = 0,
        IBV_TRANSPORT_IWARP = 1,
        IBV_TRANSPORT_USNIC = 2,
        IBV_TRANSPORT_USNIC_UDP = 3,
        IBV_TRANSPORT_UNSPECIFIED = 4,
    };
    char[64] name;
    char[64] dev_name;
    char[256] dev_path;
    char[256] ibdev_path;
};

函数相关文档：
---
date: 2006-10-31
footer: libibverbs
header: "Libibverbs Programmer's Manual"
layout: page
license: 'Licensed under the OpenIB.org BSD license (FreeBSD Variant) - See COPYING.md'
section: 3
title: IBV_GET_DEVICE_LIST
---

# NAME

ibv_get_device_list, ibv_free_device_list - get and release list of available
RDMA devices

# SYNOPSIS

```c
#include <infiniband/verbs.h>

struct ibv_device **ibv_get_device_list(int *num_devices);

void ibv_free_device_list(struct ibv_device **list);
```

# DESCRIPTION

**ibv_get_device_list()** returns a NULL-terminated array of RDMA devices
currently available. The argument *num_devices* is optional; if not NULL, it
is set to the number of devices returned in the array.

**ibv_free_device_list()** frees the array of devices *list* returned by
**ibv_get_device_list()**.

# RETURN VALUE

**ibv_get_device_list()** returns the array of available RDMA devices, or sets
*errno* and returns NULL if the request fails. If no devices are found then
*num_devices* is set to 0, and non-NULL is returned.

**ibv_free_device_list()** returns no value.

# ERRORS

**EPERM**
:	Permission denied.

**ENOSYS**
:	No kernel support for RDMA.

**ENOMEM**
:	Insufficient memory to complete the operation.


# NOTES

Client code should open all the devices it intends to use with
**ibv_open_device()** before calling **ibv_free_device_list()**. Once it frees
the array with **ibv_free_device_list()**, it will be able to use only the
open devices; pointers to unopened devices will no longer be valid.

Setting the environment variable **IBV_SHOW_WARNINGS** will cause warnings to
be emitted to stderr if a kernel verbs device is discovered, but no
corresponding userspace driver can be found for it.

# STATIC LINKING

If **libibverbs** is statically linked to the application then all provider
drivers must also be statically linked. The library will not load dynamic
providers when static linking is used.

To link the providers set the **RDMA_STATIC_PROVIDERS** define to the comma
separated list of desired providers when compiling the application. The
special keyword 'all' will statically link all supported **libibverbs**
providers.

This is intended to be used along with **pkg-config(1)** to setup the proper
flags for **libibverbs** linking.

If this is not done then **ibv_get_device_list** will always return an empty
list.

Using only dynamic linking for **libibverbs** applications is strongly
recommended.

# SEE ALSO

**ibv_fork_init**(3),
**ibv_get_device_guid**(3),
**ibv_get_device_name**(3),
**ibv_get_device_index**(3),
**ibv_open_device**(3)

# AUTHOR

Dotan Barak <dotanba@gmail.com>

请确保描述简洁明了，适合放在verbs.py中。输出中只需要含有python代码本身即可，无需含有说明性文字。