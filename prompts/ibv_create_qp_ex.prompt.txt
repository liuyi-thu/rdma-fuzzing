请补全以下函数对应的verb描述（用在verbs.py中）：

- ibv_create_qp_ex

请直接生成python代码，我之后会自行添加到verbs.py中。
函数详细信息：
Function Name: ibv_create_qp_ex
Output:
struct ibv_qp * ibv_create_qp_ex(struct ibv_context * context, struct ibv_qp_init_attr_ex * qp_init_attr_ex);
struct ibv_qp {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * qp_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * send_cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_srq {
        struct ibv_context * context;
        void * srq_context;
        struct ibv_pd * pd;
        uint32_t handle;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint32_t handle;
    uint32_t qp_num;
    enum ibv_qp_state state;
    enum ibv_qp_state {
        IBV_QPS_RESET = 0,
        IBV_QPS_INIT = 1,
        IBV_QPS_RTR = 2,
        IBV_QPS_RTS = 3,
        IBV_QPS_SQD = 4,
        IBV_QPS_SQE = 5,
        IBV_QPS_ERR = 6,
        IBV_QPS_UNKNOWN = 7,
    };
    enum ibv_qp_type qp_type;
    enum ibv_qp_type {
        IBV_QPT_RC = 2,
        IBV_QPT_UC = 3,
        IBV_QPT_UD = 4,
        IBV_QPT_RAW_PACKET = 8,
        IBV_QPT_XRC_SEND = 9,
        IBV_QPT_XRC_RECV = 10,
        IBV_QPT_DRIVER = 255,
    };
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_qp_init_attr_ex {
    void * qp_context;
    struct ibv_cq * send_cq;
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_qp_cap cap;
    struct ibv_qp_cap {
        uint32_t max_send_wr;
        uint32_t max_recv_wr;
        uint32_t max_send_sge;
        uint32_t max_recv_sge;
        uint32_t max_inline_data;
    };
    enum ibv_qp_type qp_type;
    int sq_sig_all;
    uint32_t comp_mask;
    struct ibv_pd * pd;
    struct ibv_xrcd * xrcd;
    struct ibv_xrcd {
        struct ibv_context * context;
    };
    uint32_t create_flags;
    uint16_t max_tso_header;
    struct ibv_rwq_ind_table * rwq_ind_tbl;
    struct ibv_rwq_ind_table {
        struct ibv_context * context;
        int ind_tbl_handle;
        int ind_tbl_num;
        uint32_t comp_mask;
    };
    struct ibv_rx_hash_conf rx_hash_conf;
    struct ibv_rx_hash_conf {
        uint8_t rx_hash_function;
        uint8_t rx_hash_key_len;
        uint8_t * rx_hash_key;
        uint64_t rx_hash_fields_mask;
    };
    uint32_t source_qpn;
    uint64_t send_ops_flags;
};

函数相关文档：
---
date: 2013-06-26
section: 3
title: IBV_CREATE_QP_EX
---

# NAME

ibv_create_qp_ex, ibv_destroy_qp - create or destroy a queue pair (QP)

# SYNOPSIS

    #include <infiniband/verbs.h>

    struct ibv_qp *ibv_create_qp_ex(struct ibv_context *context,
     struct ibv_qp_init_attr_ex *qp_init_attr);

    int ibv_destroy_qp(struct ibv_qp *qp);

# DESCRIPTION

**ibv_create_qp_ex()** creates a queue pair (QP) associated with the
protection domain *pd.* The argument *qp_init_attr_ex* is an
ibv_qp_init_attr_ex struct, as defined in \<infiniband/verbs.h\>.

    struct ibv_qp_init_attr_ex {
    void                   *qp_context;     /* Associated context of the QP */
    struct ibv_cq          *send_cq;        /* CQ to be associated with the Send Queue (SQ) */
    struct ibv_cq          *recv_cq;        /* CQ to be associated with the Receive Queue (RQ) */
    struct ibv_srq         *srq;            /* SRQ handle if QP is to be associated with an SRQ, otherwise NULL */
    struct ibv_qp_cap       cap;            /* QP capabilities */
    enum ibv_qp_type        qp_type;        /* QP Transport Service Type: IBV_QPT_RC, IBV_QPT_UC, IBV_QPT_UD, IBV_QPT_RAW_PACKET or IBV_QPT_DRIVER */
    int                     sq_sig_all;     /* If set, each Work Request (WR) submitted to the SQ generates a completion entry */
    uint32_t                comp_mask;	/* Identifies valid fields */
    struct ibv_pd          *pd;		/* PD to be associated with the QP */
    struct ibv_xrcd        *xrcd;		/* XRC domain to be associated with the target QP */
    enum ibv_qp_create_flags create_flags;	/* Creation flags for this QP */
    uint16_t                max_tso_header; /* Maximum TSO header size */
    struct ibv_rwq_ind_table *rwq_ind_tbl;  /* Indirection table to be associated with the QP */
    struct ibv_rx_hash_conf  rx_hash_conf;  /* RX hash configuration to be used */
    uint32_t                source_qpn;     /* Source QP number, creation flag IBV_QP_CREATE_SOURCE_QPN should be set, few NOTEs below */
    uint64_t                send_ops_flags; /* Select which QP send ops will be defined in struct ibv_qp_ex. Use enum ibv_qp_create_send_ops_flags */
    };

    struct ibv_qp_cap {
    uint32_t                max_send_wr;    /* Requested max number of outstanding WRs in the SQ */
    uint32_t                max_recv_wr;    /* Requested max number of outstanding WRs in the RQ */
    uint32_t                max_send_sge;   /* Requested max number of scatter/gather (s/g) elements in a WR in the SQ */
    uint32_t                max_recv_sge;   /* Requested max number of s/g elements in a WR in the RQ */
    uint32_t                max_inline_data;/* Requested max number of data (bytes) that can be posted inline to the SQ, otherwise 0 */
    };
    enum ibv_qp_create_flags {
    IBV_QP_CREATE_BLOCK_SELF_MCAST_LB       = 1 << 1, /* Prevent self multicast loopback */
    IBV_QP_CREATE_SCATTER_FCS               = 1 << 8, /* FCS field will be scattered to host memory */
    IBV_QP_CREATE_CVLAN_STRIPPING           = 1 << 9, /* CVLAN field will be stripped from incoming packets */
    IBV_QP_CREATE_SOURCE_QPN                = 1 << 10, /* The created QP will use the source_qpn as its wire QP number */
    IBV_QP_CREATE_PCI_WRITE_END_PADDING     = 1 << 11, /* Incoming packets will be padded to cacheline size */
    };

    struct ibv_rx_hash_conf {
    uint8_t                rx_hash_function;       /* RX hash function, use enum ibv_rx_hash_function_flags */
    uint8_t                rx_hash_key_len;        /* RX hash key length */
    uint8_t                *rx_hash_key;           /* RX hash key data */
    uint64_t               rx_hash_fields_mask;    /* RX fields that should participate in the hashing, use enum ibv_rx_hash_fields */
    };

    enum ibv_rx_hash_fields {
    IBV_RX_HASH_SRC_IPV4            = 1 << 0,
    IBV_RX_HASH_DST_IPV4            = 1 << 1,
    IBV_RX_HASH_SRC_IPV6            = 1 << 2,
    IBV_RX_HASH_DST_IPV6            = 1 << 3,
    IBV_RX_HASH_SRC_PORT_TCP        = 1 << 4,
    IBV_RX_HASH_DST_PORT_TCP        = 1 << 5,
    IBV_RX_HASH_SRC_PORT_UDP        = 1 << 6,
    IBV_RX_HASH_DST_PORT_UDP        = 1 << 7,
    IBV_RX_HASH_IPSEC_SPI           = 1 << 8,
    /* When using tunneling protocol, e.g. VXLAN, then we have an inner (encapsulated packet) and outer.
     * For applying RSS on the inner packet, then the following field should be set with one of the L3/L4 fields.
    */
    IBV_RX_HASH_INNER		= (1UL << 31),
    };

    struct ibv_qp_create_send_ops_flags {
    IBV_QP_EX_WITH_RDMA_WRITE		= 1 << 0,
    IBV_QP_EX_WITH_RDMA_WRITE_WITH_IMM	= 1 << 1,
    IBV_QP_EX_WITH_SEND			= 1 << 2,
    IBV_QP_EX_WITH_SEND_WITH_IMM		= 1 << 3,
    IBV_QP_EX_WITH_RDMA_READ		= 1 << 4,
    IBV_QP_EX_WITH_ATOMIC_CMP_AND_SWP	= 1 << 5,
    IBV_QP_EX_WITH_ATOMIC_FETCH_AND_ADD	= 1 << 6,
    IBV_QP_EX_WITH_LOCAL_INV		= 1 << 7,
    IBV_QP_EX_WITH_BIND_MW			= 1 << 8,
    IBV_QP_EX_WITH_SEND_WITH_INV		= 1 << 9,
    IBV_QP_EX_WITH_TSO			= 1 << 10,
    };

The function **ibv_create_qp_ex()** will update the
*qp_init_attr_ex-\>cap* struct with the actual QP values of the QP that
was created; the values will be greater than or equal to the values
requested.

**ibv_destroy_qp()** destroys the QP *qp.*

# RETURN VALUE

**ibv_create_qp_ex()** returns a pointer to the created QP, or NULL if
the request fails. Check the QP number (**qp_num**) in the returned QP.

**ibv_destroy_qp()** returns 0 on success, or the value of errno on
failure (which indicates the failure reason).

# NOTES

The attributes max_recv_wr and max_recv_sge are ignored by
**ibv_create_qp_ex()** if the QP is to be associated with an SRQ.

The attribute source_qpn is supported only on UD QP, without flow
steering RX should not be possible.

Use **ibv_qp_to_qp_ex()** to get the *ibv_qp_ex* for accessing the send
ops iterator interface, when QP create attr
IBV_QP_INIT_ATTR_SEND_OPS_FLAGS is used.

**ibv_destroy_qp()** fails if the QP is attached to a multicast group.

**IBV_QPT_DRIVER** does not represent a specific service and is used for
vendor specific QP logic.

# SEE ALSO

**ibv_alloc_pd**(3), **ibv_modify_qp**(3), **ibv_query_qp**(3),
**ibv_create_rwq_ind_table**(3)

# AUTHORS

Yishai Hadas \<yishaih@mellanox.com\>

请确保描述简洁明了，适合放在verbs.py中。输出中只需要含有python代码本身即可，无需含有说明性文字。