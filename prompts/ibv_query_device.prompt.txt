请补全以下函数对应的verb描述（用在verbs.py中）：

- ibv_query_device

请直接生成python代码，我之后会自行添加到verbs.py中。
函数详细信息：
Function Name: ibv_query_device
Output:
int ibv_query_device(struct ibv_context * context, struct ibv_device_attr * device_attr);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};
struct ibv_device_attr {
    char[64] fw_ver;
    __be64 node_guid;
    __be64 sys_image_guid;
    uint64_t max_mr_size;
    uint64_t page_size_cap;
    uint32_t vendor_id;
    uint32_t vendor_part_id;
    uint32_t hw_ver;
    int max_qp;
    int max_qp_wr;
    unsigned int device_cap_flags;
    int max_sge;
    int max_sge_rd;
    int max_cq;
    int max_cqe;
    int max_mr;
    int max_pd;
    int max_qp_rd_atom;
    int max_ee_rd_atom;
    int max_res_rd_atom;
    int max_qp_init_rd_atom;
    int max_ee_init_rd_atom;
    enum ibv_atomic_cap atomic_cap;
    enum ibv_atomic_cap {
        IBV_ATOMIC_NONE = 0,
        IBV_ATOMIC_HCA = 1,
        IBV_ATOMIC_GLOB = 2,
    };
    int max_ee;
    int max_rdd;
    int max_mw;
    int max_raw_ipv6_qp;
    int max_raw_ethy_qp;
    int max_mcast_grp;
    int max_mcast_qp_attach;
    int max_total_mcast_qp_attach;
    int max_ah;
    int max_fmr;
    int max_map_per_fmr;
    int max_srq;
    int max_srq_wr;
    int max_srq_sge;
    uint16_t max_pkeys;
    uint8_t local_ca_ack_delay;
    uint8_t phys_port_cnt;
};

函数相关文档：
---
date: 2006-10-31
section: 3
title: IBV_QUERY_DEVICE
---

# NAME

ibv_query_device - query an RDMA device\'s attributes

# SYNOPSIS

    #include <infiniband/verbs.h>

    int ibv_query_device(struct ibv_context *context,
     struct ibv_device_attr *device_attr);

# DESCRIPTION

**ibv_query_device()** returns the attributes of the device with context
*context.* The argument *device_attr* is a pointer to an ibv_device_attr
struct, as defined in \<infiniband/verbs.h\>.

    struct ibv_device_attr {
    char                    fw_ver[64];             /* FW version */
    uint64_t                node_guid;              /* Node GUID (in network byte order) */
    uint64_t                sys_image_guid;         /* System image GUID (in network byte order) */
    uint64_t                max_mr_size;            /* Largest contiguous block that can be registered */
    uint64_t                page_size_cap;          /* Supported memory shift sizes */
    uint32_t                vendor_id;              /* Vendor ID, per IEEE */
    uint32_t                vendor_part_id;         /* Vendor supplied part ID */
    uint32_t                hw_ver;                 /* Hardware version */
    int                     max_qp;                 /* Maximum number of supported QPs */
    int                     max_qp_wr;              /* Maximum number of outstanding WR on any work queue */
    unsigned int            device_cap_flags;       /* HCA capabilities mask */
    int                     max_sge;                /* Maximum number of s/g per WR for SQ & RQ of QP for non RDMA Read operations */
    int                     max_sge_rd;             /* Maximum number of s/g per WR for RDMA Read operations */
    int                     max_cq;                 /* Maximum number of supported CQs */
    int                     max_cqe;                /* Maximum number of CQE capacity per CQ */
    int                     max_mr;                 /* Maximum number of supported MRs */
    int                     max_pd;                 /* Maximum number of supported PDs */
    int                     max_qp_rd_atom;         /* Maximum number of RDMA Read & Atomic operations that can be outstanding per QP */
    int                     max_ee_rd_atom;         /* Maximum number of RDMA Read & Atomic operations that can be outstanding per EEC */
    int                     max_res_rd_atom;        /* Maximum number of resources used for RDMA Read & Atomic operations by this HCA as the Target */
    int                     max_qp_init_rd_atom;    /* Maximum depth per QP for initiation of RDMA Read & Atomic operations */ 
    int                     max_ee_init_rd_atom;    /* Maximum depth per EEC for initiation of RDMA Read & Atomic operations */
    enum ibv_atomic_cap     atomic_cap;             /* Atomic operations support level */
    int                     max_ee;                 /* Maximum number of supported EE contexts */
    int                     max_rdd;                /* Maximum number of supported RD domains */
    int                     max_mw;                 /* Maximum number of supported MWs */
    int                     max_raw_ipv6_qp;        /* Maximum number of supported raw IPv6 datagram QPs */
    int                     max_raw_ethy_qp;        /* Maximum number of supported Ethertype datagram QPs */
    int                     max_mcast_grp;          /* Maximum number of supported multicast groups */
    int                     max_mcast_qp_attach;    /* Maximum number of QPs per multicast group which can be attached */
    int                     max_total_mcast_qp_attach;/* Maximum number of QPs which can be attached to multicast groups */
    int                     max_ah;                 /* Maximum number of supported address handles */
    int                     max_fmr;                /* Maximum number of supported FMRs */
    int                     max_map_per_fmr;        /* Maximum number of (re)maps per FMR before an unmap operation in required */
    int                     max_srq;                /* Maximum number of supported SRQs */
    int                     max_srq_wr;             /* Maximum number of WRs per SRQ */
    int                     max_srq_sge;            /* Maximum number of s/g per SRQ */
    uint16_t                max_pkeys;              /* Maximum number of partitions */
    uint8_t                 local_ca_ack_delay;     /* Local CA ack delay */
    uint8_t                 phys_port_cnt;          /* Number of physical ports */
    };

# RETURN VALUE

**ibv_query_device()** returns 0 on success, or the value of errno on
failure (which indicates the failure reason).

# NOTES

The maximum values returned by this function are the upper limits of
supported resources by the device. However, it may not be possible to
use these maximum values, since the actual number of any resource that
can be created may be limited by the machine configuration, the amount
of host memory, user permissions, and the amount of resources already in
use by other users/processes.

# SEE ALSO

**ibv_open_device**(3), **ibv_query_port**(3), **ibv_query_pkey**(3),
**ibv_query_gid**(3)

# AUTHORS

Dotan Barak \<dotanba@gmail.com\>

请确保描述简洁明了，适合放在verbs.py中。输出中只需要含有python代码本身即可，无需含有说明性文字。