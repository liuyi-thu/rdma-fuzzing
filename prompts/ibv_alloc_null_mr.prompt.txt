请补全以下函数对应的verb描述（用在verbs.py中）：

- ibv_alloc_null_mr

请直接生成python代码，我之后会自行添加到verbs.py中。
函数详细信息：
Function Name: ibv_alloc_null_mr
Output:
struct ibv_mr * ibv_alloc_null_mr(struct ibv_pd * pd);
struct ibv_mr {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    void * addr;
    int length;
    uint32_t handle;
    uint32_t lkey;
    uint32_t rkey;
};

函数相关文档：
---
date: 2018-6-1
footer: libibverbs
header: "Libibverbs Programmer's Manual"
layout: page
license: 'Licensed under the OpenIB.org BSD license (FreeBSD Variant) - See COPYING.md'
section: 3
title: ibv_alloc_null_mr
---

# NAME

ibv_alloc_null_mr - allocate a null memory region (MR)

# SYNOPSIS

```c
#include <infiniband/verbs.h>

struct ibv_mr *ibv_alloc_null_mr(struct ibv_pd *pd);
```


# DESCRIPTION

**ibv_alloc_null_mr()** allocates a null memory region (MR) that is associated with the protection
domain *pd*.

A null MR discards all data written to it, and always returns 0 on
read. It has the maximum length and only the lkey is valid, the MR is not
exposed as an rkey.

A device should implement the null MR in a way that bypasses PCI
transfers, internally discarding or sourcing 0 data. This provides a
way to avoid PCI bus transfers by using a scatter/gather list in
commands if applications do not intend to access the data, or need
data to be 0 filled.

Specifically upon **ibv_post_send()** the device skips PCI read cycles and
upon **ibv_post_recv()** the device skips PCI write cycles which finally
improves performance.

**ibv_dereg_mr()** deregisters the MR.
The use of ibv_rereg_mr() or ibv_bind_mw()
with this MR is invalid.

# RETURN VALUE

**ibv_alloc_null_mr()** returns a pointer to the allocated MR, or NULL if the request fails.

# SEE ALSO

**ibv_reg_mr**(3),
**ibv_dereg_mr**(3),

# AUTHOR

Yonatan Cohen <yonatanc@mellanox.com>

请确保描述简洁明了，适合放在verbs.py中。输出中只需要含有python代码本身即可，无需含有说明性文字。