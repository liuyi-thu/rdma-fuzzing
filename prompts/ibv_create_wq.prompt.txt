请补全以下函数对应的verb描述（用在verbs.py中）：

- ibv_create_wq

请直接生成python代码，我之后会自行添加到verbs.py中。
函数详细信息：
Function Name: ibv_create_wq
Output:
struct ibv_wq * ibv_create_wq(struct ibv_context * context, struct ibv_wq_init_attr * wq_init_attr);
struct ibv_wq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * wq_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    uint32_t wq_num;
    uint32_t handle;
    enum ibv_wq_state state;
    enum ibv_wq_state {
        IBV_WQS_RESET = 0,
        IBV_WQS_RDY = 1,
        IBV_WQS_ERR = 2,
        IBV_WQS_UNKNOWN = 3,
    };
    enum ibv_wq_type wq_type;
    enum ibv_wq_type {
        IBV_WQT_RQ = 0,
    };
    int (*)(struct ibv_wq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
    uint32_t comp_mask;
};
struct ibv_wq_init_attr {
    void * wq_context;
    enum ibv_wq_type wq_type;
    uint32_t max_wr;
    uint32_t max_sge;
    struct ibv_pd * pd;
    struct ibv_cq * cq;
    uint32_t comp_mask;
    uint32_t create_flags;
};

函数相关文档：
---
date: 2016-07-27
section: 3
title: IBV_CREATE_WQ
---

# NAME

ibv_create_wq, ibv_destroy_wq - create or destroy a Work Queue (WQ).

# SYNOPSIS

    #include <infiniband/verbs.h>

    struct ibv_wq *ibv_create_wq(struct ibv_context *context,
     struct ibv_wq_init_attr *wq_init_attr);

    int ibv_destroy_wq(struct ibv_wq *wq);

# DESCRIPTION

**ibv_create_wq()** creates a WQ associated with the ibv_context
*context.* The argument *wq_init_attr* is an ibv_wq_init_attr struct, as
defined in \<infiniband/verbs.h\>.

    struct ibv_wq_init_attr {
    void                      *wq_context;    /* Associated context of the WQ */
    enum ibv_wq_type           wq_type;       /* WQ type */
    uint32_t                   max_wr;        /* Requested max number of outstanding WRs in the WQ */
    uint32_t                   max_sge;       /* Requested max number of scatter/gather (s/g) elements per WR in the WQ */
    struct  ibv_pd            *pd;            /* PD to be associated with the WQ */
    struct  ibv_cq            *cq;            /* CQ to be associated with the WQ */
    uint32_t                   comp_mask;     /* Identifies valid fields. Use ibv_wq_init_attr_mask */
    uint32_t                   create_flags    /* Creation flags for this WQ, use enum ibv_wq_flags */
    };


    enum ibv_wq_flags {
    IBV_WQ_FLAGS_CVLAN_STRIPPING            = 1 << 0, /* CVLAN field will be stripped from incoming packets */
    IBV_WQ_FLAGS_SCATTER_FCS                = 1 << 1, /* FCS field will be scattered to host memory */
    IBV_WQ_FLAGS_DELAY_DROP                 = 1 << 2, /* Packets won't be dropped immediately if no receive WQEs */
    IBV_WQ_FLAGS_PCI_WRITE_END_PADDING      = 1 << 3, /* Incoming packets will be padded to cacheline size */
    IBV_WQ_FLAGS_RESERVED                   = 1 << 4,
    };

The function **ibv_create_wq()** will update the *wq_init_attr-\>max_wr*
and *wq_init_attr-\>max_sge* fields with the actual WQ values of the WQ
that was created; the values will be greater than or equal to the values
requested.

**ibv_destroy_wq()** destroys the WQ *wq.*

# RETURN VALUE

**ibv_create_wq()** returns a pointer to the created WQ, or NULL if the
request fails.

**ibv_destroy_wq()** returns 0 on success, or the value of errno on
failure (which indicates the failure reason).

# SEE ALSO

**ibv_modify_wq**(3),

# AUTHORS

Yishai Hadas \<yishaih@mellanox.com\>

请确保描述简洁明了，适合放在verbs.py中。输出中只需要含有python代码本身即可，无需含有说明性文字。