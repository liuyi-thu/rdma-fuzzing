请补全以下函数对应的verb描述（用在verbs.py中）：

- ibv_poll_cq

请直接生成python代码，我之后会自行添加到verbs.py中。
函数详细信息：
Function Name: ibv_poll_cq
Output:
int ibv_poll_cq(struct ibv_cq * cq, int num_entries, struct ibv_wc * wc);
struct ibv_cq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
};
struct ibv_wc {
    uint64_t wr_id;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    enum ibv_wc_opcode opcode;
    enum ibv_wc_opcode {
        IBV_WC_SEND = 0,
        IBV_WC_RDMA_WRITE = 1,
        IBV_WC_RDMA_READ = 2,
        IBV_WC_COMP_SWAP = 3,
        IBV_WC_FETCH_ADD = 4,
        IBV_WC_BIND_MW = 5,
        IBV_WC_LOCAL_INV = 6,
        IBV_WC_TSO = 7,
        IBV_WC_FLUSH = 8,
        IBV_WC_ATOMIC_WRITE = 9,
        IBV_WC_RECV = 128,
        IBV_WC_RECV_RDMA_WITH_IMM = 129,
        IBV_WC_TM_ADD = 130,
        IBV_WC_TM_DEL = 131,
        IBV_WC_TM_SYNC = 132,
        IBV_WC_TM_RECV = 133,
        IBV_WC_TM_NO_TAG = 134,
        IBV_WC_DRIVER1 = 135,
        IBV_WC_DRIVER2 = 136,
        IBV_WC_DRIVER3 = 137,
    };
    uint32_t vendor_err;
    uint32_t byte_len;
    uint32_t qp_num;
    uint32_t src_qp;
    unsigned int wc_flags;
    uint16_t pkey_index;
    uint16_t slid;
    uint8_t sl;
    uint8_t dlid_path_bits;
};

函数相关文档：
---
date: 2006-10-31
section: 3
title: IBV_POLL_CQ
---

# NAME

ibv_poll_cq - poll a completion queue (CQ)

# SYNOPSIS

    #include <infiniband/verbs.h>

    int ibv_poll_cq(struct ibv_cq *cq, int num_entries,
     struct ibv_wc *wc);

# DESCRIPTION

**ibv_poll_cq()** polls the CQ *cq* for work completions and returns the
first *num_entries* (or all available completions if the CQ contains
fewer than this number) in the array *wc.* The argument *wc* is a
pointer to an array of ibv_wc structs, as defined in
\<infiniband/verbs.h\>.

    struct ibv_wc {
    uint64_t                wr_id;          /* ID of the completed Work Request (WR) */
    enum ibv_wc_status      status;         /* Status of the operation */
    enum ibv_wc_opcode      opcode;         /* Operation type specified in the completed WR */
    uint32_t                vendor_err;     /* Vendor error syndrome */
    uint32_t                byte_len;       /* Number of bytes transferred */
    union {
    __be32                  imm_data;         /* Immediate data (in network byte order) */
    uint32_t                invalidated_rkey; /* Local RKey that was invalidated */
    };
    uint32_t                qp_num;         /* Local QP number of completed WR */
    uint32_t                src_qp;         /* Source QP number (remote QP number) of completed WR (valid only for UD QPs) */
    unsigned int            wc_flags;       /* Flags of the completed WR */
    uint16_t                pkey_index;     /* P_Key index (valid only for GSI QPs) */
    uint16_t                slid;           /* Source LID */
    uint8_t                 sl;             /* Service Level */
    uint8_t                 dlid_path_bits; /* DLID path bits (not applicable for multicast messages) */
    };

The attribute wc_flags describes the properties of the work completion.
It is either 0 or the bitwise OR of one or more of the following flags:

**IBV_WC_GRH GRH is present (valid only for UD QPs)**

:   

    **IBV_WC_WITH_IMM Immediate data value is valid**

    :   

        **IBV_WC_WITH_INV Invalidated RKey data value is valid (cannot be combined with IBV_WC_WITH_IMM)**

        :   

            **IBV_WC_IP_CSUM_OK TCP/UDP checksum over IPv4 and IPv4 header checksum are**

            :   verified. Valid only when **device_cap_flags** in
                device_attr indicates current QP is supported by
                checksum offload.

Not all *wc* attributes are always valid. If the completion status is
other than **IBV_WC_SUCCESS,** only the following attributes are valid:
wr_id, status, qp_num, and vendor_err.

# RETURN VALUE

On success, **ibv_poll_cq()** returns a non-negative value equal to the
number of completions found. On failure, a negative value is returned.

# NOTES

Each polled completion is removed from the CQ and cannot be returned to
it.

The user should consume work completions at a rate that prevents CQ
overrun from occurrence. In case of a CQ overrun, the async event
**IBV_EVENT_CQ_ERR** will be triggered, and the CQ cannot be used.

IBV_WC_DRIVER1 will be reported as a response to IBV_WR_DRIVER1 opcode;
IBV_WC_DRIVER2/IBV_WC_DRIVER3 will be reported on specific driver
operations.

# SEE ALSO

**ibv_post_send**(3), **ibv_post_recv**(3)

# AUTHORS

Dotan Barak \<dotanba@gmail.com\>

请确保描述简洁明了，适合放在verbs.py中。输出中只需要含有python代码本身即可，无需含有说明性文字。