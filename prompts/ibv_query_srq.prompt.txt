请补全以下函数对应的verb描述（用在verbs.py中）：

- ibv_query_srq

请直接生成python代码，我之后会自行添加到verbs.py中。
函数详细信息：
Function Name: ibv_query_srq
Output:
int ibv_query_srq(struct ibv_srq * srq, struct ibv_srq_attr * srq_attr);
struct ibv_srq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * srq_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    uint32_t handle;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_srq_attr {
    uint32_t max_wr;
    uint32_t max_sge;
    uint32_t srq_limit;
};

函数相关文档：
---
date: 2006-10-31
section: 3
title: IBV_QUERY_SRQ
---

# NAME

ibv_query_srq - get the attributes of a shared receive queue (SRQ)

# SYNOPSIS

    #include <infiniband/verbs.h>

    int ibv_query_srq(struct ibv_srq *srq, struct ibv_srq_attr *srq_attr);

# DESCRIPTION

**ibv_query_srq()** gets the attributes of the SRQ *srq* and returns
them through the pointer *srq_attr.* The argument *srq_attr* is an
ibv_srq_attr struct, as defined in \<infiniband/verbs.h\>.

    struct ibv_srq_attr {
    uint32_t                max_wr;         /* maximum number of outstanding work requests (WRs) in the SRQ */
    uint32_t                max_sge;        /* maximum number of scatter elements per WR */
    uint32_t                srq_limit;      /* the limit value of the SRQ */
    };

# RETURN VALUE

**ibv_query_srq()** returns 0 on success, or the value of errno on
failure (which indicates the failure reason).

# NOTES

If the value returned for srq_limit is 0, then the SRQ limit reached
(\"low watermark\") event is not (or no longer) armed, and no
asynchronous events will be generated until the event is rearmed.

# SEE ALSO

**ibv_create_srq**(3), **ibv_destroy_srq**(3), **ibv_modify_srq**(3)

# AUTHORS

Dotan Barak \<dotanba@gmail.com\>

请确保描述简洁明了，适合放在verbs.py中。输出中只需要含有python代码本身即可，无需含有说明性文字。