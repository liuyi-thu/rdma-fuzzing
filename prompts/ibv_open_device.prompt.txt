请补全以下函数对应的verb描述（用在verbs.py中）：

- ibv_open_device

请直接生成python代码，我之后会自行添加到verbs.py中。
函数详细信息：
Function Name: ibv_open_device
Output:
struct ibv_context * ibv_open_device(struct ibv_device * device);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};

函数相关文档：
---
date: 2006-10-31
section: 3
title: IBV_OPEN_DEVICE
---

# NAME

ibv_open_device, ibv_close_device - open and close an RDMA device
context

# SYNOPSIS

    #include <infiniband/verbs.h>

    struct ibv_context *ibv_open_device(struct ibv_device *device");

    int ibv_close_device(struct ibv_context *context");

# DESCRIPTION

**ibv_open_device()** opens the device *device* and creates a context
for further use.

**ibv_close_device()** closes the device context *context.*

# RETURN VALUE

**ibv_open_device()** returns a pointer to the allocated device context,
or NULL if the request fails.

**ibv_close_device()** returns 0 on success, -1 on failure.

# NOTES

**ibv_close_device()** does not release all the resources allocated
using context *context.* To avoid resource leaks, the user should
release all associated resources before closing a context.

Setting the environment variable \*\*RDMAV_ALLOW_DISASSOC_DESTROY\*\*
tells the library to relate an EIO from destroy commands as a success as
the kernel resources were already released. This comes to prevent memory
leakage in the user space area upon device disassociation. Applications
using this flag cannot call ibv_get_cq_event or ibv_get_async_event
concurrently with any call to an object destruction function.

# SEE ALSO

**ibv_get_device_list**(3), **ibv_query_device**(3),
**ibv_query_port**(3), **ibv_query_gid**(3), **ibv_query_pkey**(3)

# AUTHORS

Dotan Barak \<dotanba@gmail.com\>

请确保描述简洁明了，适合放在verbs.py中。输出中只需要含有python代码本身即可，无需含有说明性文字。