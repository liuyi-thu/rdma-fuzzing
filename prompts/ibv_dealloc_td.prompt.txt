请补全以下函数对应的verb描述（用在verbs.py中）：

- ibv_dealloc_td

请直接生成python代码，我之后会自行添加到verbs.py中。
函数详细信息：
Function Name: ibv_dealloc_td
Output:
int ibv_dealloc_td(struct ibv_td * td);
struct ibv_td {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
};

函数相关文档：
---
date: 2017-11-06
section: 3
title: IBV_ALLOC_TD
---

# NAME

ibv_alloc_td(), ibv_dealloc_td() - allocate and deallocate thread domain
object

# SYNOPSIS

    #include <infiniband/verbs.h>

    struct ibv_td *ibv_alloc_td(struct ibv_context *context,
     struct ibv_td_init_attr *init_attr);

    int ibv_dealloc_td(struct ibv_td *td);

# DESCRIPTION

**ibv_alloc_td()** allocates a thread domain object for the RDMA device
context *context.*

The thread domain object defines how the verbs libraries and provider
will use locks and additional hardware capabilities to achieve best
performance for handling multi-thread or single-thread protection. An
application assigns verbs resources to a thread domain when it creates a
verbs object.

If the *ibv_td* object is specified then any objects created under this
thread domain will disable internal locking designed to protect against
concurrent access to that object from multiple user threads. By default
all verbs objects are safe for multi-threaded access, whether or not a
thread domain is specified.

A *struct ibv_td* can be added to a parent domain via
**ibv_alloc_parent_domain()** and then the parent domain can be used to
create verbs objects.

**ibv_dealloc_td()** will deallocate the thread domain *td.* All
resources created with the *td* should be destroyed prior to
deallocating the *td.*

# RETURN VALUE

**ibv_alloc_td()** returns a pointer to the allocated struct *ibv_td*
object, or NULL if the request fails (and sets errno to indicate the
failure reason).

**ibv_dealloc_td()** returns 0 on success, or the value of errno on
failure (which indicates the failure reason).

# SEE ALSO

**ibv_alloc_parent_domain**(3),

# AUTHORS

Alex Rosenbaum \<alexr@mellanox.com\>

:   

Yishai Hadas \<yishaih@mellanox.com\>

请确保描述简洁明了，适合放在verbs.py中。输出中只需要含有python代码本身即可，无需含有说明性文字。