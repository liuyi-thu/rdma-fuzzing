请补全以下函数对应的verb描述（用在verbs.py中）：

- ibv_post_srq_recv

请直接生成python代码，我之后会自行添加到verbs.py中。
函数详细信息：
Function Name: ibv_post_srq_recv
Output:
int ibv_post_srq_recv(struct ibv_srq * srq, struct ibv_recv_wr * recv_wr, struct ibv_recv_wr ** bad_recv_wr);
struct ibv_srq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * srq_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    uint32_t handle;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_recv_wr {
    uint64_t wr_id;
    struct ibv_recv_wr * next;
    struct ibv_sge * sg_list;
    struct ibv_sge {
        uint64_t addr;
        uint32_t length;
        uint32_t lkey;
    };
    int num_sge;
};

函数相关文档：
---
date: 2006-10-31
section: 3
title: IBV_POST_SRQ_RECV
---

# NAME

ibv_post_srq_recv - post a list of work requests (WRs) to a shared
receive queue (SRQ)

# SYNOPSIS

    #include <infiniband/verbs.h>

    int ibv_post_srq_recv(struct ibv_srq *srq, struct ibv_recv_wr *wr,
     struct ibv_recv_wr **bad_wr);

# DESCRIPTION

**ibv_post_srq_recv()** posts the linked list of work requests (WRs)
starting with *wr* to the shared receive queue (SRQ) *srq.* It stops
processing WRs from this list at the first failure (that can be detected
immediately while requests are being posted), and returns this failing
WR through *bad_wr.*

The argument *wr* is an ibv_recv_wr struct, as defined in
\<infiniband/verbs.h\>.

    struct ibv_recv_wr {
    uint64_t                wr_id;     /* User defined WR ID */
    struct ibv_recv_wr     *next;      /* Pointer to next WR in list, NULL if last WR */
    struct ibv_sge         *sg_list;   /* Pointer to the s/g array */
    int                     num_sge;   /* Size of the s/g array */
    };

    struct ibv_sge {
    uint64_t                addr;      /* Start address of the local memory buffer */
    uint32_t                length;    /* Length of the buffer */
    uint32_t                lkey;      /* Key of the local Memory Region */
    };

# RETURN VALUE

**ibv_post_srq_recv()** returns 0 on success, or the value of errno on
failure (which indicates the failure reason).

# NOTES

The buffers used by a WR can only be safely reused after WR the request
is fully executed and a work completion has been retrieved from the
corresponding completion queue (CQ).

If a WR is being posted to a UD QP, the Global Routing Header (GRH) of
the incoming message will be placed in the first 40 bytes of the
buffer(s) in the scatter list. If no GRH is present in the incoming
message, then the first bytes will be undefined. This means that in all
cases, the actual data of the incoming message will start at an offset
of 40 bytes into the buffer(s) in the scatter list.

# SEE ALSO

**ibv_create_qp**(3), **ibv_post_send**(3), **ibv_post_recv**(3),
**ibv_poll_cq**(3)

# AUTHORS

Dotan Barak \<dotanba@gmail.com\>

请确保描述简洁明了，适合放在verbs.py中。输出中只需要含有python代码本身即可，无需含有说明性文字。