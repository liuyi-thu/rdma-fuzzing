请补全以下函数对应的verb描述（用在verbs.py中）：

- ibv_post_srq_ops

请直接生成python代码，我之后会自行添加到verbs.py中。
函数详细信息：
Function Name: ibv_post_srq_ops
Output:
int ibv_post_srq_ops(struct ibv_srq * srq, struct ibv_ops_wr * op, struct ibv_ops_wr ** bad_op);
struct ibv_srq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * srq_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    uint32_t handle;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_ops_wr {
    uint64_t wr_id;
    struct ibv_ops_wr * next;
    enum ibv_ops_wr_opcode opcode;
    enum ibv_ops_wr_opcode {
        IBV_WR_TAG_ADD = 0,
        IBV_WR_TAG_DEL = 1,
        IBV_WR_TAG_SYNC = 2,
    };
    int flags;
    struct (unnamed struct at verbs.h:1223:2) tm;
};

函数相关文档：
---
date: 2017-03-26
section: 3
title: IBV_POST_SRQ_OPS
---

# NAME

ibv_post_srq_ops - perform on a special shared receive queue (SRQ)
configuration manipulations

# SYNOPSIS

    #include <infiniband/verbs.h>

    int ibv_post_srq_ops(struct ibv_srq *srq, struct ibv_ops_wr *wr,
     struct ibv_ops_wr **bad_wr);

# DESCRIPTION

The **ibv_post_srq_ops()** performs series of offload configuration
manipulations on special types of SRQ *srq. Currenlty it is used to
configure tag matching SRQ. Series of configuration* operations defined
by linked lists of struct ibv_ops_wr elements starting from *wr.*

    struct ibv_ops_wr {
    uint64_t                wr_id;   /* User defined WR ID */
    /* Pointer to next WR in list, NULL if last WR */
    struct ibv_ops_wr      *next;
    enum ibv_ops_wr_opcode  opcode;  /* From enum ibv_ops_wr_opcode */
    int                     flags;   /* From enum ibv_ops_flags */
    struct {
    /* Number of unexpected messages
     * handled by SW */
    uint32_t unexpected_cnt;
    /* Input parameter for the DEL opcode
     * and output parameter for the ADD opcode */
    uint32_t handle;
    struct {
    uint64_t                recv_wr_id;   /* User defined WR ID for TM_RECV */
    struct ibv_sge         *sg_list; /* Pointer to the s/g array */
    int                     num_sge; /* Size of the s/g array */
    uint64_t                tag;
    uint64_t                mask;    /* Incoming message considered matching if
                                        TMH.tag & entry.mask == entry.tag */
    } add;
    } tm;
    };

First part of struct ibv_ops_wr retains ibv_send_wr notion. Opcode
defines operation to perform. Currently supported IBV_WR_TAG_ADD,
IBV_WR_TAG_DEL and IBV_WR_TAG_SYNC values. See below for detailed
description.

To allow reliable data delivery TM SRQ maintains special low level
synchronization primitive - phase synchronization. Receive side message
handling comprises two concurrent activities - posting tagged buffers by
SW and receiving incoming messages by HW. This process considered
coherent only if all unexpected messages received by HW is completely
processed in SW. To pass to hardware number of processed unexpected
messages unexpected_cnt field should be used and IBV_OPS_TM_SYNC flag
should be set.

To request WC for tag list operations IBV_OPS_SIGNALED flags should be
passed. In this case WC will be generated on TM SRQ\'s CQ, provided
wr_id will identify WC.

Opcode IBV_WR_TAG_ADD used to add tag entry to tag matching list. Tag
entry consists of SGE list, tag & mask (matching parameters), user
specified opaque wr_id (passed via recv_wr_id field) and uniquely
identified by handle (returned by driver). Size of tag matching list is
limited by max_num_tags. SGE list size is limited by max_sge.

Opcode IBV_WR_TAG_DEL removes previously added tag entry. Field handle
should be set to value returned by previously performed IBV_WR_TAG_ADD
operation. Operation may fail due to concurrent tag consumption - in
this case IBV_WC_TM_ERR status will be returned in WC.

Opcode IBV_WR_TAG_SYNC may be used if no changes to matching list
required, just to updated unexpected messages counter.

IBV_WC_TM_SYNC_REQ flag returned in list operation WC shows that counter
synchronization required. This flag also may be returned by unexpected
receive WC, asking for IBV_WR_TAG_SYNC operation to keep TM coherence
consistency.

# RETURN VALUE

**ibv_post_srq_ops()** returns 0 on success, or the value of errno on
failure (which indicates the failure reason).

# SEE ALSO

**ibv_create_srq_ex**(3),

# AUTHORS

Artemy Kovalyov \<artemyko@mellanox.com\>

请确保描述简洁明了，适合放在verbs.py中。输出中只需要含有python代码本身即可，无需含有说明性文字。