// AUTOGEN: RDMA client (pairs + runtime) — generated by your fuzzer
// Toolchain: g++ -O2 -std=c++17 {{compile_units}} -libverbs -pthread -o {{output_name}}

#include <infiniband/verbs.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <thread>
#include <vector>
#include <string>
#include <algorithm>
#include <unistd.h>

#include "pair_runtime.h"
#include "runtime_resolver.h"

using std::string;
using std::vector;

static void die(const char* m){ perror(m); exit(1); }

// --------- User-configurable knobs (autofilled by generator) ----------
static const int IB_PORT = {{ ib_port|default(1) }};
static const int MSG_SIZE = {{ msg_size|default(1024) }};
static const char* BUNDLE_ENV = "{{ bundle_env|default('RDMA_FUZZ_RUNTIME') }}";
static const char* CLIENT_UPDATE_PATH = "{{ client_update|default('client_update.json') }}";

// --------- Prolog helper (optional; you can keep minimal) -------------
{{ prolog_extra|default('') }}

// --- Prepare PR_* for CLAIMED ---
PR_QP  qps[{{ length }}];
PR_MR  mrs[{{ length }}];
PR_Pair prs[{{ length }}];
int  qps_size;
int  mrs_size;
int  prs_size;

// ---------------------- main ----------------------
int main(int argc, char** argv){
    pr_init(BUNDLE_ENV);

    // --- Local buffers / MRs / QPs (generated) ---
    {{ setup_region|default('') }}

    // --- Optional early verbs (don’t need remote params; e.g., PostRecv) ---
    {{ early_verbs_region|default('') }}

    // --- Main verbs body (generated) ---
    {{ verbs_region|default('') }}

    // --- Optional CQ polling / cleanup (generated or static) ---
    {{ epilog_region|default('') }}

    return 0;
}
