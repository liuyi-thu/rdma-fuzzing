import random
# from ..codegen_context import CodeGenContext
import sys
sys.path.append("..")  # Adjust path to import CodeGenContext
from codegen_context import CodeGenContext

class IbvQPCap:
    def __init__(self, max_send_wr=16, max_recv_wr=16, max_send_sge=1, max_recv_sge=1, max_inline_data=0):
        self.max_send_wr = max_send_wr
        self.max_recv_wr = max_recv_wr
        self.max_send_sge = max_send_sge
        self.max_recv_sge = max_recv_sge
        self.max_inline_data = max_inline_data

    @classmethod
    def random_mutation(cls):
        return cls(
            max_send_wr=random.choice([0, 1, 16, 1024, 2**16]),
            max_recv_wr=random.choice([0, 1, 16, 1024, 2**16]),
            max_send_sge=random.choice([0, 1, 2, 16]),
            max_recv_sge=random.choice([0, 1, 2, 16]),
            max_inline_data=random.choice([0, 1, 64, 256, 4096]),
        )
        
    def to_cxx(self, varname, ctx : CodeGenContext = None):
        if ctx:
            ctx.alloc_variable(varname, "struct ibv_qp_cap")
        return f"""
    struct ibv_qp_cap {varname};
    {varname}.max_send_wr = {self.max_send_wr};
    {varname}.max_recv_wr = {self.max_recv_wr};
    {varname}.max_send_sge = {self.max_send_sge};
    {varname}.max_recv_sge = {self.max_recv_sge};
    {varname}.max_inline_data = {self.max_inline_data};
"""

class IbvGlobalRoute:
    def __init__(self, dgid=None, flow_label=0, sgid_index=0, hop_limit=0, traffic_class=0):
        self.dgid = dgid if dgid else IbvGID.random_mutation()
        self.flow_label = flow_label
        self.sgid_index = sgid_index
        self.hop_limit = hop_limit
        self.traffic_class = traffic_class
        
    @classmethod
    def random_mutation(cls):
        return cls(
            dgid=IbvGID.random_mutation(),
            flow_label=random.randint(0, 0xfffff),
            sgid_index=random.randint(0, 16),
            hop_limit=random.randint(0, 255),
            traffic_class=random.randint(0, 255)
        )

    def to_cxx(self, varname, ctx : CodeGenContext = None):
        if ctx:
            ctx.alloc_variable(varname, "struct ibv_global_route")
        dgid_var = varname + "_dgid"
        dgid_decl = self.dgid.to_cxx(dgid_var, ctx)
        return dgid_decl + f"""
    struct ibv_global_route {varname};
    {varname}.dgid = {dgid_var};
    {varname}.flow_label = {self.flow_label};
    {varname}.sgid_index = {self.sgid_index};
    {varname}.hop_limit = {self.hop_limit};
    {varname}.traffic_class = {self.traffic_class};
"""

class IbvAHAttr:
    def __init__(self, grh=None, dlid=0, sl=0, src_path_bits=0, static_rate=0, is_global=0, port_num=1):
        self.grh = grh if grh else IbvGlobalRoute.random_mutation()
        self.dlid = dlid
        self.sl = sl
        self.src_path_bits = src_path_bits
        self.static_rate = static_rate
        self.is_global = is_global
        self.port_num = port_num

    @classmethod
    def random_mutation(cls):
        return cls(
            grh=IbvGlobalRoute.random_mutation(),
            dlid=random.randint(0, 0xffff),
            sl=random.randint(0, 15),
            src_path_bits=random.randint(0, 7),
            static_rate=random.randint(0, 31),
            is_global=random.randint(0, 1),
            port_num=random.randint(1, 2)
        )
        
    def to_cxx(self, varname, ctx : CodeGenContext = None):
        if ctx:
            ctx.alloc_variable(varname, "struct ibv_ah_attr")
        grh_var = varname + "_grh"
        grh_decl = self.grh.to_cxx(grh_var, ctx)
        return grh_decl + f"""
    struct ibv_ah_attr {varname};
    {varname}.grh = {grh_var};
    {varname}.dlid = {self.dlid};
    {varname}.sl = {self.sl};
    {varname}.src_path_bits = {self.src_path_bits};
    {varname}.static_rate = {self.static_rate};
    {varname}.is_global = {self.is_global};
    {varname}.port_num = {self.port_num};
"""

# union/bitfields等C++可用memcpy或手动赋值
class IbvGID:
    def __init__(self, raw=None):
        self.raw = raw if raw else [random.randint(0, 255) for _ in range(16)]
    @classmethod
    def random_mutation(cls):
        return cls(raw=[random.randint(0, 255) for _ in range(16)])
    def to_cxx(self, varname, ctx : CodeGenContext = None):
        if ctx:
            ctx.alloc_variable(varname, "union ibv_gid")
        arr = ', '.join(str(x) for x in self.raw)
        return f"""
    union ibv_gid {varname};
    memcpy({varname}.raw, (uint8_t[]){{ {arr} }}, 16);
"""

class IbvQPAttr:
    def __init__(self, qp_state=0, cur_qp_state=0, path_mtu=3, path_mig_state=0,
                 qkey=0, rq_psn=0, sq_psn=0, dest_qp_num=0, qp_access_flags=0,
                 cap=None, ah_attr=None, alt_ah_attr=None, pkey_index=0, alt_pkey_index=0,
                 en_sqd_async_notify=0, sq_draining=0, max_rd_atomic=1, max_dest_rd_atomic=1,
                 min_rnr_timer=0, port_num=1, timeout=14, retry_cnt=7, rnr_retry=7,
                 alt_port_num=1, alt_timeout=14, rate_limit=0):
        self.qp_state = qp_state
        self.cur_qp_state = cur_qp_state
        self.path_mtu = path_mtu
        self.path_mig_state = path_mig_state
        self.qkey = qkey
        self.rq_psn = rq_psn
        self.sq_psn = sq_psn
        self.dest_qp_num = dest_qp_num
        self.qp_access_flags = qp_access_flags
        self.cap = cap if cap else IbvQPCap()
        self.ah_attr = ah_attr if ah_attr else IbvAHAttr()
        self.alt_ah_attr = alt_ah_attr if alt_ah_attr else IbvAHAttr()
        self.pkey_index = pkey_index
        self.alt_pkey_index = alt_pkey_index
        self.en_sqd_async_notify = en_sqd_async_notify
        self.sq_draining = sq_draining
        self.max_rd_atomic = max_rd_atomic
        self.max_dest_rd_atomic = max_dest_rd_atomic
        self.min_rnr_timer = min_rnr_timer
        self.port_num = port_num
        self.timeout = timeout
        self.retry_cnt = retry_cnt
        self.rnr_retry = rnr_retry
        self.alt_port_num = alt_port_num
        self.alt_timeout = alt_timeout
        self.rate_limit = rate_limit
        
    @classmethod
    def random_mutation(cls):
        return cls(
            qp_state=random.choice([0, 1, 2, 3, 4, 5]),
            cur_qp_state=random.choice([0, 1, 2, 3, 4, 5]),
            path_mtu=random.choice([1, 2, 3, 4, 5]),
            path_mig_state=random.choice([0, 1, 2]),
            qkey=random.randint(0, 2**32-1),
            rq_psn=random.randint(0, 2**24-1),
            sq_psn=random.randint(0, 2**24-1),
            dest_qp_num=random.randint(0, 2**24-1),
            qp_access_flags=random.choice([0, 1, 7, 0xdeadbeef]),
            cap=IbvQPCap.random_mutation(),
            ah_attr=IbvAHAttr.random_mutation(),
            alt_ah_attr=IbvAHAttr.random_mutation(),
            pkey_index=random.randint(0, 128),
            alt_pkey_index=random.randint(0, 128),
            en_sqd_async_notify=random.randint(0, 1),
            sq_draining=random.randint(0, 1),
            max_rd_atomic=random.randint(0, 16),
            max_dest_rd_atomic=random.randint(0, 16),
            min_rnr_timer=random.randint(0, 31),
            port_num=random.choice([1, 2]),
            timeout=random.choice([0, 1, 14, 30]),
            retry_cnt=random.choice([0, 1, 7]),
            rnr_retry=random.choice([0, 1, 7]),
            alt_port_num=random.choice([1, 2]),
            alt_timeout=random.choice([0, 1, 14, 30]),
            rate_limit=random.randint(0, 0xfffff)
        )

    def to_cxx(self, varname, ctx : CodeGenContext = None):
        if ctx:
            ctx.alloc_variable(varname, "struct ibv_qp_attr")
        cap_var = varname + "_cap"
        ah_var = varname + "_ah"
        alt_ah_var = varname + "_alt_ah"
        cap_decl = self.cap.to_cxx(cap_var, ctx)
        ah_decl = self.ah_attr.to_cxx(ah_var, ctx)
        alt_ah_decl = self.alt_ah_attr.to_cxx(alt_ah_var, ctx)
        return cap_decl + ah_decl + alt_ah_decl + f"""
    struct ibv_qp_attr {varname};
    {varname}.qp_state = {self.qp_state};
    {varname}.cur_qp_state = {self.cur_qp_state};
    {varname}.path_mtu = {self.path_mtu};
    {varname}.path_mig_state = {self.path_mig_state};
    {varname}.qkey = {self.qkey};
    {varname}.rq_psn = {self.rq_psn};
    {varname}.sq_psn = {self.sq_psn};
    {varname}.dest_qp_num = {self.dest_qp_num};
    {varname}.qp_access_flags = {self.qp_access_flags};
    {varname}.cap = {cap_var};
    {varname}.ah_attr = {ah_var};
    {varname}.alt_ah_attr = {alt_ah_var};
    {varname}.pkey_index = {self.pkey_index};
    {varname}.alt_pkey_index = {self.alt_pkey_index};
    {varname}.en_sqd_async_notify = {self.en_sqd_async_notify};
    {varname}.sq_draining = {self.sq_draining};
    {varname}.max_rd_atomic = {self.max_rd_atomic};
    {varname}.max_dest_rd_atomic = {self.max_dest_rd_atomic};
    {varname}.min_rnr_timer = {self.min_rnr_timer};
    {varname}.port_num = {self.port_num};
    {varname}.timeout = {self.timeout};
    {varname}.retry_cnt = {self.retry_cnt};
    {varname}.rnr_retry = {self.rnr_retry};
    {varname}.alt_port_num = {self.alt_port_num};
    {varname}.alt_timeout = {self.alt_timeout};
    {varname}.rate_limit = {self.rate_limit};
"""

# 用法示例
if __name__ == "__main__":
    # random.seed(42)  # For reproducibility
    attr = IbvQPAttr().random_mutation()
    print(attr.to_cxx("attr"))