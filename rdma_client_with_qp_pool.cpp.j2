// 修改后的 rdma_client_with_qp_pool.c
// 支持通过 socket 向控制器发送每个 QP 和其 MR 的信息（QPN, addr, rkey）

#include <infiniband/verbs.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <cjson/cJSON.h>
#include <iostream>
#include <map>
#include <sys/time.h>

using namespace std;

#define QP_POOL_SIZE 10
#define RECV_POOL_SIZE 16
#define MSG_SIZE 128
#define CTRL_PORT 12345
#define MR_POOL_SIZE 1000
#define REMOTE_QP_POOL_SIZE 1000
#define IB_PORT 1
#define GID_INDEX 1
#define MAX_POLL_CQ_TIMEOUT 2000

typedef struct
{
    uint64_t wr_id;
    char *buf;
    struct ibv_mr *mr;
    int in_use;
} recv_slot_t;

typedef struct
{
    recv_slot_t slots[RECV_POOL_SIZE];
    struct ibv_pd *pd;
} RecvBufferPool;

typedef struct
{
    struct ibv_qp *qp;
    RecvBufferPool recv_pool;
} QPWithBufferPool;

void init_recv_pool(RecvBufferPool *pool, struct ibv_pd *pd)
{
    pool->pd = pd;
    for (int i = 0; i < RECV_POOL_SIZE; ++i)
    {
        pool->slots[i].buf = static_cast<char *>(malloc(MSG_SIZE));
        pool->slots[i].mr = ibv_reg_mr(pd, pool->slots[i].buf, MSG_SIZE, IBV_ACCESS_LOCAL_WRITE | IBV_ACCESS_REMOTE_WRITE | IBV_ACCESS_REMOTE_READ);
        pool->slots[i].wr_id = (uint64_t)i;
        pool->slots[i].in_use = 0;
    }
}

void post_all_recvs(RecvBufferPool *pool, struct ibv_qp *qp)
{
    for (int i = 0; i < RECV_POOL_SIZE; ++i)
    {
        struct ibv_sge sge = {
            .addr = (uintptr_t)pool->slots[i].buf,
            .length = MSG_SIZE,
            .lkey = pool->slots[i].mr->lkey};
        struct ibv_recv_wr wr = {
            .wr_id = pool->slots[i].wr_id,
            .sg_list = &sge,
            .num_sge = 1};
        struct ibv_recv_wr *bad_wr;
        if (ibv_post_recv(qp, &wr, &bad_wr) == 0)
            pool->slots[i].in_use = 1;
    }
}

struct metadata_global
{
    uint16_t lid;
    uint8_t gid[16];
};

struct metadata_qp
{
    uint32_t qpn;
    uintptr_t addr;
    uint32_t rkey;
};

struct metadata_mr
{
    uintptr_t addr;
    uint32_t rkey;
};

struct metadata_pair
{
    uint32_t remote_qpn;
    uint32_t local_qpn;
};

struct pair_request
{
    uint32_t remote_qp_index;
    uint32_t local_qpn;
};


// ----- GLOBAL VARIABLES -----
struct metadata_mr MRPool[MR_POOL_SIZE];
int mr_pool_size = 0;

struct metadata_global remote_info;

map<int, int> local_remote_qp_map; // 用于存储本地 QP 和远程 QP 的映射关系
map<int, int> qpn_to_index_map;    // 用于存储 QPN 到索引的映射

QPWithBufferPool qp_pool[QP_POOL_SIZE];

struct ibv_context *{{ ctx }};
struct ibv_device **{{ dev_list }};
struct ibv_device_attr {{ dev_attr }};
struct ibv_port_attr {{ port_attr }};
struct ibv_pd *pd[{{ max_QPs }}];
struct ibv_cq *cq[{{ max_QPs }}];
struct ibv_qp *qp[{{ max_QPs }}];
struct ibv_mr *mr[{{ max_QPs }}];
struct ibv_srq *srq[{{ max_QPs }}]; // SRQ 数组

char bufs[{{ max_QPs }}][1024];
struct pair_request req;

struct ibv_qp_attr qp_attr;

struct ibv_wc wc;
unsigned long start_time_msec;
unsigned long cur_time_msec;
struct timeval cur_time;
int poll_result;
int rc = 0;

// ----- FUNCTION DECLARATIONS -----


int main()
{
    // --- VARIABLES BEGIN ---

    {{ variable_definitions }}

    // ---- VARIABLES END ----

    // ---- BODY BEGIN ----
    {{ body }}
    // ---- BODY END ----

    return 0;
}
