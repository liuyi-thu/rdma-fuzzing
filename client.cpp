// AUTOGEN: RDMA client (pairs + runtime) — generated by your fuzzer
// Toolchain: g++ -O2 -std=c++17 pair_runtime.cpp runtime_resolver.c -lcjson -libverbs -pthread -o rdma_client_autogen

#include <infiniband/verbs.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <thread>
#include <vector>
#include <string>
#include <algorithm>
#include <unistd.h>

#include "pair_runtime.h"
#include "runtime_resolver.h"

using std::string;
using std::vector;

static void die(const char* m){ perror(m); exit(1); }

// --------- User-configurable knobs (autofilled by generator) ----------
static const int IB_PORT = 1;
static const int MSG_SIZE = 1024;
static const char* BUNDLE_ENV = "RDMA_FUZZ_RUNTIME";
static const char* CLIENT_UPDATE_PATH = "client_update.json";

// --------- Prolog helper (optional; you can keep minimal) -------------
char bufs[1024][1024];
struct ibv_device ** dev_list;
struct ibv_context * ctx;
struct ibv_device_attr dev_attr;
struct ibv_port_attr port_attr;
union ibv_gid gid;
struct ibv_pd * pd0 = NULL;
struct ibv_pd * pd1 = NULL;
struct ibv_dm * dm0;
struct ibv_dm * dm1;
struct ibv_srq * srq0;
struct ibv_cq * cq0 = NULL;
struct ibv_cq * cq1 = NULL;
struct ibv_mr * mr0 = NULL;
struct ibv_mr * mr1 = NULL;
struct ibv_qp * qp0 = NULL;
struct ibv_alloc_dm_attr dm_attr_dm0;
struct ibv_alloc_dm_attr dm_attr_dm1;
struct ibv_srq_init_attr srq_init_attr_0;
struct ibv_srq_attr srq_init_attr_0_attr;
struct ibv_modify_cq_attr modify_cq_attr;
struct ibv_qp_init_attr attr_init_qp0;
struct ibv_qp_cap attr_init_qp0_cap;
struct ibv_srq_attr srq_attr_srq0;
struct ibv_recv_wr recv_wr_srq0;
struct ibv_sge recv_wr_srq0_sges[1];
struct ibv_sge recv_wr_srq0_sges[0];
struct ibv_recv_wr * bad_recv_wr_srq0 = NULL;

// --- Prepare PR_* for CLAIMED ---
PR_QP  qps[1000];
PR_MR  mrs[1000];
PR_Pair prs[1000];
int  qps_size;
int  mrs_size;
int  prs_size;

// ---------------------- main ----------------------
int main(int argc, char** argv){
    pr_init(BUNDLE_ENV);

    // --- Local buffers / MRs / QPs (generated) ---
    /* setup generated by verbs (alloc/reg/create) moved here if你把这些也用 generate_c 产出 */

    // --- Optional early verbs (don’t need remote params; e.g., PostRecv) ---
    

    // --- Main verbs body (generated) ---
        printf("[1] GetDeviceList(dev_list=dev_list) start.\n");

    /* ibv_get_device_list */
    dev_list = ibv_get_device_list(NULL);
    if (!dev_list) {
        fprintf(stderr, "Failed to get device list: %s\n", strerror(errno));
        return -1;
    }
    printf("[1] done.\n");

    printf("[2] OpenDevice(device=dev_list) start.\n");

    /* ibv_open_device */
    ctx = ibv_open_device(dev_list[0]);
    if (!ctx) {
        fprintf(stderr, "Failed to open device\n");
        return -1;
    }
    printf("[2] done.\n");

    printf("[3] FreeDeviceList(dev_list=dev_list, context=<lib.codegen_context.CodeGenContext object at...) start.\n");

    /* ibv_free_device_list */
    ibv_free_device_list(dev_list);
    printf("[3] done.\n");

    printf("[4] QueryDeviceAttr(output=dev_attr) start.\n");

    /* ibv_query_device */
    if (ibv_query_device(ctx, &dev_attr)) {
        fprintf(stderr, "Failed to query device attributes\n");
        return -1;
    }
    printf("[4] done.\n");

    printf("[5] QueryPortAttr(port_num=1) start.\n");

    /* ibv_query_port */
    if (ibv_query_port(ctx, 1, &port_attr)) {
        fprintf(stderr, "Failed to query port attributes\n");
        return -1;
    }
    printf("[5] done.\n");

    printf("[6] QueryGID(port_num=1, index=1) start.\n");

    /* ibv_query_gid */
    if (ibv_query_gid(ctx, 1, 1, &gid)) {
        fprintf(stderr, "Failed to query GID\n");
        return -1;
    }
    printf("[6] done.\n");

    printf("[7] AllocPD(pd=pd0) start.\n");

    /* ibv_alloc_pd */
    pd0 = ibv_alloc_pd(ctx);
    if (!pd0) {
        fprintf(stderr, "Failed to allocate protection domain\n");
        return -1;
    }
    printf("[7] done.\n");

    printf("[8] AllocPD(pd=pd1) start.\n");

    /* ibv_alloc_pd */
    pd1 = ibv_alloc_pd(ctx);
    if (!pd1) {
        fprintf(stderr, "Failed to allocate protection domain\n");
        return -1;
    }
    printf("[8] done.\n");

    printf("[9] AllocDM(dm=dm0, attr_obj=IbvAllocDmAttr{length=4096, log_align_req=12}, attr_var=dm_attr_dm0) start.\n");

    memset(&dm_attr_dm0, 0, sizeof(dm_attr_dm0));
    dm_attr_dm0.length = 4096;
    dm_attr_dm0.log_align_req = 12;

    dm0 = ibv_alloc_dm(ctx, &dm_attr_dm0);
    if (!dm0) {
        fprintf(stderr, "Failed to allocate device memory (DM)\n");
        return -1;
    }
    printf("[9] done.\n");

    printf("[10] AllocDM(dm=dm1, attr_obj=IbvAllocDmAttr{length=4096, log_align_req=12}, attr_var=dm_attr_dm1) start.\n");

    memset(&dm_attr_dm1, 0, sizeof(dm_attr_dm1));
    dm_attr_dm1.length = 4096;
    dm_attr_dm1.log_align_req = 12;

    dm1 = ibv_alloc_dm(ctx, &dm_attr_dm1);
    if (!dm1) {
        fprintf(stderr, "Failed to allocate device memory (DM)\n");
        return -1;
    }
    printf("[10] done.\n");

    printf("[11] CreateSRQ(pd=pd0, srq=srq0, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{}}) start.\n");

    /* ibv_create_srq */
    
    memset(&srq_init_attr_0, 0, sizeof(srq_init_attr_0));

    memset(&srq_init_attr_0_attr, 0, sizeof(srq_init_attr_0_attr));
    srq_init_attr_0.attr = srq_init_attr_0_attr;

    srq0 = ibv_create_srq(pd0, &srq_init_attr_0);
    if (!srq0) {
        fprintf(stderr, "Failed to create SRQ\n");
        return -1;
    }
    printf("[11] done.\n");

    printf("[12] CreateCQ(cqe=32, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq0) start.\n");

    /* ibv_create_cq */
    cq0 = ibv_create_cq(ctx, 32, 
                              NULL, NULL, 
                              0);
    if (!cq0) {
        fprintf(stderr, "Failed to create completion queue\n");
        return -1;
    }
    printf("[12] done.\n");

    printf("[13] CreateCQ(cqe=32, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq1) start.\n");

    /* ibv_create_cq */
    cq1 = ibv_create_cq(ctx, 32, 
                              NULL, NULL, 
                              0);
    if (!cq1) {
        fprintf(stderr, "Failed to create completion queue\n");
        return -1;
    }
    printf("[13] done.\n");

    printf("[14] ModifyCQ(cq=cq0, attr_obj=IbvModifyCQAttr{}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));

    if (ibv_modify_cq(cq0, &modify_cq_attr) != 0) {
        fprintf(stderr, "ibv_modify_cq failed\n");
        return -1;
    }
    printf("[14] done.\n");

    printf("[15] RegMR(pd=pd0, mr=mr0, addr=bufs[0], length=1024, access=IBV_ACCESS_LOCAL_WRITE | IBV_ACCESS_REMOTE_RE...) start.\n");

    /* ibv_reg_mr */
    mr0 = ibv_reg_mr(pd0, bufs[0], 1024, IBV_ACCESS_LOCAL_WRITE | IBV_ACCESS_REMOTE_READ | IBV_ACCESS_REMOTE_WRITE);
    if (!mr0) {
        fprintf(stderr, "Failed to register memory region\n");
        return -1;
    }
    
    mrs[mrs_size++] = (PR_MR){
        .id = "mr0",
        .addr = (uint64_t)(mr0->addr),
        .length = 1024,
        .lkey = mr0->lkey};
        
    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
    
    printf("[15] done.\n");

    printf("[16] RegMR(pd=pd1, mr=mr1, addr=bufs[1], length=1024, access=IBV_ACCESS_LOCAL_WRITE | IBV_ACCESS_REMOTE_RE...) start.\n");

    /* ibv_reg_mr */
    mr1 = ibv_reg_mr(pd1, bufs[1], 1024, IBV_ACCESS_LOCAL_WRITE | IBV_ACCESS_REMOTE_READ | IBV_ACCESS_REMOTE_WRITE);
    if (!mr1) {
        fprintf(stderr, "Failed to register memory region\n");
        return -1;
    }
    
    mrs[mrs_size++] = (PR_MR){
        .id = "mr1",
        .addr = (uint64_t)(mr1->addr),
        .length = 1024,
        .lkey = mr1->lkey};
        
    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
    
    printf("[16] done.\n");

    printf("[17] CreateQP(pd=pd0, qp=qp0, init_attr_obj=IbvQPInitAttr{send_cq=cq0, recv_cq=cq0, qp_type=IBV_QPT_RC, cap=IbvQPCap{max_send_wr=1, max_recv_wr=1, max_send_sge=1, max_recv_sge=1}, sq_sig_all=1}) start.\n");

    /* ibv_create_qp */
    
    memset(&attr_init_qp0, 0, sizeof(attr_init_qp0));
    attr_init_qp0.send_cq = cq0;
    attr_init_qp0.recv_cq = cq0;

    memset(&attr_init_qp0_cap, 0, sizeof(attr_init_qp0_cap));
    attr_init_qp0_cap.max_send_wr = 1;
    attr_init_qp0_cap.max_recv_wr = 1;
    attr_init_qp0_cap.max_send_sge = 1;
    attr_init_qp0_cap.max_recv_sge = 1;
    attr_init_qp0.cap = attr_init_qp0_cap;
    attr_init_qp0.qp_type = IBV_QPT_RC;
    attr_init_qp0.sq_sig_all = 1;

    qp0 = ibv_create_qp(pd0, &attr_init_qp0);
    if (!qp0) {
        fprintf(stderr, "Failed to create QP\n");
        return -1;
    }
    
    qps[qps_size++] = (PR_QP){
        .id = "qp0",
        .qpn = qp0->qp_num,
        .psn = 0,
        .port = 1,
        .lid = 0,
        .gid = "" // will set below
    };
    
    snprintf(qps[qps_size-1].gid, sizeof(qps[qps_size-1].gid),
                 "%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x",
                 gid.raw[0], gid.raw[1], gid.raw[2], gid.raw[3], gid.raw[4], gid.raw[5], gid.raw[6], gid.raw[7], gid.raw[8], gid.raw[9], gid.raw[10], gid.raw[11], gid.raw[12], gid.raw[13], gid.raw[14], gid.raw[15]);
                 
    prs[prs_size++] = (PR_Pair){
        .id = "pair-qp0-srv0",
        .cli_id = "qp0",
        .srv_id = "srv0"
    };
    
    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
    printf("[17] done.\n");

    printf("[18] DestroyQP(qp=qp0) start.\n");

    /* ibv_destroy_qp */
    if (ibv_destroy_qp(qp0)) {
        fprintf(stderr, "Failed to destroy QP\n");
        return -1;
    }
    printf("[18] done.\n");

    printf("[19] ModifySRQ(srq=srq0, attr_var=srq_attr_srq0, attr_obj=IbvSrqAttr{max_wr=1024, max_sge=1}, attr_mask=0) start.\n");

    memset(&srq_attr_srq0, 0, sizeof(srq_attr_srq0));
    srq_attr_srq0.max_wr = 1024;
    srq_attr_srq0.max_sge = 1;

    if (ibv_modify_srq(srq0, &srq_attr_srq0, 0) != 0) {
        fprintf(stderr, "ibv_modify_srq failed\n");
        return -1;
    }
    printf("[19] done.\n");

    printf("[20] PostSRQRecv(srq=srq0, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=\u2205, length=\u2205, lkey=\u2205}], wr_id=1}, wr_var=recv_wr_srq0, bad_wr_var=bad_recv_wr_srq0) start.\n");

    memset(&recv_wr_srq0, 0, sizeof(recv_wr_srq0));
    recv_wr_srq0.wr_id = 1;

    memset(&recv_wr_srq0_sges[0], 0, sizeof(recv_wr_srq0_sges[0]));
    recv_wr_srq0.sg_list = recv_wr_srq0_sges;
    recv_wr_srq0.num_sge = 1;
    recv_wr_srq0.next = NULL;

    if (ibv_post_srq_recv(srq0, &recv_wr_srq0, &bad_recv_wr_srq0) != 0) {
        fprintf(stderr, "ibv_post_srq_recv failed\n");
        return -1;
    }
    printf("[20] done.\n");

    printf("[21] PollCQ(cq=cq0) start.\n");

        /* ibv_poll_cq — self-contained minimal polling */
        {
            struct ibv_wc wc;
            int n = 0;
            int attempts = 100;   /* ~100 * 100us ≈ 10ms */
            while (attempts-- > 0) {
                n = ibv_poll_cq(cq0, 1, &wc);
                if (n < 0) {
                    fprintf(stderr, "ibv_poll_cq failed\n");
                    return -1;
                }
                if (n == 1) {
                    if (wc.status != IBV_WC_SUCCESS) {
                        fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                                wc.status, wc.vendor_err);
                        return -1;
                    }
                    /* success – got one completion */
                    break;
                }
                /* n == 0: no CQE yet, back off briefly */
                usleep(100); /* 100us */
            }
            if (n == 0) {
                fprintf(stderr, "no completion within budget\n");
                return -1;
            }
        }
        printf("[21] done.\n");

    printf("[22] DestroyCQ(cq=cq0) start.\n");

    /* ibv_destroy_cq */
    if (ibv_destroy_cq(cq0)) {
        fprintf(stderr, "Failed to destroy CQ\n");
        return -1;
    }
    printf("[22] done.\n");

    printf("[23] DestroySRQ(srq=srq0) start.\n");

    /* ibv_destroy_srq */
    if (ibv_destroy_srq(srq0) != 0) {
        fprintf(stderr, "Failed to destroy SRQ\n");
        return -1;
    }
    printf("[23] done.\n");

    printf("[24] DeregMR(mr=mr0) start.\n");

    /* ibv_dereg_mr */
    if (ibv_dereg_mr(mr0)) {
        fprintf(stderr, "Failed to deregister MR\n");
        return -1;
    }
    printf("[24] done.\n");

    printf("[25] DeallocPD(pd=pd0) start.\n");

    /* ibv_dealloc_pd */
    if (ibv_dealloc_pd(pd0)) {
        fprintf(stderr, "Failed to deallocate PD \n");
        return -1;
    }
    printf("[25] done.\n");

    printf("[26] FreeDM(dm=dm0) start.\n");

    /* ibv_free_dm */
    if (ibv_free_dm(dm0)) {
        fprintf(stderr, "Failed to free device memory (DM)\n");
        return -1;
    }
    printf("[26] done.\n");



    // --- Optional CQ polling / cleanup (generated or static) ---
    /* optional CQ polling & cleanup */

    return 0;
}