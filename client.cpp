// AUTOGEN: RDMA client (pairs + runtime) — generated by your fuzzer
// Toolchain: g++ -O2 -std=c++17 pair_runtime.cpp runtime_resolver.c -lcjson -libverbs -pthread -o rdma_client_autogen

#include <infiniband/verbs.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <thread>
#include <vector>
#include <string>
#include <algorithm>
#include <unistd.h>

#include "pair_runtime.h"
#include "runtime_resolver.h"

using std::string;
using std::vector;

/* ---- fuzz-friendly guards ---- */
static inline int res_ok_ptr(const void *p, const char *what) {
    if (!p) {
        fprintf(stderr, "[skip] missing resource: %s\n", what);
        return 0;
    }
    return 1;
}

#define IF_OK_PTR(p, ...)                            \
    do {                                             \
        if (res_ok_ptr((p), #p)) {                   \
            __VA_ARGS__                              \
        }                                            \
    } while (0)

/* 布尔哨兵变量帮助宏：声明、置位 */
#define DECL_OK(name)   int ok_##name = 0
#define SET_OK(name,v)  do { ok_##name = ((v) != NULL); } while (0)
#define IF_OK(name, CODE_BLOCK) \
    do { if (ok_##name) { CODE_BLOCK } } while (0)

static void die(const char* m){ perror(m); exit(1); }

// --------- User-configurable knobs (autofilled by generator) ----------
static const int IB_PORT = 1;
static const int MSG_SIZE = 1024;
static const char* BUNDLE_ENV = "RDMA_FUZZ_RUNTIME";
static const char* CLIENT_UPDATE_PATH = "client_update.json";

// --------- Prolog helper (optional; you can keep minimal) -------------
char bufs[1024][1024];
struct ibv_device ** dev_list;
struct ibv_context * ctx;
struct ibv_device_attr dev_attr;
struct ibv_port_attr port_attr;
union ibv_gid gid;
struct ibv_pd * pd0 = NULL;
struct ibv_pd * pd1 = NULL;
struct ibv_dm * dm0;
struct ibv_dm * dm1;
struct ibv_srq * srq0;
struct ibv_cq * cq0 = NULL;
struct ibv_cq * cq1 = NULL;
struct ibv_mr * mr0 = NULL;
struct ibv_mr * mr1 = NULL;
struct ibv_qp * qp0 = NULL;
struct ibv_alloc_dm_attr dm_attr_dm0;
struct ibv_alloc_dm_attr dm_attr_dm1;
struct ibv_srq_init_attr srq_init_attr_0;
struct ibv_srq_attr srq_init_attr_0_attr;
struct ibv_modify_cq_attr modify_cq_attr;
struct ibv_qp_init_attr attr_init_qp0;
struct ibv_qp_cap attr_init_qp0_cap;
struct ibv_qp_attr qp_attr_qp0;
struct ibv_ah_attr qp_attr_qp0_ah;
struct ibv_global_route qp_attr_qp0_ah_grh;
struct ibv_srq_attr srq_attr_srq0;
struct ibv_send_wr wr_qp0;
struct ibv_sge wr_qp0_sg_list[1];
struct ibv_send_wr * bad_wr_qp0 = NULL;
struct ibv_recv_wr recv_wr_qp0;
struct ibv_sge recv_wr_qp0_sg_list[2];
struct ibv_recv_wr recv_wr_qp0_next;
struct ibv_sge recv_wr_qp0_next_sg_list[2];
struct ibv_recv_wr * bad_recv_wr_qp0 = NULL;
struct ibv_recv_wr recv_wr_srq0;
struct ibv_sge recv_wr_srq0_sg_list[1];
struct ibv_recv_wr * bad_recv_wr_srq0 = NULL;

// --- Prepare PR_* for CLAIMED ---
PR_QP  qps[1000];
PR_MR  mrs[1000];
PR_Pair prs[1000];
int  qps_size;
int  mrs_size;
int  prs_size;

// ---------------------- main ----------------------
int main(int argc, char** argv){
    pr_init(BUNDLE_ENV);

    // --- Local buffers / MRs / QPs (generated) ---
    /* setup generated by verbs (alloc/reg/create) moved here if你把这些也用 generate_c 产出 */

    // --- Optional early verbs (don’t need remote params; e.g., PostRecv) ---
    

    // --- Main verbs body (generated) ---
        printf("[1] GetDeviceList(dev_list=dev_list) start.\n");

    /* ibv_get_device_list */
    dev_list = ibv_get_device_list(NULL);
    if (!dev_list) {
        fprintf(stderr, "Failed to get device list: %s\n", strerror(errno));
        return -1;
    }
    printf("[1] done.\n");

    printf("[2] OpenDevice(device=dev_list) start.\n");

    /* ibv_open_device */
    ctx = ibv_open_device(dev_list[0]);
    if (!ctx) {
        fprintf(stderr, "Failed to open device dev_list\n");
    }
    printf("[2] done.\n");

    printf("[3] FreeDeviceList(dev_list=dev_list, context=<lib.codegen_context.CodeGenContext object at...) start.\n");

    /* ibv_free_device_list */
    ibv_free_device_list(dev_list);
    printf("[3] done.\n");

    printf("[4] QueryDeviceAttr(output=dev_attr) start.\n");

    /* ibv_query_device */
    if (ibv_query_device(ctx, &dev_attr)) {
        fprintf(stderr, "Failed to query device attributes\n");
        return -1;
    }
    printf("[4] done.\n");

    printf("[5] QueryPortAttr(port_num=1) start.\n");

    /* ibv_query_port */
    if (ibv_query_port(ctx, 1, &port_attr)) {
        fprintf(stderr, "Failed to query port attributes\n");
        return -1;
    }
    printf("[5] done.\n");

    printf("[6] QueryGID(port_num=1, index=1) start.\n");

    /* ibv_query_gid */
    if (ibv_query_gid(ctx, 1, 1, &gid)) {
        fprintf(stderr, "Failed to query GID\n");
        return -1;
    }
    printf("[6] done.\n");

    printf("[7] AllocPD(pd=pd0) start.\n");

    /* ibv_alloc_pd */
    pd0 = ibv_alloc_pd(ctx);
    if (!pd0) {
        fprintf(stderr, "Failed to allocate protection domain pd0\n");
    }
    printf("[7] done.\n");

    printf("[8] AllocPD(pd=pd1) start.\n");

    /* ibv_alloc_pd */
    pd1 = ibv_alloc_pd(ctx);
    if (!pd1) {
        fprintf(stderr, "Failed to allocate protection domain pd1\n");
    }
    printf("[8] done.\n");

    printf("[9] AllocDM(dm=dm0, attr_obj=IbvAllocDmAttr{length=4096, log_align_req=12}, attr_var=dm_attr_dm0) start.\n");

    memset(&dm_attr_dm0, 0, sizeof(dm_attr_dm0));
    dm_attr_dm0.length = 4096;
    dm_attr_dm0.log_align_req = 12;

    dm0 = ibv_alloc_dm(ctx, &dm_attr_dm0);
    if (!dm0) {
        fprintf(stderr, "Failed to allocate device memory (DM) dm0\n");
    }
    printf("[9] done.\n");

    printf("[10] AllocDM(dm=dm1, attr_obj=IbvAllocDmAttr{length=4096, log_align_req=12}, attr_var=dm_attr_dm1) start.\n");

    memset(&dm_attr_dm1, 0, sizeof(dm_attr_dm1));
    dm_attr_dm1.length = 4096;
    dm_attr_dm1.log_align_req = 12;

    dm1 = ibv_alloc_dm(ctx, &dm_attr_dm1);
    if (!dm1) {
        fprintf(stderr, "Failed to allocate device memory (DM) dm1\n");
    }
    printf("[10] done.\n");

    printf("[11] CreateSRQ(pd=pd0, srq=srq0, srq_init_obj=IbvSrqInitAttr{attr=IbvSrqAttr{}}) start.\n");

    /* ibv_create_srq */
    IF_OK_PTR(pd0, {
        
    memset(&srq_init_attr_0, 0, sizeof(srq_init_attr_0));

    memset(&srq_init_attr_0_attr, 0, sizeof(srq_init_attr_0_attr));
    srq_init_attr_0.attr = srq_init_attr_0_attr;

        srq0 = ibv_create_srq(pd0, &srq_init_attr_0);
        if (!srq0) {
            fprintf(stderr, "Failed to create SRQ srq0\n");
        }
    });
    printf("[11] done.\n");

    printf("[12] CreateCQ(cqe=32, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq0) start.\n");

    /* ibv_create_cq */
    cq0 = ibv_create_cq(ctx, 32, 
                              NULL, NULL, 
                              0);
    if (!cq0) {
        fprintf(stderr, "Failed to create completion queue cq0\n");
    }
    printf("[12] done.\n");

    printf("[13] CreateCQ(cqe=32, cq_context=NULL, channel=NULL, comp_vector=0, cq=cq1) start.\n");

    /* ibv_create_cq */
    cq1 = ibv_create_cq(ctx, 32, 
                              NULL, NULL, 
                              0);
    if (!cq1) {
        fprintf(stderr, "Failed to create completion queue cq1\n");
    }
    printf("[13] done.\n");

    printf("[14] ModifyCQ(cq=cq0, attr_obj=IbvModifyCQAttr{}, attr_var=modify_cq_attr) start.\n");

    memset(&modify_cq_attr, 0, sizeof(modify_cq_attr));

    IF_OK_PTR(cq0, {
        if (ibv_modify_cq(cq0, &modify_cq_attr) != 0) {
            fprintf(stderr, "ibv_modify_cq failed cq0\n");
        }
    });
    printf("[14] done.\n");

    printf("[15] RegMR(pd=pd0, mr=mr0, addr=bufs[0], length=1024, access=IBV_ACCESS_LOCAL_WRITE | IBV_ACCESS_REMOTE_RE...) start.\n");

    /* ibv_reg_mr */
    mr0 = ibv_reg_mr(pd0, bufs[0], 1024, IBV_ACCESS_LOCAL_WRITE | IBV_ACCESS_REMOTE_READ | IBV_ACCESS_REMOTE_WRITE);
    if (!mr0) {
        fprintf(stderr, "Failed to register memory region mr0\n");
    }
    
    IF_OK_PTR(mr0, {
        mrs[mrs_size++] = (PR_MR){
            .id = "mr0",
            .addr = (uint64_t)(mr0->addr),
            .length = 1024,
            .lkey = mr0->lkey
        };
        pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
    });
    
    printf("[15] done.\n");

    printf("[16] RegMR(pd=pd1, mr=mr1, addr=bufs[1], length=1024, access=IBV_ACCESS_LOCAL_WRITE | IBV_ACCESS_REMOTE_RE...) start.\n");

    /* ibv_reg_mr */
    mr1 = ibv_reg_mr(pd1, bufs[1], 1024, IBV_ACCESS_LOCAL_WRITE | IBV_ACCESS_REMOTE_READ | IBV_ACCESS_REMOTE_WRITE);
    if (!mr1) {
        fprintf(stderr, "Failed to register memory region mr1\n");
    }
    
    IF_OK_PTR(mr1, {
        mrs[mrs_size++] = (PR_MR){
            .id = "mr1",
            .addr = (uint64_t)(mr1->addr),
            .length = 1024,
            .lkey = mr1->lkey
        };
        pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
    });
    
    printf("[16] done.\n");

    printf("[17] CreateQP(pd=pd0, qp=qp0, init_attr_obj=IbvQPInitAttr{send_cq=cq0, recv_cq=cq0, qp_type=IBV_QPT_RC, cap=IbvQPCap{max_send_wr=1, max_recv_wr=1, max_send_sge=1, max_recv_sge=1}, sq_sig_all=1}, remote_qp=srv0) start.\n");

    /* ibv_create_qp */
    IF_OK_PTR(pd0, {
        
    memset(&attr_init_qp0, 0, sizeof(attr_init_qp0));
    attr_init_qp0.send_cq = cq0;
    attr_init_qp0.recv_cq = cq0;

    memset(&attr_init_qp0_cap, 0, sizeof(attr_init_qp0_cap));
    attr_init_qp0_cap.max_send_wr = 1;
    attr_init_qp0_cap.max_recv_wr = 1;
    attr_init_qp0_cap.max_send_sge = 1;
    attr_init_qp0_cap.max_recv_sge = 1;
    attr_init_qp0.cap = attr_init_qp0_cap;
    attr_init_qp0.qp_type = IBV_QPT_RC;
    attr_init_qp0.sq_sig_all = 1;

        qp0 = ibv_create_qp(pd0, &attr_init_qp0);
        if (!qp0) {
            fprintf(stderr, "Failed to create QP qp0\n");
        }
        
        IF_OK_PTR(qp0, {
            qps[qps_size++] = (PR_QP){
                .id = "qp0",
                .qpn = qp0->qp_num,
                .psn = 0,
                .port = 1,
                .lid = 0,
                .gid = "" // will set below
            };
            
            snprintf(qps[qps_size-1].gid, sizeof(qps[qps_size-1].gid),
                        "%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x",
                        gid.raw[0], gid.raw[1], gid.raw[2], gid.raw[3], gid.raw[4], gid.raw[5], gid.raw[6], gid.raw[7], gid.raw[8], gid.raw[9], gid.raw[10], gid.raw[11], gid.raw[12], gid.raw[13], gid.raw[14], gid.raw[15]);
                        
            prs[prs_size++] = (PR_Pair){
                .id = "pair-qp0-srv0",
                .cli_id = "qp0",
                .srv_id = "srv0"
            };
            
            pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, qps_size, mrs, mrs_size, prs, prs_size);
        });
    });
    printf("[17] done.\n");

    printf("[18] ModifyQP(qp=qp0, attr_obj=IbvQPAttr{qp_state=IBV_QPS_INIT, dest_qp_num=rr_u32_by_id(\"remote.QP\", \"srv0\", \"qpn\"), port_num=1, qp_access_flags=IBV_ACCESS_REMOTE_READ | IBV_ACCESS_REMOTE_WR..., pkey_index=0}, attr_mask=IBV_QP_STATE | IBV_QP_PKEY_INDEX | IBV_QP_POR...) start.\n");

    IF_OK_PTR(qp0, {
        
        memset(&qp_attr_qp0, 0, sizeof(qp_attr_qp0));
        
    memset(&qp_attr_qp0, 0, sizeof(qp_attr_qp0));
    qp_attr_qp0.qp_state = IBV_QPS_INIT;
    qp_attr_qp0.dest_qp_num = rr_u32_by_id("remote.QP", "srv0", "qpn");
    qp_attr_qp0.qp_access_flags = IBV_ACCESS_REMOTE_READ | IBV_ACCESS_REMOTE_WRITE | IBV_ACCESS_LOCAL_WRITE;
    qp_attr_qp0.pkey_index = 0;
    qp_attr_qp0.port_num = 1;

        if (ibv_modify_qp(qp0, &qp_attr_qp0, IBV_QP_STATE | IBV_QP_PKEY_INDEX | IBV_QP_PORT | IBV_QP_ACCESS_FLAGS)) {
            fprintf(stderr, "Failed to modify QP qp0\n");
        }
    });
            printf("[18] done.\n");

    printf("[19] ModifyQP(qp=qp0, attr_obj=IbvQPAttr{qp_state=IBV_QPS_RTR, path_mtu=IBV_MTU_1024, dest_qp_num=rr_u32_by_id(\"remote.QP\", \"srv0\", \"qpn\"), rq_psn=0, max_dest_rd_atomic=1, min_rnr_timer=12, ah_attr=IbvAHAttr{dlid=rr_u32_by_id(\"remote.QP\", \"srv0\", \"lid\"), is_global=1, port_num=rr_u32_by_id(\"remote.QP\", \"srv0\", \"port\"), grh=IbvGlobalRoute{sgid_index=1, hop_limit=1, traffic_class=0, flow_label=0, dgid=rr_str_by_id(\"remote.QP\", \"srv0\", \"gid\")}, sl=0, src_path_bits=0}}, attr_mask=IBV_QP_STATE | IBV_QP_AV | IBV_QP_PATH_MTU | ...) start.\n");

    IF_OK_PTR(qp0, {
        pr_wait_pair_state(BUNDLE_ENV, "pair-qp0-srv0", "BOTH_RTS", /*timeout_ms=*/15000);
        memset(&qp_attr_qp0, 0, sizeof(qp_attr_qp0));
        
    memset(&qp_attr_qp0, 0, sizeof(qp_attr_qp0));
    qp_attr_qp0.qp_state = IBV_QPS_RTR;
    qp_attr_qp0.path_mtu = IBV_MTU_1024;
    qp_attr_qp0.rq_psn = 0;
    qp_attr_qp0.dest_qp_num = rr_u32_by_id("remote.QP", "srv0", "qpn");

    memset(&qp_attr_qp0_ah, 0, sizeof(qp_attr_qp0_ah));

    memset(&qp_attr_qp0_ah_grh, 0, sizeof(qp_attr_qp0_ah_grh));
    pr_parse_gid(rr_str_by_id("remote.QP", "srv0", "gid"), qp_attr_qp0_ah_grh.dgid.raw);
    qp_attr_qp0_ah_grh.flow_label = 0;
    qp_attr_qp0_ah_grh.sgid_index = 1;
    qp_attr_qp0_ah_grh.hop_limit = 1;
    qp_attr_qp0_ah_grh.traffic_class = 0;
    qp_attr_qp0_ah.grh = qp_attr_qp0_ah_grh;
    qp_attr_qp0_ah.dlid = rr_u32_by_id("remote.QP", "srv0", "lid");
    qp_attr_qp0_ah.sl = 0;
    qp_attr_qp0_ah.src_path_bits = 0;
    qp_attr_qp0_ah.is_global = 1;
    qp_attr_qp0_ah.port_num = rr_u32_by_id("remote.QP", "srv0", "port");
    qp_attr_qp0.ah_attr = qp_attr_qp0_ah;
    qp_attr_qp0.max_dest_rd_atomic = 1;
    qp_attr_qp0.min_rnr_timer = 12;

        if (ibv_modify_qp(qp0, &qp_attr_qp0, IBV_QP_STATE | IBV_QP_AV | IBV_QP_PATH_MTU | IBV_QP_DEST_QPN | IBV_QP_RQ_PSN | IBV_QP_MAX_DEST_RD_ATOMIC | IBV_QP_MIN_RNR_TIMER)) {
            fprintf(stderr, "Failed to modify QP qp0\n");
        }
    });
            printf("[19] done.\n");

    printf("[20] ModifyQP(qp=qp0, attr_obj=IbvQPAttr{qp_state=IBV_QPS_RTS, dest_qp_num=rr_u32_by_id(\"remote.QP\", \"srv0\", \"qpn\"), sq_psn=0, timeout=14, retry_cnt=7, rnr_retry=7, max_rd_atomic=1}, attr_mask=IBV_QP_STATE | IBV_QP_TIMEOUT | IBV_QP_RETRY_...) start.\n");

    IF_OK_PTR(qp0, {
        
        memset(&qp_attr_qp0, 0, sizeof(qp_attr_qp0));
        
    memset(&qp_attr_qp0, 0, sizeof(qp_attr_qp0));
    qp_attr_qp0.qp_state = IBV_QPS_RTS;
    qp_attr_qp0.sq_psn = 0;
    qp_attr_qp0.dest_qp_num = rr_u32_by_id("remote.QP", "srv0", "qpn");
    qp_attr_qp0.max_rd_atomic = 1;
    qp_attr_qp0.timeout = 14;
    qp_attr_qp0.retry_cnt = 7;
    qp_attr_qp0.rnr_retry = 7;

        if (ibv_modify_qp(qp0, &qp_attr_qp0, IBV_QP_STATE | IBV_QP_TIMEOUT | IBV_QP_RETRY_CNT | IBV_QP_RNR_RETRY | IBV_QP_SQ_PSN | IBV_QP_MAX_QP_RD_ATOMIC)) {
            fprintf(stderr, "Failed to modify QP qp0\n");
        }
    });
            printf("[20] done.\n");

    printf("[21] ModifySRQ(srq=srq0, attr_var=srq_attr_srq0, attr_obj=IbvSrqAttr{max_wr=1024, max_sge=1}, attr_mask=0) start.\n");

    memset(&srq_attr_srq0, 0, sizeof(srq_attr_srq0));
    srq_attr_srq0.max_wr = 1024;
    srq_attr_srq0.max_sge = 1;

    IF_OK_PTR(srq0, {
        if (ibv_modify_srq(srq0, &srq_attr_srq0, 0) != 0) {
            fprintf(stderr, "ibv_modify_srq failed srq0\n");
        }
    });
    printf("[21] done.\n");

    printf("[22] PostSend(qp=qp0, wr_obj=IbvSendWR{opcode=IBV_WR_SEND, num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=(uint64_t)mr0->addr, length=mr0->length, lkey=mr0->lkey}], wr_id=1, send_flags=IBV_SEND_SIGNALED}) start.\n");

    /* ibv_post_send (fuzz-friendly guarded) */
    IF_OK_PTR(qp0, {
    IF_OK_PTR(mr0, {

    memset(&wr_qp0, 0, sizeof(wr_qp0));
    wr_qp0.wr_id = 1;

    memset(&wr_qp0_sg_list[0], 0, sizeof(wr_qp0_sg_list[0]));
    wr_qp0_sg_list[0].addr = (uint64_t)mr0->addr;
    wr_qp0_sg_list[0].length = mr0->length;
    wr_qp0_sg_list[0].lkey = mr0->lkey;
    wr_qp0.sg_list = wr_qp0_sg_list;
    wr_qp0.num_sge = 1;
    wr_qp0.opcode = IBV_WR_SEND;
    wr_qp0.send_flags = IBV_SEND_SIGNALED;
    if (ibv_post_send(qp0, &wr_qp0, &bad_wr_qp0) != 0) {
        fprintf(stderr, "[warn] ibv_post_send failed qp0\n");
    }
    });
    });

    printf("[22] done.\n");

    printf("[23] PostRecv(qp=qp0, wr_obj=IbvRecvWR{num_sge=2, sg_list=[IbvSge x2: IbvSge{addr=(uint64_t)mr0->addr, length=mr0->length, lkey=mr0->lkey}], wr_id=1, next=IbvRecvWR{num_sge=2, sg_list=[IbvSge x2: IbvSge{addr=(uint64_t)mr0->addr, length=mr0->length, lkey=mr0->lkey}], wr_id=1}}, wr_var=recv_wr_qp0, bad_wr_var=bad_recv_wr_qp0) start.\n");

    /* ibv_post_recv (fuzz-friendly guarded) */
    IF_OK_PTR(qp0, {
    IF_OK_PTR(mr0, {
    IF_OK_PTR(mr1, {

    memset(&recv_wr_qp0, 0, sizeof(recv_wr_qp0));
    recv_wr_qp0.wr_id = 1;

    memset(&recv_wr_qp0_sg_list[0], 0, sizeof(recv_wr_qp0_sg_list[0]));
    recv_wr_qp0_sg_list[0].addr = (uint64_t)mr0->addr;
    recv_wr_qp0_sg_list[0].length = mr0->length;
    recv_wr_qp0_sg_list[0].lkey = mr0->lkey;

    memset(&recv_wr_qp0_sg_list[1], 0, sizeof(recv_wr_qp0_sg_list[1]));
    recv_wr_qp0_sg_list[1].addr = (uint64_t)mr1->addr;
    recv_wr_qp0_sg_list[1].length = mr1->length;
    recv_wr_qp0_sg_list[1].lkey = mr1->lkey;
    recv_wr_qp0.sg_list = recv_wr_qp0_sg_list;
    recv_wr_qp0.num_sge = 2;

    memset(&recv_wr_qp0_next, 0, sizeof(recv_wr_qp0_next));
    recv_wr_qp0_next.wr_id = 1;

    memset(&recv_wr_qp0_next_sg_list[0], 0, sizeof(recv_wr_qp0_next_sg_list[0]));
    recv_wr_qp0_next_sg_list[0].addr = (uint64_t)mr0->addr;
    recv_wr_qp0_next_sg_list[0].length = mr0->length;
    recv_wr_qp0_next_sg_list[0].lkey = mr0->lkey;

    memset(&recv_wr_qp0_next_sg_list[1], 0, sizeof(recv_wr_qp0_next_sg_list[1]));
    recv_wr_qp0_next_sg_list[1].addr = (uint64_t)mr1->addr;
    recv_wr_qp0_next_sg_list[1].length = mr1->length;
    recv_wr_qp0_next_sg_list[1].lkey = mr1->lkey;
    recv_wr_qp0_next.sg_list = recv_wr_qp0_next_sg_list;
    recv_wr_qp0_next.num_sge = 2;
    recv_wr_qp0_next.next = NULL;
    recv_wr_qp0.next = &recv_wr_qp0_next;
    if (ibv_post_recv(qp0, &recv_wr_qp0, &bad_recv_wr_qp0) != 0) {
        fprintf(stderr, "[warn] ibv_post_recv failed qp0\n");
    }
    });
    });
    });

    printf("[23] done.\n");

    printf("[24] PostSRQRecv(srq=srq0, wr_obj=IbvRecvWR{num_sge=1, sg_list=[IbvSge x1: IbvSge{addr=(uint64_t)mr0->addr, length=mr0->length, lkey=mr0->lkey}], wr_id=1}, wr_var=recv_wr_srq0, bad_wr_var=bad_recv_wr_srq0) start.\n");

    /* ibv_post_srq_recv (fuzz-friendly guarded) */
    IF_OK_PTR(srq0, {
    IF_OK_PTR(mr0, {

    memset(&recv_wr_srq0, 0, sizeof(recv_wr_srq0));
    recv_wr_srq0.wr_id = 1;

    memset(&recv_wr_srq0_sg_list[0], 0, sizeof(recv_wr_srq0_sg_list[0]));
    recv_wr_srq0_sg_list[0].addr = (uint64_t)mr0->addr;
    recv_wr_srq0_sg_list[0].length = mr0->length;
    recv_wr_srq0_sg_list[0].lkey = mr0->lkey;
    recv_wr_srq0.sg_list = recv_wr_srq0_sg_list;
    recv_wr_srq0.num_sge = 1;
    recv_wr_srq0.next = NULL;
    if (ibv_post_srq_recv(srq0, &recv_wr_srq0, &bad_recv_wr_srq0) != 0) {
        fprintf(stderr, "[warn] ibv_post_srq_recv failed srq0\n");
    }
    });
    });

    printf("[24] done.\n");

    printf("[25] PollCQ(cq=cq0) start.\n");

        /* ibv_poll_cq — self-contained minimal polling */
        IF_OK_PTR(cq0, {
            {
                struct ibv_wc wc;
                int n = 0;
                int attempts = 100;   /* ~100 * 100us ≈ 10ms */
                while (attempts-- > 0) {
                    n = ibv_poll_cq(cq0, 1, &wc);
                    if (n < 0) {
                        fprintf(stderr, "ibv_poll_cq failed\n");
                    }
                    if (n == 1) {
                        if (wc.status != IBV_WC_SUCCESS) {
                            fprintf(stderr, "bad completion: status=0x%x vendor=0x%x\n",
                                    wc.status, wc.vendor_err);
                        }
                        /* success – got one completion */
                        break;
                    }
                    /* n == 0: no CQE yet, back off briefly */
                    usleep(100); /* 100us */
                }
                if (n == 0) {
                    fprintf(stderr, "no completion within budget\n");
                }
            }
        });

        printf("[25] done.\n");

    printf("[26] DestroyQP(qp=qp0) start.\n");

    /* ibv_destroy_qp */
    IF_OK_PTR(qp0, {
        if (ibv_destroy_qp(qp0)) {
            fprintf(stderr, "Failed to destroy QP qp0\n");
        }
    });
    printf("[26] done.\n");

    printf("[27] DestroyCQ(cq=cq0) start.\n");

    /* ibv_destroy_cq */
    IF_OK_PTR(cq0, {
        if (ibv_destroy_cq(cq0)) {
            fprintf(stderr, "Failed to destroy CQ cq0\n");
        }
    });
    printf("[27] done.\n");

    printf("[28] DestroySRQ(srq=srq0) start.\n");

    /* ibv_destroy_srq */
    IF_OK_PTR(srq0, {
        if (ibv_destroy_srq(srq0) != 0) {
            fprintf(stderr, "Failed to destroy SRQ srq0\n");
        }
    });
    printf("[28] done.\n");

    printf("[29] DeregMR(mr=mr0) start.\n");

    /* ibv_dereg_mr */
    IF_OK_PTR(mr0, {
        if (ibv_dereg_mr(mr0)) {
            fprintf(stderr, "Failed to deregister MR mr0\n");
        }
    });
    printf("[29] done.\n");

    printf("[30] DeallocPD(pd=pd0) start.\n");

    /* ibv_dealloc_pd */
    IF_OK_PTR(pd0, {
        if (ibv_dealloc_pd(pd0)) {
            fprintf(stderr, "Failed to deallocate PD pd0\n");
        }
    });
    printf("[30] done.\n");

    printf("[31] FreeDM(dm=dm0) start.\n");

    /* ibv_free_dm */
    IF_OK_PTR(dm0, {
        if (ibv_free_dm(dm0)) {
            fprintf(stderr, "Failed to free device memory (DM) dm0\n");
        }
    });
    printf("[31] done.\n");



    // --- Optional CQ polling / cleanup (generated or static) ---
    /* optional CQ polling & cleanup */

    return 0;
}