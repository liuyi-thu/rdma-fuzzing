Function Name: ibv_wc_status_str
Output:
const char * ibv_wc_status_str(enum ibv_wc_status status);
enum ibv_wc_status {
    IBV_WC_SUCCESS = 0,
    IBV_WC_LOC_LEN_ERR = 1,
    IBV_WC_LOC_QP_OP_ERR = 2,
    IBV_WC_LOC_EEC_OP_ERR = 3,
    IBV_WC_LOC_PROT_ERR = 4,
    IBV_WC_WR_FLUSH_ERR = 5,
    IBV_WC_MW_BIND_ERR = 6,
    IBV_WC_BAD_RESP_ERR = 7,
    IBV_WC_LOC_ACCESS_ERR = 8,
    IBV_WC_REM_INV_REQ_ERR = 9,
    IBV_WC_REM_ACCESS_ERR = 10,
    IBV_WC_REM_OP_ERR = 11,
    IBV_WC_RETRY_EXC_ERR = 12,
    IBV_WC_RNR_RETRY_EXC_ERR = 13,
    IBV_WC_LOC_RDD_VIOL_ERR = 14,
    IBV_WC_REM_INV_RD_REQ_ERR = 15,
    IBV_WC_REM_ABORT_ERR = 16,
    IBV_WC_INV_EECN_ERR = 17,
    IBV_WC_INV_EEC_STATE_ERR = 18,
    IBV_WC_FATAL_ERR = 19,
    IBV_WC_RESP_TIMEOUT_ERR = 20,
    IBV_WC_GENERAL_ERR = 21,
    IBV_WC_TM_ERR = 22,
    IBV_WC_TM_RNDV_INCOMPLETE = 23,
};

Function Name: ibv_rate_to_mult
Output:
int ibv_rate_to_mult(enum ibv_rate rate);
enum ibv_rate {
    IBV_RATE_MAX = 0,
    IBV_RATE_2_5_GBPS = 2,
    IBV_RATE_5_GBPS = 5,
    IBV_RATE_10_GBPS = 3,
    IBV_RATE_20_GBPS = 6,
    IBV_RATE_30_GBPS = 4,
    IBV_RATE_40_GBPS = 7,
    IBV_RATE_60_GBPS = 8,
    IBV_RATE_80_GBPS = 9,
    IBV_RATE_120_GBPS = 10,
    IBV_RATE_14_GBPS = 11,
    IBV_RATE_56_GBPS = 12,
    IBV_RATE_112_GBPS = 13,
    IBV_RATE_168_GBPS = 14,
    IBV_RATE_25_GBPS = 15,
    IBV_RATE_100_GBPS = 16,
    IBV_RATE_200_GBPS = 17,
    IBV_RATE_300_GBPS = 18,
    IBV_RATE_28_GBPS = 19,
    IBV_RATE_50_GBPS = 20,
    IBV_RATE_400_GBPS = 21,
    IBV_RATE_600_GBPS = 22,
    IBV_RATE_800_GBPS = 23,
    IBV_RATE_1200_GBPS = 24,
};

Function Name: mult_to_ibv_rate
Output:
enum ibv_rate mult_to_ibv_rate(int mult);
enum ibv_rate {
    IBV_RATE_MAX = 0,
    IBV_RATE_2_5_GBPS = 2,
    IBV_RATE_5_GBPS = 5,
    IBV_RATE_10_GBPS = 3,
    IBV_RATE_20_GBPS = 6,
    IBV_RATE_30_GBPS = 4,
    IBV_RATE_40_GBPS = 7,
    IBV_RATE_60_GBPS = 8,
    IBV_RATE_80_GBPS = 9,
    IBV_RATE_120_GBPS = 10,
    IBV_RATE_14_GBPS = 11,
    IBV_RATE_56_GBPS = 12,
    IBV_RATE_112_GBPS = 13,
    IBV_RATE_168_GBPS = 14,
    IBV_RATE_25_GBPS = 15,
    IBV_RATE_100_GBPS = 16,
    IBV_RATE_200_GBPS = 17,
    IBV_RATE_300_GBPS = 18,
    IBV_RATE_28_GBPS = 19,
    IBV_RATE_50_GBPS = 20,
    IBV_RATE_400_GBPS = 21,
    IBV_RATE_600_GBPS = 22,
    IBV_RATE_800_GBPS = 23,
    IBV_RATE_1200_GBPS = 24,
};

Function Name: ibv_rate_to_mbps
Output:
int ibv_rate_to_mbps(enum ibv_rate rate);
enum ibv_rate {
    IBV_RATE_MAX = 0,
    IBV_RATE_2_5_GBPS = 2,
    IBV_RATE_5_GBPS = 5,
    IBV_RATE_10_GBPS = 3,
    IBV_RATE_20_GBPS = 6,
    IBV_RATE_30_GBPS = 4,
    IBV_RATE_40_GBPS = 7,
    IBV_RATE_60_GBPS = 8,
    IBV_RATE_80_GBPS = 9,
    IBV_RATE_120_GBPS = 10,
    IBV_RATE_14_GBPS = 11,
    IBV_RATE_56_GBPS = 12,
    IBV_RATE_112_GBPS = 13,
    IBV_RATE_168_GBPS = 14,
    IBV_RATE_25_GBPS = 15,
    IBV_RATE_100_GBPS = 16,
    IBV_RATE_200_GBPS = 17,
    IBV_RATE_300_GBPS = 18,
    IBV_RATE_28_GBPS = 19,
    IBV_RATE_50_GBPS = 20,
    IBV_RATE_400_GBPS = 21,
    IBV_RATE_600_GBPS = 22,
    IBV_RATE_800_GBPS = 23,
    IBV_RATE_1200_GBPS = 24,
};

Function Name: mbps_to_ibv_rate
Output:
enum ibv_rate mbps_to_ibv_rate(int mbps);
enum ibv_rate {
    IBV_RATE_MAX = 0,
    IBV_RATE_2_5_GBPS = 2,
    IBV_RATE_5_GBPS = 5,
    IBV_RATE_10_GBPS = 3,
    IBV_RATE_20_GBPS = 6,
    IBV_RATE_30_GBPS = 4,
    IBV_RATE_40_GBPS = 7,
    IBV_RATE_60_GBPS = 8,
    IBV_RATE_80_GBPS = 9,
    IBV_RATE_120_GBPS = 10,
    IBV_RATE_14_GBPS = 11,
    IBV_RATE_56_GBPS = 12,
    IBV_RATE_112_GBPS = 13,
    IBV_RATE_168_GBPS = 14,
    IBV_RATE_25_GBPS = 15,
    IBV_RATE_100_GBPS = 16,
    IBV_RATE_200_GBPS = 17,
    IBV_RATE_300_GBPS = 18,
    IBV_RATE_28_GBPS = 19,
    IBV_RATE_50_GBPS = 20,
    IBV_RATE_400_GBPS = 21,
    IBV_RATE_600_GBPS = 22,
    IBV_RATE_800_GBPS = 23,
    IBV_RATE_1200_GBPS = 24,
};

Function Name: ibv_wr_opcode_str
Output:
const char * ibv_wr_opcode_str(enum ibv_wr_opcode opcode);
enum ibv_wr_opcode {
    IBV_WR_RDMA_WRITE = 0,
    IBV_WR_RDMA_WRITE_WITH_IMM = 1,
    IBV_WR_SEND = 2,
    IBV_WR_SEND_WITH_IMM = 3,
    IBV_WR_RDMA_READ = 4,
    IBV_WR_ATOMIC_CMP_AND_SWP = 5,
    IBV_WR_ATOMIC_FETCH_AND_ADD = 6,
    IBV_WR_LOCAL_INV = 7,
    IBV_WR_BIND_MW = 8,
    IBV_WR_SEND_WITH_INV = 9,
    IBV_WR_TSO = 10,
    IBV_WR_DRIVER1 = 11,
    IBV_WR_FLUSH = 14,
    IBV_WR_ATOMIC_WRITE = 15,
};

Function Name: ibv_qp_to_qp_ex
Output:
struct ibv_qp_ex * ibv_qp_to_qp_ex(struct ibv_qp * qp);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

Function Name: ibv_wr_atomic_cmp_swp
Output:
void ibv_wr_atomic_cmp_swp(struct ibv_qp_ex * qp, uint32_t rkey, uint64_t remote_addr, uint64_t compare, uint64_t swap);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

Function Name: ibv_wr_atomic_fetch_add
Output:
void ibv_wr_atomic_fetch_add(struct ibv_qp_ex * qp, uint32_t rkey, uint64_t remote_addr, uint64_t add);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

Function Name: ibv_wr_bind_mw
Output:
void ibv_wr_bind_mw(struct ibv_qp_ex * qp, struct ibv_mw * mw, uint32_t rkey, const struct ibv_mw_bind_info * bind_info);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};
struct ibv_mw {
    struct ibv_context * context;
    struct ibv_pd * pd;
    uint32_t rkey;
    uint32_t handle;
    enum ibv_mw_type type;
    enum ibv_mw_type {
        IBV_MW_TYPE_1 = 1,
        IBV_MW_TYPE_2 = 2,
    };
};
struct ibv_mw_bind_info {
    struct ibv_mr * mr;
    struct ibv_mr {
        struct ibv_context * context;
        struct ibv_pd * pd;
        void * addr;
        int length;
        uint32_t handle;
        uint32_t lkey;
        uint32_t rkey;
    };
    uint64_t addr;
    uint64_t length;
    unsigned int mw_access_flags;
};

Function Name: ibv_wr_local_inv
Output:
void ibv_wr_local_inv(struct ibv_qp_ex * qp, uint32_t invalidate_rkey);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

Function Name: ibv_wr_rdma_read
Output:
void ibv_wr_rdma_read(struct ibv_qp_ex * qp, uint32_t rkey, uint64_t remote_addr);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

Function Name: ibv_wr_rdma_write
Output:
void ibv_wr_rdma_write(struct ibv_qp_ex * qp, uint32_t rkey, uint64_t remote_addr);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

Function Name: ibv_wr_flush
Output:
void ibv_wr_flush(struct ibv_qp_ex * qp, uint32_t rkey, uint64_t remote_addr, int len, uint8_t type, uint8_t level);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

Function Name: ibv_wr_rdma_write_imm
Output:
void ibv_wr_rdma_write_imm(struct ibv_qp_ex * qp, uint32_t rkey, uint64_t remote_addr, __be32 imm_data);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

Function Name: ibv_wr_send
Output:
void ibv_wr_send(struct ibv_qp_ex * qp);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

Function Name: ibv_wr_send_imm
Output:
void ibv_wr_send_imm(struct ibv_qp_ex * qp, __be32 imm_data);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

Function Name: ibv_wr_send_inv
Output:
void ibv_wr_send_inv(struct ibv_qp_ex * qp, uint32_t invalidate_rkey);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

Function Name: ibv_wr_send_tso
Output:
void ibv_wr_send_tso(struct ibv_qp_ex * qp, void * hdr, uint16_t hdr_sz, uint16_t mss);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

Function Name: ibv_wr_set_ud_addr
Output:
void ibv_wr_set_ud_addr(struct ibv_qp_ex * qp, struct ibv_ah * ah, uint32_t remote_qpn, uint32_t remote_qkey);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};
struct ibv_ah {
    struct ibv_context * context;
    struct ibv_pd * pd;
    uint32_t handle;
};

Function Name: ibv_wr_set_xrc_srqn
Output:
void ibv_wr_set_xrc_srqn(struct ibv_qp_ex * qp, uint32_t remote_srqn);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

Function Name: ibv_wr_set_inline_data
Output:
void ibv_wr_set_inline_data(struct ibv_qp_ex * qp, void * addr, int length);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

Function Name: ibv_wr_set_inline_data_list
Output:
void ibv_wr_set_inline_data_list(struct ibv_qp_ex * qp, int num_buf, const struct ibv_data_buf * buf_list);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};
struct ibv_data_buf {
    void * addr;
    int length;
};

Function Name: ibv_wr_set_sge
Output:
void ibv_wr_set_sge(struct ibv_qp_ex * qp, uint32_t lkey, uint64_t addr, uint32_t length);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

Function Name: ibv_wr_set_sge_list
Output:
void ibv_wr_set_sge_list(struct ibv_qp_ex * qp, int num_sge, const struct ibv_sge * sg_list);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};
struct ibv_sge {
    uint64_t addr;
    uint32_t length;
    uint32_t lkey;
};

Function Name: ibv_wr_start
Output:
void ibv_wr_start(struct ibv_qp_ex * qp);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

Function Name: ibv_wr_complete
Output:
int ibv_wr_complete(struct ibv_qp_ex * qp);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

Function Name: ibv_wr_abort
Output:
void ibv_wr_abort(struct ibv_qp_ex * qp);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

Function Name: ibv_wr_atomic_write
Output:
void ibv_wr_atomic_write(struct ibv_qp_ex * qp, uint32_t rkey, uint64_t remote_addr, const void * atomic_wr);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

Function Name: ibv_cq_ex_to_cq
Output:
struct ibv_cq * ibv_cq_ex_to_cq(struct ibv_cq_ex * cq);
struct ibv_cq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
};
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_comp_channel * channel;
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};

Function Name: ibv_start_poll
Output:
int ibv_start_poll(struct ibv_cq_ex * cq, struct ibv_poll_cq_attr * attr);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};
struct ibv_poll_cq_attr {
    uint32_t comp_mask;
};

Function Name: ibv_next_poll
Output:
int ibv_next_poll(struct ibv_cq_ex * cq);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};

Function Name: ibv_end_poll
Output:
void ibv_end_poll(struct ibv_cq_ex * cq);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};

Function Name: ibv_wc_read_opcode
Output:
enum ibv_wc_opcode ibv_wc_read_opcode(struct ibv_cq_ex * cq);
enum ibv_wc_opcode {
    IBV_WC_SEND = 0,
    IBV_WC_RDMA_WRITE = 1,
    IBV_WC_RDMA_READ = 2,
    IBV_WC_COMP_SWAP = 3,
    IBV_WC_FETCH_ADD = 4,
    IBV_WC_BIND_MW = 5,
    IBV_WC_LOCAL_INV = 6,
    IBV_WC_TSO = 7,
    IBV_WC_FLUSH = 8,
    IBV_WC_ATOMIC_WRITE = 9,
    IBV_WC_RECV = 128,
    IBV_WC_RECV_RDMA_WITH_IMM = 129,
    IBV_WC_TM_ADD = 130,
    IBV_WC_TM_DEL = 131,
    IBV_WC_TM_SYNC = 132,
    IBV_WC_TM_RECV = 133,
    IBV_WC_TM_NO_TAG = 134,
    IBV_WC_DRIVER1 = 135,
    IBV_WC_DRIVER2 = 136,
    IBV_WC_DRIVER3 = 137,
};
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};

Function Name: ibv_wc_read_vendor_err
Output:
uint32_t ibv_wc_read_vendor_err(struct ibv_cq_ex * cq);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};

Function Name: ibv_wc_read_byte_len
Output:
uint32_t ibv_wc_read_byte_len(struct ibv_cq_ex * cq);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};

Function Name: ibv_wc_read_imm_data
Output:
__be32 ibv_wc_read_imm_data(struct ibv_cq_ex * cq);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};

Function Name: ibv_wc_read_invalidated_rkey
Output:
uint32_t ibv_wc_read_invalidated_rkey(struct ibv_cq_ex * cq);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};

Function Name: ibv_wc_read_qp_num
Output:
uint32_t ibv_wc_read_qp_num(struct ibv_cq_ex * cq);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};

Function Name: ibv_wc_read_src_qp
Output:
uint32_t ibv_wc_read_src_qp(struct ibv_cq_ex * cq);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};

Function Name: ibv_wc_read_wc_flags
Output:
unsigned int ibv_wc_read_wc_flags(struct ibv_cq_ex * cq);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};

Function Name: ibv_wc_read_slid
Output:
uint32_t ibv_wc_read_slid(struct ibv_cq_ex * cq);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};

Function Name: ibv_wc_read_sl
Output:
uint8_t ibv_wc_read_sl(struct ibv_cq_ex * cq);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};

Function Name: ibv_wc_read_dlid_path_bits
Output:
uint8_t ibv_wc_read_dlid_path_bits(struct ibv_cq_ex * cq);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};

Function Name: ibv_wc_read_completion_ts
Output:
uint64_t ibv_wc_read_completion_ts(struct ibv_cq_ex * cq);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};

Function Name: ibv_wc_read_completion_wallclock_ns
Output:
uint64_t ibv_wc_read_completion_wallclock_ns(struct ibv_cq_ex * cq);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};

Function Name: ibv_wc_read_cvlan
Output:
uint16_t ibv_wc_read_cvlan(struct ibv_cq_ex * cq);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};

Function Name: ibv_wc_read_flow_tag
Output:
uint32_t ibv_wc_read_flow_tag(struct ibv_cq_ex * cq);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};

Function Name: ibv_wc_read_tm_info
Output:
void ibv_wc_read_tm_info(struct ibv_cq_ex * cq, struct ibv_wc_tm_info * tm_info);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};
struct ibv_wc_tm_info {
    uint64_t tag;
    uint32_t priv;
};

Function Name: ibv_post_wq_recv
Output:
int ibv_post_wq_recv(struct ibv_wq * wq, struct ibv_recv_wr * recv_wr, struct ibv_recv_wr ** bad_recv_wr);
struct ibv_wq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * wq_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    uint32_t wq_num;
    uint32_t handle;
    enum ibv_wq_state state;
    enum ibv_wq_state {
        IBV_WQS_RESET = 0,
        IBV_WQS_RDY = 1,
        IBV_WQS_ERR = 2,
        IBV_WQS_UNKNOWN = 3,
    };
    enum ibv_wq_type wq_type;
    enum ibv_wq_type {
        IBV_WQT_RQ = 0,
    };
    int (*)(struct ibv_wq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
    uint32_t comp_mask;
};
struct ibv_recv_wr {
    uint64_t wr_id;
    struct ibv_recv_wr * next;
    struct ibv_sge * sg_list;
    struct ibv_sge {
        uint64_t addr;
        uint32_t length;
        uint32_t lkey;
    };
    int num_sge;
};

Function Name: verbs_get_ctx
Output:
struct verbs_context * verbs_get_ctx(struct ibv_context * ctx);
struct verbs_context {
    int (*)(struct ibv_context *, uint8_t, struct ibv_port_attr *, int) query_port;
    int (*)(struct ibv_pd *, enum ib_uverbs_advise_mr_advice, uint32_t, struct ibv_sge *, uint32_t) advise_mr;
    struct ibv_mr *(*)(struct ibv_pd *) alloc_null_mr;
    int (*)(struct ibv_counters *, uint64_t *, uint32_t, uint32_t) read_counters;
    int (*)(struct ibv_counters *, struct ibv_counter_attach_attr *, struct ibv_flow *) attach_counters_point_flow;
    struct ibv_counters *(*)(struct ibv_context *, struct ibv_counters_init_attr *) create_counters;
    int (*)(struct ibv_counters *) destroy_counters;
    struct ibv_mr *(*)(struct ibv_pd *, struct ibv_dm *, uint64_t, int, unsigned int) reg_dm_mr;
    struct ibv_dm *(*)(struct ibv_context *, struct ibv_alloc_dm_attr *) alloc_dm;
    int (*)(struct ibv_dm *) free_dm;
    int (*)(struct ibv_flow_action *, struct ibv_flow_action_esp_attr *) modify_flow_action_esp;
    int (*)(struct ibv_flow_action *) destroy_flow_action;
    struct ibv_flow_action *(*)(struct ibv_context *, struct ibv_flow_action_esp_attr *) create_flow_action_esp;
    int (*)(struct ibv_qp *, struct ibv_qp_rate_limit_attr *) modify_qp_rate_limit;
    struct ibv_pd *(*)(struct ibv_context *, struct ibv_parent_domain_init_attr *) alloc_parent_domain;
    int (*)(struct ibv_td *) dealloc_td;
    struct ibv_td *(*)(struct ibv_context *, struct ibv_td_init_attr *) alloc_td;
    int (*)(struct ibv_cq *, struct ibv_modify_cq_attr *) modify_cq;
    int (*)(struct ibv_srq *, struct ibv_ops_wr *, struct ibv_ops_wr **) post_srq_ops;
    int (*)(struct ibv_rwq_ind_table *) destroy_rwq_ind_table;
    struct ibv_rwq_ind_table *(*)(struct ibv_context *, struct ibv_rwq_ind_table_init_attr *) create_rwq_ind_table;
    int (*)(struct ibv_wq *) destroy_wq;
    int (*)(struct ibv_wq *, struct ibv_wq_attr *) modify_wq;
    struct ibv_wq *(*)(struct ibv_context *, struct ibv_wq_init_attr *) create_wq;
    int (*)(struct ibv_context *, struct ibv_values_ex *) query_rt_values;
    struct ibv_cq_ex *(*)(struct ibv_context *, struct ibv_cq_init_attr_ex *) create_cq_ex;
    struct verbs_ex_private * priv;
    int (*)(struct ibv_context *, const struct ibv_query_device_ex_input *, struct ibv_device_attr_ex *, int) query_device_ex;
    int (*)(struct ibv_flow *) ibv_destroy_flow;
    void (*)(void) ABI_placeholder2;
    struct ibv_flow *(*)(struct ibv_qp *, struct ibv_flow_attr *) ibv_create_flow;
    void (*)(void) ABI_placeholder1;
    struct ibv_qp *(*)(struct ibv_context *, struct ibv_qp_open_attr *) open_qp;
    struct ibv_qp *(*)(struct ibv_context *, struct ibv_qp_init_attr_ex *) create_qp_ex;
    int (*)(struct ibv_srq *, uint32_t *) get_srq_num;
    struct ibv_srq *(*)(struct ibv_context *, struct ibv_srq_init_attr_ex *) create_srq_ex;
    struct ibv_xrcd *(*)(struct ibv_context *, struct ibv_xrcd_init_attr *) open_xrcd;
    int (*)(struct ibv_xrcd *) close_xrcd;
    uint64_t _ABI_placeholder3;
    int sz;
    struct ibv_context context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
};

Function Name: ibv_get_device_list
Output:
struct ibv_device ** ibv_get_device_list(int * num_devices);
struct ibv_device {
    struct _ibv_device_ops _ops;
    struct _ibv_device_ops {
        struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
        void (*)(struct ibv_context *) _dummy2;
    };
    enum ibv_node_type node_type;
    enum ibv_node_type {
        IBV_NODE_UNKNOWN = -1,
        IBV_NODE_CA = 1,
        IBV_NODE_SWITCH = 2,
        IBV_NODE_ROUTER = 3,
        IBV_NODE_RNIC = 4,
        IBV_NODE_USNIC = 5,
        IBV_NODE_USNIC_UDP = 6,
        IBV_NODE_UNSPECIFIED = 7,
    };
    enum ibv_transport_type transport_type;
    enum ibv_transport_type {
        IBV_TRANSPORT_UNKNOWN = -1,
        IBV_TRANSPORT_IB = 0,
        IBV_TRANSPORT_IWARP = 1,
        IBV_TRANSPORT_USNIC = 2,
        IBV_TRANSPORT_USNIC_UDP = 3,
        IBV_TRANSPORT_UNSPECIFIED = 4,
    };
    char[64] name;
    char[64] dev_name;
    char[256] dev_path;
    char[256] ibdev_path;
};

Function Name: ibv_free_device_list
Output:
void ibv_free_device_list(struct ibv_device ** list);
struct ibv_device {
    struct _ibv_device_ops _ops;
    struct _ibv_device_ops {
        struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
        void (*)(struct ibv_context *) _dummy2;
    };
    enum ibv_node_type node_type;
    enum ibv_node_type {
        IBV_NODE_UNKNOWN = -1,
        IBV_NODE_CA = 1,
        IBV_NODE_SWITCH = 2,
        IBV_NODE_ROUTER = 3,
        IBV_NODE_RNIC = 4,
        IBV_NODE_USNIC = 5,
        IBV_NODE_USNIC_UDP = 6,
        IBV_NODE_UNSPECIFIED = 7,
    };
    enum ibv_transport_type transport_type;
    enum ibv_transport_type {
        IBV_TRANSPORT_UNKNOWN = -1,
        IBV_TRANSPORT_IB = 0,
        IBV_TRANSPORT_IWARP = 1,
        IBV_TRANSPORT_USNIC = 2,
        IBV_TRANSPORT_USNIC_UDP = 3,
        IBV_TRANSPORT_UNSPECIFIED = 4,
    };
    char[64] name;
    char[64] dev_name;
    char[256] dev_path;
    char[256] ibdev_path;
};

Function Name: ibv_get_device_name
Output:
const char * ibv_get_device_name(struct ibv_device * device);
struct ibv_device {
    struct _ibv_device_ops _ops;
    struct _ibv_device_ops {
        struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
        void (*)(struct ibv_context *) _dummy2;
    };
    enum ibv_node_type node_type;
    enum ibv_node_type {
        IBV_NODE_UNKNOWN = -1,
        IBV_NODE_CA = 1,
        IBV_NODE_SWITCH = 2,
        IBV_NODE_ROUTER = 3,
        IBV_NODE_RNIC = 4,
        IBV_NODE_USNIC = 5,
        IBV_NODE_USNIC_UDP = 6,
        IBV_NODE_UNSPECIFIED = 7,
    };
    enum ibv_transport_type transport_type;
    enum ibv_transport_type {
        IBV_TRANSPORT_UNKNOWN = -1,
        IBV_TRANSPORT_IB = 0,
        IBV_TRANSPORT_IWARP = 1,
        IBV_TRANSPORT_USNIC = 2,
        IBV_TRANSPORT_USNIC_UDP = 3,
        IBV_TRANSPORT_UNSPECIFIED = 4,
    };
    char[64] name;
    char[64] dev_name;
    char[256] dev_path;
    char[256] ibdev_path;
};

Function Name: ibv_get_device_index
Output:
int ibv_get_device_index(struct ibv_device * device);
struct ibv_device {
    struct _ibv_device_ops _ops;
    struct _ibv_device_ops {
        struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
        void (*)(struct ibv_context *) _dummy2;
    };
    enum ibv_node_type node_type;
    enum ibv_node_type {
        IBV_NODE_UNKNOWN = -1,
        IBV_NODE_CA = 1,
        IBV_NODE_SWITCH = 2,
        IBV_NODE_ROUTER = 3,
        IBV_NODE_RNIC = 4,
        IBV_NODE_USNIC = 5,
        IBV_NODE_USNIC_UDP = 6,
        IBV_NODE_UNSPECIFIED = 7,
    };
    enum ibv_transport_type transport_type;
    enum ibv_transport_type {
        IBV_TRANSPORT_UNKNOWN = -1,
        IBV_TRANSPORT_IB = 0,
        IBV_TRANSPORT_IWARP = 1,
        IBV_TRANSPORT_USNIC = 2,
        IBV_TRANSPORT_USNIC_UDP = 3,
        IBV_TRANSPORT_UNSPECIFIED = 4,
    };
    char[64] name;
    char[64] dev_name;
    char[256] dev_path;
    char[256] ibdev_path;
};

Function Name: ibv_get_device_guid
Output:
__be64 ibv_get_device_guid(struct ibv_device * device);
struct ibv_device {
    struct _ibv_device_ops _ops;
    struct _ibv_device_ops {
        struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
        void (*)(struct ibv_context *) _dummy2;
    };
    enum ibv_node_type node_type;
    enum ibv_node_type {
        IBV_NODE_UNKNOWN = -1,
        IBV_NODE_CA = 1,
        IBV_NODE_SWITCH = 2,
        IBV_NODE_ROUTER = 3,
        IBV_NODE_RNIC = 4,
        IBV_NODE_USNIC = 5,
        IBV_NODE_USNIC_UDP = 6,
        IBV_NODE_UNSPECIFIED = 7,
    };
    enum ibv_transport_type transport_type;
    enum ibv_transport_type {
        IBV_TRANSPORT_UNKNOWN = -1,
        IBV_TRANSPORT_IB = 0,
        IBV_TRANSPORT_IWARP = 1,
        IBV_TRANSPORT_USNIC = 2,
        IBV_TRANSPORT_USNIC_UDP = 3,
        IBV_TRANSPORT_UNSPECIFIED = 4,
    };
    char[64] name;
    char[64] dev_name;
    char[256] dev_path;
    char[256] ibdev_path;
};

Function Name: ibv_open_device
Output:
struct ibv_context * ibv_open_device(struct ibv_device * device);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};

Function Name: ibv_close_device
Output:
int ibv_close_device(struct ibv_context * context);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};

Function Name: ibv_import_device
Output:
struct ibv_context * ibv_import_device(int cmd_fd);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};

Function Name: ibv_import_pd
Output:
struct ibv_pd * ibv_import_pd(struct ibv_context * context, uint32_t pd_handle);
struct ibv_pd {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    uint32_t handle;
};

Function Name: ibv_unimport_pd
Output:
void ibv_unimport_pd(struct ibv_pd * pd);
struct ibv_pd {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    uint32_t handle;
};

Function Name: ibv_import_mr
Output:
struct ibv_mr * ibv_import_mr(struct ibv_pd * pd, uint32_t mr_handle);
struct ibv_mr {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    void * addr;
    int length;
    uint32_t handle;
    uint32_t lkey;
    uint32_t rkey;
};

Function Name: ibv_unimport_mr
Output:
void ibv_unimport_mr(struct ibv_mr * mr);
struct ibv_mr {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    void * addr;
    int length;
    uint32_t handle;
    uint32_t lkey;
    uint32_t rkey;
};

Function Name: ibv_import_dm
Output:
struct ibv_dm * ibv_import_dm(struct ibv_context * context, uint32_t dm_handle);
struct ibv_dm {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    int (*)(struct ibv_dm *, uint64_t, const void *, int) memcpy_to_dm;
    int (*)(void *, struct ibv_dm *, uint64_t, int) memcpy_from_dm;
    uint32_t comp_mask;
    uint32_t handle;
};

Function Name: ibv_unimport_dm
Output:
void ibv_unimport_dm(struct ibv_dm * dm);
struct ibv_dm {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    int (*)(struct ibv_dm *, uint64_t, const void *, int) memcpy_to_dm;
    int (*)(void *, struct ibv_dm *, uint64_t, int) memcpy_from_dm;
    uint32_t comp_mask;
    uint32_t handle;
};

Function Name: ibv_get_async_event
Output:
int ibv_get_async_event(struct ibv_context * context, struct ibv_async_event * event);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};
struct ibv_async_event {
    union (unnamed union at verbs.h:474:2) element;
    enum ibv_event_type event_type;
    enum ibv_event_type {
        IBV_EVENT_CQ_ERR = 0,
        IBV_EVENT_QP_FATAL = 1,
        IBV_EVENT_QP_REQ_ERR = 2,
        IBV_EVENT_QP_ACCESS_ERR = 3,
        IBV_EVENT_COMM_EST = 4,
        IBV_EVENT_SQ_DRAINED = 5,
        IBV_EVENT_PATH_MIG = 6,
        IBV_EVENT_PATH_MIG_ERR = 7,
        IBV_EVENT_DEVICE_FATAL = 8,
        IBV_EVENT_PORT_ACTIVE = 9,
        IBV_EVENT_PORT_ERR = 10,
        IBV_EVENT_LID_CHANGE = 11,
        IBV_EVENT_PKEY_CHANGE = 12,
        IBV_EVENT_SM_CHANGE = 13,
        IBV_EVENT_SRQ_ERR = 14,
        IBV_EVENT_SRQ_LIMIT_REACHED = 15,
        IBV_EVENT_QP_LAST_WQE_REACHED = 16,
        IBV_EVENT_CLIENT_REREGISTER = 17,
        IBV_EVENT_GID_CHANGE = 18,
        IBV_EVENT_WQ_FATAL = 19,
    };
};

Function Name: ibv_ack_async_event
Output:
void ibv_ack_async_event(struct ibv_async_event * event);
struct ibv_async_event {
    union (unnamed union at verbs.h:474:2) element;
    enum ibv_event_type event_type;
    enum ibv_event_type {
        IBV_EVENT_CQ_ERR = 0,
        IBV_EVENT_QP_FATAL = 1,
        IBV_EVENT_QP_REQ_ERR = 2,
        IBV_EVENT_QP_ACCESS_ERR = 3,
        IBV_EVENT_COMM_EST = 4,
        IBV_EVENT_SQ_DRAINED = 5,
        IBV_EVENT_PATH_MIG = 6,
        IBV_EVENT_PATH_MIG_ERR = 7,
        IBV_EVENT_DEVICE_FATAL = 8,
        IBV_EVENT_PORT_ACTIVE = 9,
        IBV_EVENT_PORT_ERR = 10,
        IBV_EVENT_LID_CHANGE = 11,
        IBV_EVENT_PKEY_CHANGE = 12,
        IBV_EVENT_SM_CHANGE = 13,
        IBV_EVENT_SRQ_ERR = 14,
        IBV_EVENT_SRQ_LIMIT_REACHED = 15,
        IBV_EVENT_QP_LAST_WQE_REACHED = 16,
        IBV_EVENT_CLIENT_REREGISTER = 17,
        IBV_EVENT_GID_CHANGE = 18,
        IBV_EVENT_WQ_FATAL = 19,
    };
};

Function Name: ibv_query_device
Output:
int ibv_query_device(struct ibv_context * context, struct ibv_device_attr * device_attr);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};
struct ibv_device_attr {
    char[64] fw_ver;
    __be64 node_guid;
    __be64 sys_image_guid;
    uint64_t max_mr_size;
    uint64_t page_size_cap;
    uint32_t vendor_id;
    uint32_t vendor_part_id;
    uint32_t hw_ver;
    int max_qp;
    int max_qp_wr;
    unsigned int device_cap_flags;
    int max_sge;
    int max_sge_rd;
    int max_cq;
    int max_cqe;
    int max_mr;
    int max_pd;
    int max_qp_rd_atom;
    int max_ee_rd_atom;
    int max_res_rd_atom;
    int max_qp_init_rd_atom;
    int max_ee_init_rd_atom;
    enum ibv_atomic_cap atomic_cap;
    enum ibv_atomic_cap {
        IBV_ATOMIC_NONE = 0,
        IBV_ATOMIC_HCA = 1,
        IBV_ATOMIC_GLOB = 2,
    };
    int max_ee;
    int max_rdd;
    int max_mw;
    int max_raw_ipv6_qp;
    int max_raw_ethy_qp;
    int max_mcast_grp;
    int max_mcast_qp_attach;
    int max_total_mcast_qp_attach;
    int max_ah;
    int max_fmr;
    int max_map_per_fmr;
    int max_srq;
    int max_srq_wr;
    int max_srq_sge;
    uint16_t max_pkeys;
    uint8_t local_ca_ack_delay;
    uint8_t phys_port_cnt;
};

Function Name: ibv_query_port
Output:
int ibv_query_port(struct ibv_context * context, uint8_t port_num, struct _compat_ibv_port_attr * port_attr);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};

Function Name: ___ibv_query_port
Output:
int ___ibv_query_port(struct ibv_context * context, uint8_t port_num, struct ibv_port_attr * port_attr);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};
struct ibv_port_attr {
    enum ibv_port_state state;
    enum ibv_port_state {
        IBV_PORT_NOP = 0,
        IBV_PORT_DOWN = 1,
        IBV_PORT_INIT = 2,
        IBV_PORT_ARMED = 3,
        IBV_PORT_ACTIVE = 4,
        IBV_PORT_ACTIVE_DEFER = 5,
    };
    enum ibv_mtu max_mtu;
    enum ibv_mtu {
        IBV_MTU_256 = 1,
        IBV_MTU_512 = 2,
        IBV_MTU_1024 = 3,
        IBV_MTU_2048 = 4,
        IBV_MTU_4096 = 5,
    };
    enum ibv_mtu active_mtu;
    int gid_tbl_len;
    uint32_t port_cap_flags;
    uint32_t max_msg_sz;
    uint32_t bad_pkey_cntr;
    uint32_t qkey_viol_cntr;
    uint16_t pkey_tbl_len;
    uint16_t lid;
    uint16_t sm_lid;
    uint8_t lmc;
    uint8_t max_vl_num;
    uint8_t sm_sl;
    uint8_t subnet_timeout;
    uint8_t init_type_reply;
    uint8_t active_width;
    uint8_t active_speed;
    uint8_t phys_state;
    uint8_t link_layer;
    uint8_t flags;
    uint16_t port_cap_flags2;
    uint32_t active_speed_ex;
};

Function Name: ibv_query_gid
Output:
int ibv_query_gid(struct ibv_context * context, uint8_t port_num, int index, union ibv_gid * gid);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};
union ibv_gid {
    uint8_t[16] raw;
    struct (unnamed struct at verbs.h:66:2) global;
};

Function Name: _ibv_query_gid_ex
Output:
int _ibv_query_gid_ex(struct ibv_context * context, uint32_t port_num, uint32_t gid_index, struct ibv_gid_entry * entry, uint32_t flags, int entry_size);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};
struct ibv_gid_entry {
    union ibv_gid gid;
    union ibv_gid {
        uint8_t[16] raw;
        struct (unnamed struct at verbs.h:66:2) global;
    };
    uint32_t gid_index;
    uint32_t port_num;
    uint32_t gid_type;
    uint32_t ndev_ifindex;
};

Function Name: ibv_query_gid_ex
Output:
int ibv_query_gid_ex(struct ibv_context * context, uint32_t port_num, uint32_t gid_index, struct ibv_gid_entry * entry, uint32_t flags);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};
struct ibv_gid_entry {
    union ibv_gid gid;
    union ibv_gid {
        uint8_t[16] raw;
        struct (unnamed struct at verbs.h:66:2) global;
    };
    uint32_t gid_index;
    uint32_t port_num;
    uint32_t gid_type;
    uint32_t ndev_ifindex;
};

Function Name: _ibv_query_gid_table
Output:
ssize_t _ibv_query_gid_table(struct ibv_context * context, struct ibv_gid_entry * entries, int max_entries, uint32_t flags, int entry_size);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};
struct ibv_gid_entry {
    union ibv_gid gid;
    union ibv_gid {
        uint8_t[16] raw;
        struct (unnamed struct at verbs.h:66:2) global;
    };
    uint32_t gid_index;
    uint32_t port_num;
    uint32_t gid_type;
    uint32_t ndev_ifindex;
};

Function Name: ibv_query_gid_table
Output:
ssize_t ibv_query_gid_table(struct ibv_context * context, struct ibv_gid_entry * entries, int max_entries, uint32_t flags);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};
struct ibv_gid_entry {
    union ibv_gid gid;
    union ibv_gid {
        uint8_t[16] raw;
        struct (unnamed struct at verbs.h:66:2) global;
    };
    uint32_t gid_index;
    uint32_t port_num;
    uint32_t gid_type;
    uint32_t ndev_ifindex;
};

Function Name: ibv_query_pkey
Output:
int ibv_query_pkey(struct ibv_context * context, uint8_t port_num, int index, __be16 * pkey);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};

Function Name: ibv_get_pkey_index
Output:
int ibv_get_pkey_index(struct ibv_context * context, uint8_t port_num, __be16 pkey);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};

Function Name: ibv_alloc_pd
Output:
struct ibv_pd * ibv_alloc_pd(struct ibv_context * context);
struct ibv_pd {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    uint32_t handle;
};

Function Name: ibv_dealloc_pd
Output:
int ibv_dealloc_pd(struct ibv_pd * pd);
struct ibv_pd {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    uint32_t handle;
};

Function Name: ibv_create_flow
Output:
struct ibv_flow * ibv_create_flow(struct ibv_qp * qp, struct ibv_flow_attr * flow);
struct ibv_flow {
    uint32_t comp_mask;
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    uint32_t handle;
};
struct ibv_qp {
    struct ibv_context * context;
    void * qp_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * send_cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_srq {
        struct ibv_context * context;
        void * srq_context;
        struct ibv_pd * pd;
        uint32_t handle;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint32_t handle;
    uint32_t qp_num;
    enum ibv_qp_state state;
    enum ibv_qp_state {
        IBV_QPS_RESET = 0,
        IBV_QPS_INIT = 1,
        IBV_QPS_RTR = 2,
        IBV_QPS_RTS = 3,
        IBV_QPS_SQD = 4,
        IBV_QPS_SQE = 5,
        IBV_QPS_ERR = 6,
        IBV_QPS_UNKNOWN = 7,
    };
    enum ibv_qp_type qp_type;
    enum ibv_qp_type {
        IBV_QPT_RC = 2,
        IBV_QPT_UC = 3,
        IBV_QPT_UD = 4,
        IBV_QPT_RAW_PACKET = 8,
        IBV_QPT_XRC_SEND = 9,
        IBV_QPT_XRC_RECV = 10,
        IBV_QPT_DRIVER = 255,
    };
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_flow_attr {
    uint32_t comp_mask;
    enum ibv_flow_attr_type type;
    enum ibv_flow_attr_type {
        IBV_FLOW_ATTR_NORMAL = 0,
        IBV_FLOW_ATTR_ALL_DEFAULT = 1,
        IBV_FLOW_ATTR_MC_DEFAULT = 2,
        IBV_FLOW_ATTR_SNIFFER = 3,
    };
    uint16_t size;
    uint16_t priority;
    uint8_t num_of_specs;
    uint8_t port;
    uint32_t flags;
};

Function Name: ibv_destroy_flow
Output:
int ibv_destroy_flow(struct ibv_flow * flow_id);
struct ibv_flow {
    uint32_t comp_mask;
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    uint32_t handle;
};

Function Name: ibv_create_flow_action_esp
Output:
struct ibv_flow_action * ibv_create_flow_action_esp(struct ibv_context * ctx, struct ibv_flow_action_esp_attr * esp);
struct ibv_flow_action {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
};
struct ibv_flow_action_esp_attr {
    struct ib_uverbs_flow_action_esp * esp_attr;
    struct ib_uverbs_flow_action_esp {
        __u32 spi;
        __u32 seq;
        __u32 tfc_pad;
        __u32 flags;
        __u64 hard_limit_pkts;
    };
    enum ib_uverbs_flow_action_esp_keymat keymat_proto;
    enum ib_uverbs_flow_action_esp_keymat {
        IB_UVERBS_FLOW_ACTION_ESP_KEYMAT_AES_GCM = 0,
    };
    uint16_t keymat_len;
    void * keymat_ptr;
    enum ib_uverbs_flow_action_esp_replay replay_proto;
    enum ib_uverbs_flow_action_esp_replay {
        IB_UVERBS_FLOW_ACTION_ESP_REPLAY_NONE = 0,
        IB_UVERBS_FLOW_ACTION_ESP_REPLAY_BMP = 1,
    };
    uint16_t replay_len;
    void * replay_ptr;
    struct ib_uverbs_flow_action_esp_encap * esp_encap;
    struct ib_uverbs_flow_action_esp_encap {
        __u16 len;
        __u16 type;
    };
    uint32_t comp_mask;
    uint32_t esn;
};

Function Name: ibv_modify_flow_action_esp
Output:
int ibv_modify_flow_action_esp(struct ibv_flow_action * action, struct ibv_flow_action_esp_attr * esp);
struct ibv_flow_action {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
};
struct ibv_flow_action_esp_attr {
    struct ib_uverbs_flow_action_esp * esp_attr;
    struct ib_uverbs_flow_action_esp {
        __u32 spi;
        __u32 seq;
        __u32 tfc_pad;
        __u32 flags;
        __u64 hard_limit_pkts;
    };
    enum ib_uverbs_flow_action_esp_keymat keymat_proto;
    enum ib_uverbs_flow_action_esp_keymat {
        IB_UVERBS_FLOW_ACTION_ESP_KEYMAT_AES_GCM = 0,
    };
    uint16_t keymat_len;
    void * keymat_ptr;
    enum ib_uverbs_flow_action_esp_replay replay_proto;
    enum ib_uverbs_flow_action_esp_replay {
        IB_UVERBS_FLOW_ACTION_ESP_REPLAY_NONE = 0,
        IB_UVERBS_FLOW_ACTION_ESP_REPLAY_BMP = 1,
    };
    uint16_t replay_len;
    void * replay_ptr;
    struct ib_uverbs_flow_action_esp_encap * esp_encap;
    struct ib_uverbs_flow_action_esp_encap {
        __u16 len;
        __u16 type;
    };
    uint32_t comp_mask;
    uint32_t esn;
};

Function Name: ibv_destroy_flow_action
Output:
int ibv_destroy_flow_action(struct ibv_flow_action * action);
struct ibv_flow_action {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
};

Function Name: ibv_open_xrcd
Output:
struct ibv_xrcd * ibv_open_xrcd(struct ibv_context * context, struct ibv_xrcd_init_attr * xrcd_init_attr);
struct ibv_xrcd {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
};
struct ibv_xrcd_init_attr {
    uint32_t comp_mask;
    int fd;
    int oflags;
};

Function Name: ibv_close_xrcd
Output:
int ibv_close_xrcd(struct ibv_xrcd * xrcd);
struct ibv_xrcd {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
};

Function Name: ibv_reg_mr_iova2
Output:
struct ibv_mr * ibv_reg_mr_iova2(struct ibv_pd * pd, void * addr, int length, uint64_t iova, unsigned int access);
struct ibv_mr {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    void * addr;
    int length;
    uint32_t handle;
    uint32_t lkey;
    uint32_t rkey;
};

Function Name: ibv_reg_mr
Output:
struct ibv_mr * ibv_reg_mr(struct ibv_pd * pd, void * addr, int length, int access);
struct ibv_mr {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    void * addr;
    int length;
    uint32_t handle;
    uint32_t lkey;
    uint32_t rkey;
};

Function Name: __ibv_reg_mr
Output:
struct ibv_mr * __ibv_reg_mr(struct ibv_pd * pd, void * addr, int length, unsigned int access, int is_access_const);
struct ibv_mr {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    void * addr;
    int length;
    uint32_t handle;
    uint32_t lkey;
    uint32_t rkey;
};

Function Name: ibv_reg_mr_iova
Output:
struct ibv_mr * ibv_reg_mr_iova(struct ibv_pd * pd, void * addr, int length, uint64_t iova, int access);
struct ibv_mr {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    void * addr;
    int length;
    uint32_t handle;
    uint32_t lkey;
    uint32_t rkey;
};

Function Name: __ibv_reg_mr_iova
Output:
struct ibv_mr * __ibv_reg_mr_iova(struct ibv_pd * pd, void * addr, int length, uint64_t iova, unsigned int access, int is_access_const);
struct ibv_mr {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    void * addr;
    int length;
    uint32_t handle;
    uint32_t lkey;
    uint32_t rkey;
};

Function Name: ibv_reg_dmabuf_mr
Output:
struct ibv_mr * ibv_reg_dmabuf_mr(struct ibv_pd * pd, uint64_t offset, int length, uint64_t iova, int fd, int access);
struct ibv_mr {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    void * addr;
    int length;
    uint32_t handle;
    uint32_t lkey;
    uint32_t rkey;
};

Function Name: ibv_rereg_mr
Output:
int ibv_rereg_mr(struct ibv_mr * mr, int flags, struct ibv_pd * pd, void * addr, int length, int access);
struct ibv_mr {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    void * addr;
    int length;
    uint32_t handle;
    uint32_t lkey;
    uint32_t rkey;
};

Function Name: ibv_dereg_mr
Output:
int ibv_dereg_mr(struct ibv_mr * mr);
struct ibv_mr {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    void * addr;
    int length;
    uint32_t handle;
    uint32_t lkey;
    uint32_t rkey;
};

Function Name: ibv_alloc_mw
Output:
struct ibv_mw * ibv_alloc_mw(struct ibv_pd * pd, enum ibv_mw_type type);
struct ibv_mw {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    uint32_t rkey;
    uint32_t handle;
    enum ibv_mw_type type;
    enum ibv_mw_type {
        IBV_MW_TYPE_1 = 1,
        IBV_MW_TYPE_2 = 2,
    };
};

Function Name: ibv_dealloc_mw
Output:
int ibv_dealloc_mw(struct ibv_mw * mw);
struct ibv_mw {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    uint32_t rkey;
    uint32_t handle;
    enum ibv_mw_type type;
    enum ibv_mw_type {
        IBV_MW_TYPE_1 = 1,
        IBV_MW_TYPE_2 = 2,
    };
};

Function Name: ibv_inc_rkey
Output:
uint32_t ibv_inc_rkey(uint32_t rkey);

Function Name: ibv_bind_mw
Output:
int ibv_bind_mw(struct ibv_qp * qp, struct ibv_mw * mw, struct ibv_mw_bind * mw_bind);
struct ibv_qp {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * qp_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * send_cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_srq {
        struct ibv_context * context;
        void * srq_context;
        struct ibv_pd * pd;
        uint32_t handle;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint32_t handle;
    uint32_t qp_num;
    enum ibv_qp_state state;
    enum ibv_qp_state {
        IBV_QPS_RESET = 0,
        IBV_QPS_INIT = 1,
        IBV_QPS_RTR = 2,
        IBV_QPS_RTS = 3,
        IBV_QPS_SQD = 4,
        IBV_QPS_SQE = 5,
        IBV_QPS_ERR = 6,
        IBV_QPS_UNKNOWN = 7,
    };
    enum ibv_qp_type qp_type;
    enum ibv_qp_type {
        IBV_QPT_RC = 2,
        IBV_QPT_UC = 3,
        IBV_QPT_UD = 4,
        IBV_QPT_RAW_PACKET = 8,
        IBV_QPT_XRC_SEND = 9,
        IBV_QPT_XRC_RECV = 10,
        IBV_QPT_DRIVER = 255,
    };
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_mw {
    struct ibv_context * context;
    struct ibv_pd * pd;
    uint32_t rkey;
    uint32_t handle;
    enum ibv_mw_type type;
    enum ibv_mw_type {
        IBV_MW_TYPE_1 = 1,
        IBV_MW_TYPE_2 = 2,
    };
};
struct ibv_mw_bind {
    uint64_t wr_id;
    unsigned int send_flags;
    struct ibv_mw_bind_info bind_info;
    struct ibv_mw_bind_info {
        struct ibv_mr * mr;
        struct ibv_mr {
            struct ibv_context * context;
            struct ibv_pd * pd;
            void * addr;
            int length;
            uint32_t handle;
            uint32_t lkey;
            uint32_t rkey;
        };
        uint64_t addr;
        uint64_t length;
        unsigned int mw_access_flags;
    };
};

Function Name: ibv_create_comp_channel
Output:
struct ibv_comp_channel * ibv_create_comp_channel(struct ibv_context * context);
struct ibv_comp_channel {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    int fd;
    int refcnt;
};

Function Name: ibv_destroy_comp_channel
Output:
int ibv_destroy_comp_channel(struct ibv_comp_channel * channel);
struct ibv_comp_channel {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    int fd;
    int refcnt;
};

Function Name: ibv_advise_mr
Output:
int ibv_advise_mr(struct ibv_pd * pd, enum ib_uverbs_advise_mr_advice advice, uint32_t flags, struct ibv_sge * sg_list, uint32_t num_sge);
struct ibv_pd {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    uint32_t handle;
};
enum ib_uverbs_advise_mr_advice {
    IB_UVERBS_ADVISE_MR_ADVICE_PREFETCH = 0,
    IB_UVERBS_ADVISE_MR_ADVICE_PREFETCH_WRITE = 1,
    IB_UVERBS_ADVISE_MR_ADVICE_PREFETCH_NO_FAULT = 2,
};
struct ibv_sge {
    uint64_t addr;
    uint32_t length;
    uint32_t lkey;
};

Function Name: ibv_alloc_dm
Output:
struct ibv_dm * ibv_alloc_dm(struct ibv_context * context, struct ibv_alloc_dm_attr * attr);
struct ibv_dm {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    int (*)(struct ibv_dm *, uint64_t, const void *, int) memcpy_to_dm;
    int (*)(void *, struct ibv_dm *, uint64_t, int) memcpy_from_dm;
    uint32_t comp_mask;
    uint32_t handle;
};
struct ibv_alloc_dm_attr {
    int length;
    uint32_t log_align_req;
    uint32_t comp_mask;
};

Function Name: ibv_free_dm
Output:
int ibv_free_dm(struct ibv_dm * dm);
struct ibv_dm {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    int (*)(struct ibv_dm *, uint64_t, const void *, int) memcpy_to_dm;
    int (*)(void *, struct ibv_dm *, uint64_t, int) memcpy_from_dm;
    uint32_t comp_mask;
    uint32_t handle;
};

Function Name: ibv_memcpy_to_dm
Output:
int ibv_memcpy_to_dm(struct ibv_dm * dm, uint64_t dm_offset, const void * host_addr, int length);
struct ibv_dm {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    int (*)(struct ibv_dm *, uint64_t, const void *, int) memcpy_to_dm;
    int (*)(void *, struct ibv_dm *, uint64_t, int) memcpy_from_dm;
    uint32_t comp_mask;
    uint32_t handle;
};

Function Name: ibv_memcpy_from_dm
Output:
int ibv_memcpy_from_dm(void * host_addr, struct ibv_dm * dm, uint64_t dm_offset, int length);
struct ibv_dm {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    int (*)(struct ibv_dm *, uint64_t, const void *, int) memcpy_to_dm;
    int (*)(void *, struct ibv_dm *, uint64_t, int) memcpy_from_dm;
    uint32_t comp_mask;
    uint32_t handle;
};

Function Name: ibv_alloc_null_mr
Output:
struct ibv_mr * ibv_alloc_null_mr(struct ibv_pd * pd);
struct ibv_mr {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    void * addr;
    int length;
    uint32_t handle;
    uint32_t lkey;
    uint32_t rkey;
};

Function Name: ibv_reg_dm_mr
Output:
struct ibv_mr * ibv_reg_dm_mr(struct ibv_pd * pd, struct ibv_dm * dm, uint64_t dm_offset, int length, unsigned int access);
struct ibv_mr {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    void * addr;
    int length;
    uint32_t handle;
    uint32_t lkey;
    uint32_t rkey;
};
struct ibv_dm {
    struct ibv_context * context;
    int (*)(struct ibv_dm *, uint64_t, const void *, int) memcpy_to_dm;
    int (*)(void *, struct ibv_dm *, uint64_t, int) memcpy_from_dm;
    uint32_t comp_mask;
    uint32_t handle;
};

Function Name: ibv_create_cq
Output:
struct ibv_cq * ibv_create_cq(struct ibv_context * context, int cqe, void * cq_context, struct ibv_comp_channel * channel, int comp_vector);
struct ibv_cq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
};

Function Name: ibv_create_cq_ex
Output:
struct ibv_cq_ex * ibv_create_cq_ex(struct ibv_context * context, struct ibv_cq_init_attr_ex * cq_attr);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};
struct ibv_cq_init_attr_ex {
    uint32_t cqe;
    void * cq_context;
    struct ibv_comp_channel * channel;
    uint32_t comp_vector;
    uint64_t wc_flags;
    uint32_t comp_mask;
    uint32_t flags;
    struct ibv_pd * parent_domain;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
};

Function Name: ibv_resize_cq
Output:
int ibv_resize_cq(struct ibv_cq * cq, int cqe);
struct ibv_cq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
};

Function Name: ibv_destroy_cq
Output:
int ibv_destroy_cq(struct ibv_cq * cq);
struct ibv_cq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
};

Function Name: ibv_get_cq_event
Output:
int ibv_get_cq_event(struct ibv_comp_channel * channel, struct ibv_cq ** cq, void ** cq_context);
struct ibv_comp_channel {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    int fd;
    int refcnt;
};
struct ibv_cq {
    struct ibv_context * context;
    struct ibv_comp_channel * channel;
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
};

Function Name: ibv_ack_cq_events
Output:
void ibv_ack_cq_events(struct ibv_cq * cq, unsigned int nevents);
struct ibv_cq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
};

Function Name: ibv_poll_cq
Output:
int ibv_poll_cq(struct ibv_cq * cq, int num_entries, struct ibv_wc * wc);
struct ibv_cq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
};
struct ibv_wc {
    uint64_t wr_id;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    enum ibv_wc_opcode opcode;
    enum ibv_wc_opcode {
        IBV_WC_SEND = 0,
        IBV_WC_RDMA_WRITE = 1,
        IBV_WC_RDMA_READ = 2,
        IBV_WC_COMP_SWAP = 3,
        IBV_WC_FETCH_ADD = 4,
        IBV_WC_BIND_MW = 5,
        IBV_WC_LOCAL_INV = 6,
        IBV_WC_TSO = 7,
        IBV_WC_FLUSH = 8,
        IBV_WC_ATOMIC_WRITE = 9,
        IBV_WC_RECV = 128,
        IBV_WC_RECV_RDMA_WITH_IMM = 129,
        IBV_WC_TM_ADD = 130,
        IBV_WC_TM_DEL = 131,
        IBV_WC_TM_SYNC = 132,
        IBV_WC_TM_RECV = 133,
        IBV_WC_TM_NO_TAG = 134,
        IBV_WC_DRIVER1 = 135,
        IBV_WC_DRIVER2 = 136,
        IBV_WC_DRIVER3 = 137,
    };
    uint32_t vendor_err;
    uint32_t byte_len;
    uint32_t qp_num;
    uint32_t src_qp;
    unsigned int wc_flags;
    uint16_t pkey_index;
    uint16_t slid;
    uint8_t sl;
    uint8_t dlid_path_bits;
};

Function Name: ibv_req_notify_cq
Output:
int ibv_req_notify_cq(struct ibv_cq * cq, int solicited_only);
struct ibv_cq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
};

Function Name: ibv_modify_cq
Output:
int ibv_modify_cq(struct ibv_cq * cq, struct ibv_modify_cq_attr * attr);
struct ibv_cq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
};
struct ibv_modify_cq_attr {
    uint32_t attr_mask;
    struct ibv_moderate_cq moderate;
    struct ibv_moderate_cq {
        uint16_t cq_count;
        uint16_t cq_period;
    };
};

Function Name: ibv_create_srq
Output:
struct ibv_srq * ibv_create_srq(struct ibv_pd * pd, struct ibv_srq_init_attr * srq_init_attr);
struct ibv_srq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * srq_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    uint32_t handle;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_srq_init_attr {
    void * srq_context;
    struct ibv_srq_attr attr;
    struct ibv_srq_attr {
        uint32_t max_wr;
        uint32_t max_sge;
        uint32_t srq_limit;
    };
};

Function Name: ibv_create_srq_ex
Output:
struct ibv_srq * ibv_create_srq_ex(struct ibv_context * context, struct ibv_srq_init_attr_ex * srq_init_attr_ex);
struct ibv_srq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * srq_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    uint32_t handle;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_srq_init_attr_ex {
    void * srq_context;
    struct ibv_srq_attr attr;
    struct ibv_srq_attr {
        uint32_t max_wr;
        uint32_t max_sge;
        uint32_t srq_limit;
    };
    uint32_t comp_mask;
    enum ibv_srq_type srq_type;
    enum ibv_srq_type {
        IBV_SRQT_BASIC = 0,
        IBV_SRQT_XRC = 1,
        IBV_SRQT_TM = 2,
    };
    struct ibv_pd * pd;
    struct ibv_xrcd * xrcd;
    struct ibv_xrcd {
        struct ibv_context * context;
    };
    struct ibv_cq * cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    struct ibv_tm_cap tm_cap;
    struct ibv_tm_cap {
        uint32_t max_num_tags;
        uint32_t max_ops;
    };
};

Function Name: ibv_modify_srq
Output:
int ibv_modify_srq(struct ibv_srq * srq, struct ibv_srq_attr * srq_attr, int srq_attr_mask);
struct ibv_srq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * srq_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    uint32_t handle;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_srq_attr {
    uint32_t max_wr;
    uint32_t max_sge;
    uint32_t srq_limit;
};

Function Name: ibv_query_srq
Output:
int ibv_query_srq(struct ibv_srq * srq, struct ibv_srq_attr * srq_attr);
struct ibv_srq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * srq_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    uint32_t handle;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_srq_attr {
    uint32_t max_wr;
    uint32_t max_sge;
    uint32_t srq_limit;
};

Function Name: ibv_get_srq_num
Output:
int ibv_get_srq_num(struct ibv_srq * srq, uint32_t * srq_num);
struct ibv_srq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * srq_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    uint32_t handle;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};

Function Name: ibv_destroy_srq
Output:
int ibv_destroy_srq(struct ibv_srq * srq);
struct ibv_srq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * srq_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    uint32_t handle;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};

Function Name: ibv_post_srq_recv
Output:
int ibv_post_srq_recv(struct ibv_srq * srq, struct ibv_recv_wr * recv_wr, struct ibv_recv_wr ** bad_recv_wr);
struct ibv_srq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * srq_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    uint32_t handle;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_recv_wr {
    uint64_t wr_id;
    struct ibv_recv_wr * next;
    struct ibv_sge * sg_list;
    struct ibv_sge {
        uint64_t addr;
        uint32_t length;
        uint32_t lkey;
    };
    int num_sge;
};

Function Name: ibv_post_srq_ops
Output:
int ibv_post_srq_ops(struct ibv_srq * srq, struct ibv_ops_wr * op, struct ibv_ops_wr ** bad_op);
struct ibv_srq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * srq_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    uint32_t handle;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_ops_wr {
    uint64_t wr_id;
    struct ibv_ops_wr * next;
    enum ibv_ops_wr_opcode opcode;
    enum ibv_ops_wr_opcode {
        IBV_WR_TAG_ADD = 0,
        IBV_WR_TAG_DEL = 1,
        IBV_WR_TAG_SYNC = 2,
    };
    int flags;
    struct (unnamed struct at verbs.h:1223:2) tm;
};

Function Name: ibv_create_qp
Output:
struct ibv_qp * ibv_create_qp(struct ibv_pd * pd, struct ibv_qp_init_attr * qp_init_attr);
struct ibv_qp {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * qp_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * send_cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_srq {
        struct ibv_context * context;
        void * srq_context;
        struct ibv_pd * pd;
        uint32_t handle;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint32_t handle;
    uint32_t qp_num;
    enum ibv_qp_state state;
    enum ibv_qp_state {
        IBV_QPS_RESET = 0,
        IBV_QPS_INIT = 1,
        IBV_QPS_RTR = 2,
        IBV_QPS_RTS = 3,
        IBV_QPS_SQD = 4,
        IBV_QPS_SQE = 5,
        IBV_QPS_ERR = 6,
        IBV_QPS_UNKNOWN = 7,
    };
    enum ibv_qp_type qp_type;
    enum ibv_qp_type {
        IBV_QPT_RC = 2,
        IBV_QPT_UC = 3,
        IBV_QPT_UD = 4,
        IBV_QPT_RAW_PACKET = 8,
        IBV_QPT_XRC_SEND = 9,
        IBV_QPT_XRC_RECV = 10,
        IBV_QPT_DRIVER = 255,
    };
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_qp_init_attr {
    void * qp_context;
    struct ibv_cq * send_cq;
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_qp_cap cap;
    struct ibv_qp_cap {
        uint32_t max_send_wr;
        uint32_t max_recv_wr;
        uint32_t max_send_sge;
        uint32_t max_recv_sge;
        uint32_t max_inline_data;
    };
    enum ibv_qp_type qp_type;
    int sq_sig_all;
};

Function Name: ibv_create_qp_ex
Output:
struct ibv_qp * ibv_create_qp_ex(struct ibv_context * context, struct ibv_qp_init_attr_ex * qp_init_attr_ex);
struct ibv_qp {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * qp_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * send_cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_srq {
        struct ibv_context * context;
        void * srq_context;
        struct ibv_pd * pd;
        uint32_t handle;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint32_t handle;
    uint32_t qp_num;
    enum ibv_qp_state state;
    enum ibv_qp_state {
        IBV_QPS_RESET = 0,
        IBV_QPS_INIT = 1,
        IBV_QPS_RTR = 2,
        IBV_QPS_RTS = 3,
        IBV_QPS_SQD = 4,
        IBV_QPS_SQE = 5,
        IBV_QPS_ERR = 6,
        IBV_QPS_UNKNOWN = 7,
    };
    enum ibv_qp_type qp_type;
    enum ibv_qp_type {
        IBV_QPT_RC = 2,
        IBV_QPT_UC = 3,
        IBV_QPT_UD = 4,
        IBV_QPT_RAW_PACKET = 8,
        IBV_QPT_XRC_SEND = 9,
        IBV_QPT_XRC_RECV = 10,
        IBV_QPT_DRIVER = 255,
    };
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_qp_init_attr_ex {
    void * qp_context;
    struct ibv_cq * send_cq;
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_qp_cap cap;
    struct ibv_qp_cap {
        uint32_t max_send_wr;
        uint32_t max_recv_wr;
        uint32_t max_send_sge;
        uint32_t max_recv_sge;
        uint32_t max_inline_data;
    };
    enum ibv_qp_type qp_type;
    int sq_sig_all;
    uint32_t comp_mask;
    struct ibv_pd * pd;
    struct ibv_xrcd * xrcd;
    struct ibv_xrcd {
        struct ibv_context * context;
    };
    uint32_t create_flags;
    uint16_t max_tso_header;
    struct ibv_rwq_ind_table * rwq_ind_tbl;
    struct ibv_rwq_ind_table {
        struct ibv_context * context;
        int ind_tbl_handle;
        int ind_tbl_num;
        uint32_t comp_mask;
    };
    struct ibv_rx_hash_conf rx_hash_conf;
    struct ibv_rx_hash_conf {
        uint8_t rx_hash_function;
        uint8_t rx_hash_key_len;
        uint8_t * rx_hash_key;
        uint64_t rx_hash_fields_mask;
    };
    uint32_t source_qpn;
    uint64_t send_ops_flags;
};

Function Name: ibv_alloc_td
Output:
struct ibv_td * ibv_alloc_td(struct ibv_context * context, struct ibv_td_init_attr * init_attr);
struct ibv_td {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
};
struct ibv_td_init_attr {
    uint32_t comp_mask;
};

Function Name: ibv_dealloc_td
Output:
int ibv_dealloc_td(struct ibv_td * td);
struct ibv_td {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
};

Function Name: ibv_alloc_parent_domain
Output:
struct ibv_pd * ibv_alloc_parent_domain(struct ibv_context * context, struct ibv_parent_domain_init_attr * attr);
struct ibv_pd {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    uint32_t handle;
};
struct ibv_parent_domain_init_attr {
    struct ibv_pd * pd;
    struct ibv_td * td;
    struct ibv_td {
        struct ibv_context * context;
    };
    uint32_t comp_mask;
    void *(*)(struct ibv_pd *, void *, int, int, uint64_t) alloc;
    void (*)(struct ibv_pd *, void *, void *, uint64_t) free;
    void * pd_context;
};

Function Name: ibv_query_rt_values_ex
Output:
int ibv_query_rt_values_ex(struct ibv_context * context, struct ibv_values_ex * values);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};
struct ibv_values_ex {
    uint32_t comp_mask;
    struct timespec raw_clock;
    struct timespec {
        __kernel_time_t tv_sec;
        long tv_nsec;
    };
};

Function Name: ibv_query_device_ex
Output:
int ibv_query_device_ex(struct ibv_context * context, const struct ibv_query_device_ex_input * input, struct ibv_device_attr_ex * attr);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};
struct ibv_query_device_ex_input {
    uint32_t comp_mask;
};
struct ibv_device_attr_ex {
    struct ibv_device_attr orig_attr;
    struct ibv_device_attr {
        char[64] fw_ver;
        __be64 node_guid;
        __be64 sys_image_guid;
        uint64_t max_mr_size;
        uint64_t page_size_cap;
        uint32_t vendor_id;
        uint32_t vendor_part_id;
        uint32_t hw_ver;
        int max_qp;
        int max_qp_wr;
        unsigned int device_cap_flags;
        int max_sge;
        int max_sge_rd;
        int max_cq;
        int max_cqe;
        int max_mr;
        int max_pd;
        int max_qp_rd_atom;
        int max_ee_rd_atom;
        int max_res_rd_atom;
        int max_qp_init_rd_atom;
        int max_ee_init_rd_atom;
        enum ibv_atomic_cap atomic_cap;
        enum ibv_atomic_cap {
            IBV_ATOMIC_NONE = 0,
            IBV_ATOMIC_HCA = 1,
            IBV_ATOMIC_GLOB = 2,
        };
        int max_ee;
        int max_rdd;
        int max_mw;
        int max_raw_ipv6_qp;
        int max_raw_ethy_qp;
        int max_mcast_grp;
        int max_mcast_qp_attach;
        int max_total_mcast_qp_attach;
        int max_ah;
        int max_fmr;
        int max_map_per_fmr;
        int max_srq;
        int max_srq_wr;
        int max_srq_sge;
        uint16_t max_pkeys;
        uint8_t local_ca_ack_delay;
        uint8_t phys_port_cnt;
    };
    uint32_t comp_mask;
    struct ibv_odp_caps odp_caps;
    struct ibv_odp_caps {
        uint64_t general_caps;
        struct (unnamed struct at verbs.h:241:2) per_transport_caps;
    };
    uint64_t completion_timestamp_mask;
    uint64_t hca_core_clock;
    uint64_t device_cap_flags_ex;
    struct ibv_tso_caps tso_caps;
    struct ibv_tso_caps {
        uint32_t max_tso;
        uint32_t supported_qpts;
    };
    struct ibv_rss_caps rss_caps;
    struct ibv_rss_caps {
        uint32_t supported_qpts;
        uint32_t max_rwq_indirection_tables;
        uint32_t max_rwq_indirection_table_size;
        uint64_t rx_hash_fields_mask;
        uint8_t rx_hash_function;
    };
    uint32_t max_wq_type_rq;
    struct ibv_packet_pacing_caps packet_pacing_caps;
    struct ibv_packet_pacing_caps {
        uint32_t qp_rate_limit_min;
        uint32_t qp_rate_limit_max;
        uint32_t supported_qpts;
    };
    uint32_t raw_packet_caps;
    struct ibv_tm_caps tm_caps;
    struct ibv_tm_caps {
        uint32_t max_rndv_hdr_size;
        uint32_t max_num_tags;
        uint32_t flags;
        uint32_t max_ops;
        uint32_t max_sge;
    };
    struct ibv_cq_moderation_caps cq_mod_caps;
    struct ibv_cq_moderation_caps {
        uint16_t max_cq_count;
        uint16_t max_cq_period;
    };
    uint64_t max_dm_size;
    struct ibv_pci_atomic_caps pci_atomic_caps;
    struct ibv_pci_atomic_caps {
        uint16_t fetch_add;
        uint16_t swap;
        uint16_t compare_swap;
    };
    uint32_t xrc_odp_caps;
    uint32_t phys_port_cnt_ex;
};

Function Name: ibv_open_qp
Output:
struct ibv_qp * ibv_open_qp(struct ibv_context * context, struct ibv_qp_open_attr * qp_open_attr);
struct ibv_qp {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * qp_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * send_cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_srq {
        struct ibv_context * context;
        void * srq_context;
        struct ibv_pd * pd;
        uint32_t handle;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint32_t handle;
    uint32_t qp_num;
    enum ibv_qp_state state;
    enum ibv_qp_state {
        IBV_QPS_RESET = 0,
        IBV_QPS_INIT = 1,
        IBV_QPS_RTR = 2,
        IBV_QPS_RTS = 3,
        IBV_QPS_SQD = 4,
        IBV_QPS_SQE = 5,
        IBV_QPS_ERR = 6,
        IBV_QPS_UNKNOWN = 7,
    };
    enum ibv_qp_type qp_type;
    enum ibv_qp_type {
        IBV_QPT_RC = 2,
        IBV_QPT_UC = 3,
        IBV_QPT_UD = 4,
        IBV_QPT_RAW_PACKET = 8,
        IBV_QPT_XRC_SEND = 9,
        IBV_QPT_XRC_RECV = 10,
        IBV_QPT_DRIVER = 255,
    };
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_qp_open_attr {
    uint32_t comp_mask;
    uint32_t qp_num;
    struct ibv_xrcd * xrcd;
    struct ibv_xrcd {
        struct ibv_context * context;
    };
    void * qp_context;
    enum ibv_qp_type qp_type;
};

Function Name: ibv_modify_qp
Output:
int ibv_modify_qp(struct ibv_qp * qp, struct ibv_qp_attr * attr, int attr_mask);
struct ibv_qp {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * qp_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * send_cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_srq {
        struct ibv_context * context;
        void * srq_context;
        struct ibv_pd * pd;
        uint32_t handle;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint32_t handle;
    uint32_t qp_num;
    enum ibv_qp_state state;
    enum ibv_qp_state {
        IBV_QPS_RESET = 0,
        IBV_QPS_INIT = 1,
        IBV_QPS_RTR = 2,
        IBV_QPS_RTS = 3,
        IBV_QPS_SQD = 4,
        IBV_QPS_SQE = 5,
        IBV_QPS_ERR = 6,
        IBV_QPS_UNKNOWN = 7,
    };
    enum ibv_qp_type qp_type;
    enum ibv_qp_type {
        IBV_QPT_RC = 2,
        IBV_QPT_UC = 3,
        IBV_QPT_UD = 4,
        IBV_QPT_RAW_PACKET = 8,
        IBV_QPT_XRC_SEND = 9,
        IBV_QPT_XRC_RECV = 10,
        IBV_QPT_DRIVER = 255,
    };
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_qp_attr {
    enum ibv_qp_state qp_state;
    enum ibv_qp_state cur_qp_state;
    enum ibv_mtu path_mtu;
    enum ibv_mtu {
        IBV_MTU_256 = 1,
        IBV_MTU_512 = 2,
        IBV_MTU_1024 = 3,
        IBV_MTU_2048 = 4,
        IBV_MTU_4096 = 5,
    };
    enum ibv_mig_state path_mig_state;
    enum ibv_mig_state {
        IBV_MIG_MIGRATED = 0,
        IBV_MIG_REARM = 1,
        IBV_MIG_ARMED = 2,
    };
    uint32_t qkey;
    uint32_t rq_psn;
    uint32_t sq_psn;
    uint32_t dest_qp_num;
    unsigned int qp_access_flags;
    struct ibv_qp_cap cap;
    struct ibv_qp_cap {
        uint32_t max_send_wr;
        uint32_t max_recv_wr;
        uint32_t max_send_sge;
        uint32_t max_recv_sge;
        uint32_t max_inline_data;
    };
    struct ibv_ah_attr ah_attr;
    struct ibv_ah_attr {
        struct ibv_global_route grh;
        struct ibv_global_route {
            union ibv_gid dgid;
            union ibv_gid {
                uint8_t[16] raw;
                struct (unnamed struct at verbs.h:66:2) global;
            };
            uint32_t flow_label;
            uint8_t sgid_index;
            uint8_t hop_limit;
            uint8_t traffic_class;
        };
        uint16_t dlid;
        uint8_t sl;
        uint8_t src_path_bits;
        uint8_t static_rate;
        uint8_t is_global;
        uint8_t port_num;
    };
    struct ibv_ah_attr alt_ah_attr;
    uint16_t pkey_index;
    uint16_t alt_pkey_index;
    uint8_t en_sqd_async_notify;
    uint8_t sq_draining;
    uint8_t max_rd_atomic;
    uint8_t max_dest_rd_atomic;
    uint8_t min_rnr_timer;
    uint8_t port_num;
    uint8_t timeout;
    uint8_t retry_cnt;
    uint8_t rnr_retry;
    uint8_t alt_port_num;
    uint8_t alt_timeout;
    uint32_t rate_limit;
};

Function Name: ibv_modify_qp_rate_limit
Output:
int ibv_modify_qp_rate_limit(struct ibv_qp * qp, struct ibv_qp_rate_limit_attr * attr);
struct ibv_qp {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * qp_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * send_cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_srq {
        struct ibv_context * context;
        void * srq_context;
        struct ibv_pd * pd;
        uint32_t handle;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint32_t handle;
    uint32_t qp_num;
    enum ibv_qp_state state;
    enum ibv_qp_state {
        IBV_QPS_RESET = 0,
        IBV_QPS_INIT = 1,
        IBV_QPS_RTR = 2,
        IBV_QPS_RTS = 3,
        IBV_QPS_SQD = 4,
        IBV_QPS_SQE = 5,
        IBV_QPS_ERR = 6,
        IBV_QPS_UNKNOWN = 7,
    };
    enum ibv_qp_type qp_type;
    enum ibv_qp_type {
        IBV_QPT_RC = 2,
        IBV_QPT_UC = 3,
        IBV_QPT_UD = 4,
        IBV_QPT_RAW_PACKET = 8,
        IBV_QPT_XRC_SEND = 9,
        IBV_QPT_XRC_RECV = 10,
        IBV_QPT_DRIVER = 255,
    };
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_qp_rate_limit_attr {
    uint32_t rate_limit;
    uint32_t max_burst_sz;
    uint16_t typical_pkt_sz;
    uint32_t comp_mask;
};

Function Name: ibv_query_qp_data_in_order
Output:
int ibv_query_qp_data_in_order(struct ibv_qp * qp, enum ibv_wr_opcode op, uint32_t flags);
struct ibv_qp {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * qp_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * send_cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_srq {
        struct ibv_context * context;
        void * srq_context;
        struct ibv_pd * pd;
        uint32_t handle;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint32_t handle;
    uint32_t qp_num;
    enum ibv_qp_state state;
    enum ibv_qp_state {
        IBV_QPS_RESET = 0,
        IBV_QPS_INIT = 1,
        IBV_QPS_RTR = 2,
        IBV_QPS_RTS = 3,
        IBV_QPS_SQD = 4,
        IBV_QPS_SQE = 5,
        IBV_QPS_ERR = 6,
        IBV_QPS_UNKNOWN = 7,
    };
    enum ibv_qp_type qp_type;
    enum ibv_qp_type {
        IBV_QPT_RC = 2,
        IBV_QPT_UC = 3,
        IBV_QPT_UD = 4,
        IBV_QPT_RAW_PACKET = 8,
        IBV_QPT_XRC_SEND = 9,
        IBV_QPT_XRC_RECV = 10,
        IBV_QPT_DRIVER = 255,
    };
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
enum ibv_wr_opcode {
    IBV_WR_RDMA_WRITE = 0,
    IBV_WR_RDMA_WRITE_WITH_IMM = 1,
    IBV_WR_SEND = 2,
    IBV_WR_SEND_WITH_IMM = 3,
    IBV_WR_RDMA_READ = 4,
    IBV_WR_ATOMIC_CMP_AND_SWP = 5,
    IBV_WR_ATOMIC_FETCH_AND_ADD = 6,
    IBV_WR_LOCAL_INV = 7,
    IBV_WR_BIND_MW = 8,
    IBV_WR_SEND_WITH_INV = 9,
    IBV_WR_TSO = 10,
    IBV_WR_DRIVER1 = 11,
    IBV_WR_FLUSH = 14,
    IBV_WR_ATOMIC_WRITE = 15,
};

Function Name: ibv_query_qp
Output:
int ibv_query_qp(struct ibv_qp * qp, struct ibv_qp_attr * attr, int attr_mask, struct ibv_qp_init_attr * init_attr);
struct ibv_qp {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * qp_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * send_cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_srq {
        struct ibv_context * context;
        void * srq_context;
        struct ibv_pd * pd;
        uint32_t handle;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint32_t handle;
    uint32_t qp_num;
    enum ibv_qp_state state;
    enum ibv_qp_state {
        IBV_QPS_RESET = 0,
        IBV_QPS_INIT = 1,
        IBV_QPS_RTR = 2,
        IBV_QPS_RTS = 3,
        IBV_QPS_SQD = 4,
        IBV_QPS_SQE = 5,
        IBV_QPS_ERR = 6,
        IBV_QPS_UNKNOWN = 7,
    };
    enum ibv_qp_type qp_type;
    enum ibv_qp_type {
        IBV_QPT_RC = 2,
        IBV_QPT_UC = 3,
        IBV_QPT_UD = 4,
        IBV_QPT_RAW_PACKET = 8,
        IBV_QPT_XRC_SEND = 9,
        IBV_QPT_XRC_RECV = 10,
        IBV_QPT_DRIVER = 255,
    };
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_qp_attr {
    enum ibv_qp_state qp_state;
    enum ibv_qp_state cur_qp_state;
    enum ibv_mtu path_mtu;
    enum ibv_mtu {
        IBV_MTU_256 = 1,
        IBV_MTU_512 = 2,
        IBV_MTU_1024 = 3,
        IBV_MTU_2048 = 4,
        IBV_MTU_4096 = 5,
    };
    enum ibv_mig_state path_mig_state;
    enum ibv_mig_state {
        IBV_MIG_MIGRATED = 0,
        IBV_MIG_REARM = 1,
        IBV_MIG_ARMED = 2,
    };
    uint32_t qkey;
    uint32_t rq_psn;
    uint32_t sq_psn;
    uint32_t dest_qp_num;
    unsigned int qp_access_flags;
    struct ibv_qp_cap cap;
    struct ibv_qp_cap {
        uint32_t max_send_wr;
        uint32_t max_recv_wr;
        uint32_t max_send_sge;
        uint32_t max_recv_sge;
        uint32_t max_inline_data;
    };
    struct ibv_ah_attr ah_attr;
    struct ibv_ah_attr {
        struct ibv_global_route grh;
        struct ibv_global_route {
            union ibv_gid dgid;
            union ibv_gid {
                uint8_t[16] raw;
                struct (unnamed struct at verbs.h:66:2) global;
            };
            uint32_t flow_label;
            uint8_t sgid_index;
            uint8_t hop_limit;
            uint8_t traffic_class;
        };
        uint16_t dlid;
        uint8_t sl;
        uint8_t src_path_bits;
        uint8_t static_rate;
        uint8_t is_global;
        uint8_t port_num;
    };
    struct ibv_ah_attr alt_ah_attr;
    uint16_t pkey_index;
    uint16_t alt_pkey_index;
    uint8_t en_sqd_async_notify;
    uint8_t sq_draining;
    uint8_t max_rd_atomic;
    uint8_t max_dest_rd_atomic;
    uint8_t min_rnr_timer;
    uint8_t port_num;
    uint8_t timeout;
    uint8_t retry_cnt;
    uint8_t rnr_retry;
    uint8_t alt_port_num;
    uint8_t alt_timeout;
    uint32_t rate_limit;
};
struct ibv_qp_init_attr {
    void * qp_context;
    struct ibv_cq * send_cq;
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_qp_cap cap;
    enum ibv_qp_type qp_type;
    int sq_sig_all;
};

Function Name: ibv_destroy_qp
Output:
int ibv_destroy_qp(struct ibv_qp * qp);
struct ibv_qp {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * qp_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * send_cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_srq {
        struct ibv_context * context;
        void * srq_context;
        struct ibv_pd * pd;
        uint32_t handle;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint32_t handle;
    uint32_t qp_num;
    enum ibv_qp_state state;
    enum ibv_qp_state {
        IBV_QPS_RESET = 0,
        IBV_QPS_INIT = 1,
        IBV_QPS_RTR = 2,
        IBV_QPS_RTS = 3,
        IBV_QPS_SQD = 4,
        IBV_QPS_SQE = 5,
        IBV_QPS_ERR = 6,
        IBV_QPS_UNKNOWN = 7,
    };
    enum ibv_qp_type qp_type;
    enum ibv_qp_type {
        IBV_QPT_RC = 2,
        IBV_QPT_UC = 3,
        IBV_QPT_UD = 4,
        IBV_QPT_RAW_PACKET = 8,
        IBV_QPT_XRC_SEND = 9,
        IBV_QPT_XRC_RECV = 10,
        IBV_QPT_DRIVER = 255,
    };
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};

Function Name: ibv_create_wq
Output:
struct ibv_wq * ibv_create_wq(struct ibv_context * context, struct ibv_wq_init_attr * wq_init_attr);
struct ibv_wq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * wq_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    uint32_t wq_num;
    uint32_t handle;
    enum ibv_wq_state state;
    enum ibv_wq_state {
        IBV_WQS_RESET = 0,
        IBV_WQS_RDY = 1,
        IBV_WQS_ERR = 2,
        IBV_WQS_UNKNOWN = 3,
    };
    enum ibv_wq_type wq_type;
    enum ibv_wq_type {
        IBV_WQT_RQ = 0,
    };
    int (*)(struct ibv_wq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
    uint32_t comp_mask;
};
struct ibv_wq_init_attr {
    void * wq_context;
    enum ibv_wq_type wq_type;
    uint32_t max_wr;
    uint32_t max_sge;
    struct ibv_pd * pd;
    struct ibv_cq * cq;
    uint32_t comp_mask;
    uint32_t create_flags;
};

Function Name: ibv_modify_wq
Output:
int ibv_modify_wq(struct ibv_wq * wq, struct ibv_wq_attr * wq_attr);
struct ibv_wq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * wq_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    uint32_t wq_num;
    uint32_t handle;
    enum ibv_wq_state state;
    enum ibv_wq_state {
        IBV_WQS_RESET = 0,
        IBV_WQS_RDY = 1,
        IBV_WQS_ERR = 2,
        IBV_WQS_UNKNOWN = 3,
    };
    enum ibv_wq_type wq_type;
    enum ibv_wq_type {
        IBV_WQT_RQ = 0,
    };
    int (*)(struct ibv_wq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
    uint32_t comp_mask;
};
struct ibv_wq_attr {
    uint32_t attr_mask;
    enum ibv_wq_state wq_state;
    enum ibv_wq_state curr_wq_state;
    uint32_t flags;
    uint32_t flags_mask;
};

Function Name: ibv_destroy_wq
Output:
int ibv_destroy_wq(struct ibv_wq * wq);
struct ibv_wq {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * wq_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    uint32_t wq_num;
    uint32_t handle;
    enum ibv_wq_state state;
    enum ibv_wq_state {
        IBV_WQS_RESET = 0,
        IBV_WQS_RDY = 1,
        IBV_WQS_ERR = 2,
        IBV_WQS_UNKNOWN = 3,
    };
    enum ibv_wq_type wq_type;
    enum ibv_wq_type {
        IBV_WQT_RQ = 0,
    };
    int (*)(struct ibv_wq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
    uint32_t comp_mask;
};

Function Name: ibv_create_rwq_ind_table
Output:
struct ibv_rwq_ind_table * ibv_create_rwq_ind_table(struct ibv_context * context, struct ibv_rwq_ind_table_init_attr * init_attr);
struct ibv_rwq_ind_table {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    int ind_tbl_handle;
    int ind_tbl_num;
    uint32_t comp_mask;
};
struct ibv_rwq_ind_table_init_attr {
    uint32_t log_ind_tbl_size;
    struct ibv_wq ** ind_tbl;
    struct ibv_wq {
        struct ibv_context * context;
        void * wq_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        uint32_t wq_num;
        uint32_t handle;
        enum ibv_wq_state state;
        enum ibv_wq_state {
            IBV_WQS_RESET = 0,
            IBV_WQS_RDY = 1,
            IBV_WQS_ERR = 2,
            IBV_WQS_UNKNOWN = 3,
        };
        enum ibv_wq_type wq_type;
        enum ibv_wq_type {
            IBV_WQT_RQ = 0,
        };
        int (*)(struct ibv_wq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
        uint32_t comp_mask;
    };
    uint32_t comp_mask;
};

Function Name: ibv_destroy_rwq_ind_table
Output:
int ibv_destroy_rwq_ind_table(struct ibv_rwq_ind_table * rwq_ind_table);
struct ibv_rwq_ind_table {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    int ind_tbl_handle;
    int ind_tbl_num;
    uint32_t comp_mask;
};

Function Name: ibv_post_send
Output:
int ibv_post_send(struct ibv_qp * qp, struct ibv_send_wr * wr, struct ibv_send_wr ** bad_wr);
struct ibv_qp {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * qp_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * send_cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_srq {
        struct ibv_context * context;
        void * srq_context;
        struct ibv_pd * pd;
        uint32_t handle;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint32_t handle;
    uint32_t qp_num;
    enum ibv_qp_state state;
    enum ibv_qp_state {
        IBV_QPS_RESET = 0,
        IBV_QPS_INIT = 1,
        IBV_QPS_RTR = 2,
        IBV_QPS_RTS = 3,
        IBV_QPS_SQD = 4,
        IBV_QPS_SQE = 5,
        IBV_QPS_ERR = 6,
        IBV_QPS_UNKNOWN = 7,
    };
    enum ibv_qp_type qp_type;
    enum ibv_qp_type {
        IBV_QPT_RC = 2,
        IBV_QPT_UC = 3,
        IBV_QPT_UD = 4,
        IBV_QPT_RAW_PACKET = 8,
        IBV_QPT_XRC_SEND = 9,
        IBV_QPT_XRC_RECV = 10,
        IBV_QPT_DRIVER = 255,
    };
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_send_wr {
    uint64_t wr_id;
    struct ibv_send_wr * next;
    struct ibv_sge * sg_list;
    struct ibv_sge {
        uint64_t addr;
        uint32_t length;
        uint32_t lkey;
    };
    int num_sge;
    enum ibv_wr_opcode opcode;
    enum ibv_wr_opcode {
        IBV_WR_RDMA_WRITE = 0,
        IBV_WR_RDMA_WRITE_WITH_IMM = 1,
        IBV_WR_SEND = 2,
        IBV_WR_SEND_WITH_IMM = 3,
        IBV_WR_RDMA_READ = 4,
        IBV_WR_ATOMIC_CMP_AND_SWP = 5,
        IBV_WR_ATOMIC_FETCH_AND_ADD = 6,
        IBV_WR_LOCAL_INV = 7,
        IBV_WR_BIND_MW = 8,
        IBV_WR_SEND_WITH_INV = 9,
        IBV_WR_TSO = 10,
        IBV_WR_DRIVER1 = 11,
        IBV_WR_FLUSH = 14,
        IBV_WR_ATOMIC_WRITE = 15,
    };
    unsigned int send_flags;
    union (unnamed union at verbs.h:1164:2) wr;
    union (unnamed union at verbs.h:1181:2) qp_type;
};

Function Name: ibv_post_recv
Output:
int ibv_post_recv(struct ibv_qp * qp, struct ibv_recv_wr * wr, struct ibv_recv_wr ** bad_wr);
struct ibv_qp {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * qp_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * send_cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_srq {
        struct ibv_context * context;
        void * srq_context;
        struct ibv_pd * pd;
        uint32_t handle;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint32_t handle;
    uint32_t qp_num;
    enum ibv_qp_state state;
    enum ibv_qp_state {
        IBV_QPS_RESET = 0,
        IBV_QPS_INIT = 1,
        IBV_QPS_RTR = 2,
        IBV_QPS_RTS = 3,
        IBV_QPS_SQD = 4,
        IBV_QPS_SQE = 5,
        IBV_QPS_ERR = 6,
        IBV_QPS_UNKNOWN = 7,
    };
    enum ibv_qp_type qp_type;
    enum ibv_qp_type {
        IBV_QPT_RC = 2,
        IBV_QPT_UC = 3,
        IBV_QPT_UD = 4,
        IBV_QPT_RAW_PACKET = 8,
        IBV_QPT_XRC_SEND = 9,
        IBV_QPT_XRC_RECV = 10,
        IBV_QPT_DRIVER = 255,
    };
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_recv_wr {
    uint64_t wr_id;
    struct ibv_recv_wr * next;
    struct ibv_sge * sg_list;
    struct ibv_sge {
        uint64_t addr;
        uint32_t length;
        uint32_t lkey;
    };
    int num_sge;
};

Function Name: ibv_create_ah
Output:
struct ibv_ah * ibv_create_ah(struct ibv_pd * pd, struct ibv_ah_attr * attr);
struct ibv_ah {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    uint32_t handle;
};
struct ibv_ah_attr {
    struct ibv_global_route grh;
    struct ibv_global_route {
        union ibv_gid dgid;
        union ibv_gid {
            uint8_t[16] raw;
            struct (unnamed struct at verbs.h:66:2) global;
        };
        uint32_t flow_label;
        uint8_t sgid_index;
        uint8_t hop_limit;
        uint8_t traffic_class;
    };
    uint16_t dlid;
    uint8_t sl;
    uint8_t src_path_bits;
    uint8_t static_rate;
    uint8_t is_global;
    uint8_t port_num;
};

Function Name: ibv_init_ah_from_wc
Output:
int ibv_init_ah_from_wc(struct ibv_context * context, uint8_t port_num, struct ibv_wc * wc, struct ibv_grh * grh, struct ibv_ah_attr * ah_attr);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};
struct ibv_wc {
    uint64_t wr_id;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    enum ibv_wc_opcode opcode;
    enum ibv_wc_opcode {
        IBV_WC_SEND = 0,
        IBV_WC_RDMA_WRITE = 1,
        IBV_WC_RDMA_READ = 2,
        IBV_WC_COMP_SWAP = 3,
        IBV_WC_FETCH_ADD = 4,
        IBV_WC_BIND_MW = 5,
        IBV_WC_LOCAL_INV = 6,
        IBV_WC_TSO = 7,
        IBV_WC_FLUSH = 8,
        IBV_WC_ATOMIC_WRITE = 9,
        IBV_WC_RECV = 128,
        IBV_WC_RECV_RDMA_WITH_IMM = 129,
        IBV_WC_TM_ADD = 130,
        IBV_WC_TM_DEL = 131,
        IBV_WC_TM_SYNC = 132,
        IBV_WC_TM_RECV = 133,
        IBV_WC_TM_NO_TAG = 134,
        IBV_WC_DRIVER1 = 135,
        IBV_WC_DRIVER2 = 136,
        IBV_WC_DRIVER3 = 137,
    };
    uint32_t vendor_err;
    uint32_t byte_len;
    uint32_t qp_num;
    uint32_t src_qp;
    unsigned int wc_flags;
    uint16_t pkey_index;
    uint16_t slid;
    uint8_t sl;
    uint8_t dlid_path_bits;
};
struct ibv_grh {
    __be32 version_tclass_flow;
    __be16 paylen;
    uint8_t next_hdr;
    uint8_t hop_limit;
    union ibv_gid sgid;
    union ibv_gid {
        uint8_t[16] raw;
        struct (unnamed struct at verbs.h:66:2) global;
    };
    union ibv_gid dgid;
};
struct ibv_ah_attr {
    struct ibv_global_route grh;
    struct ibv_global_route {
        union ibv_gid dgid;
        uint32_t flow_label;
        uint8_t sgid_index;
        uint8_t hop_limit;
        uint8_t traffic_class;
    };
    uint16_t dlid;
    uint8_t sl;
    uint8_t src_path_bits;
    uint8_t static_rate;
    uint8_t is_global;
    uint8_t port_num;
};

Function Name: ibv_create_ah_from_wc
Output:
struct ibv_ah * ibv_create_ah_from_wc(struct ibv_pd * pd, struct ibv_wc * wc, struct ibv_grh * grh, uint8_t port_num);
struct ibv_ah {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    uint32_t handle;
};
struct ibv_wc {
    uint64_t wr_id;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    enum ibv_wc_opcode opcode;
    enum ibv_wc_opcode {
        IBV_WC_SEND = 0,
        IBV_WC_RDMA_WRITE = 1,
        IBV_WC_RDMA_READ = 2,
        IBV_WC_COMP_SWAP = 3,
        IBV_WC_FETCH_ADD = 4,
        IBV_WC_BIND_MW = 5,
        IBV_WC_LOCAL_INV = 6,
        IBV_WC_TSO = 7,
        IBV_WC_FLUSH = 8,
        IBV_WC_ATOMIC_WRITE = 9,
        IBV_WC_RECV = 128,
        IBV_WC_RECV_RDMA_WITH_IMM = 129,
        IBV_WC_TM_ADD = 130,
        IBV_WC_TM_DEL = 131,
        IBV_WC_TM_SYNC = 132,
        IBV_WC_TM_RECV = 133,
        IBV_WC_TM_NO_TAG = 134,
        IBV_WC_DRIVER1 = 135,
        IBV_WC_DRIVER2 = 136,
        IBV_WC_DRIVER3 = 137,
    };
    uint32_t vendor_err;
    uint32_t byte_len;
    uint32_t qp_num;
    uint32_t src_qp;
    unsigned int wc_flags;
    uint16_t pkey_index;
    uint16_t slid;
    uint8_t sl;
    uint8_t dlid_path_bits;
};
struct ibv_grh {
    __be32 version_tclass_flow;
    __be16 paylen;
    uint8_t next_hdr;
    uint8_t hop_limit;
    union ibv_gid sgid;
    union ibv_gid {
        uint8_t[16] raw;
        struct (unnamed struct at verbs.h:66:2) global;
    };
    union ibv_gid dgid;
};

Function Name: ibv_destroy_ah
Output:
int ibv_destroy_ah(struct ibv_ah * ah);
struct ibv_ah {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    uint32_t handle;
};

Function Name: ibv_attach_mcast
Output:
int ibv_attach_mcast(struct ibv_qp * qp, const union ibv_gid * gid, uint16_t lid);
struct ibv_qp {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * qp_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * send_cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_srq {
        struct ibv_context * context;
        void * srq_context;
        struct ibv_pd * pd;
        uint32_t handle;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint32_t handle;
    uint32_t qp_num;
    enum ibv_qp_state state;
    enum ibv_qp_state {
        IBV_QPS_RESET = 0,
        IBV_QPS_INIT = 1,
        IBV_QPS_RTR = 2,
        IBV_QPS_RTS = 3,
        IBV_QPS_SQD = 4,
        IBV_QPS_SQE = 5,
        IBV_QPS_ERR = 6,
        IBV_QPS_UNKNOWN = 7,
    };
    enum ibv_qp_type qp_type;
    enum ibv_qp_type {
        IBV_QPT_RC = 2,
        IBV_QPT_UC = 3,
        IBV_QPT_UD = 4,
        IBV_QPT_RAW_PACKET = 8,
        IBV_QPT_XRC_SEND = 9,
        IBV_QPT_XRC_RECV = 10,
        IBV_QPT_DRIVER = 255,
    };
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
union ibv_gid {
    uint8_t[16] raw;
    struct (unnamed struct at verbs.h:66:2) global;
};

Function Name: ibv_detach_mcast
Output:
int ibv_detach_mcast(struct ibv_qp * qp, const union ibv_gid * gid, uint16_t lid);
struct ibv_qp {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * qp_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * send_cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_srq {
        struct ibv_context * context;
        void * srq_context;
        struct ibv_pd * pd;
        uint32_t handle;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint32_t handle;
    uint32_t qp_num;
    enum ibv_qp_state state;
    enum ibv_qp_state {
        IBV_QPS_RESET = 0,
        IBV_QPS_INIT = 1,
        IBV_QPS_RTR = 2,
        IBV_QPS_RTS = 3,
        IBV_QPS_SQD = 4,
        IBV_QPS_SQE = 5,
        IBV_QPS_ERR = 6,
        IBV_QPS_UNKNOWN = 7,
    };
    enum ibv_qp_type qp_type;
    enum ibv_qp_type {
        IBV_QPT_RC = 2,
        IBV_QPT_UC = 3,
        IBV_QPT_UD = 4,
        IBV_QPT_RAW_PACKET = 8,
        IBV_QPT_XRC_SEND = 9,
        IBV_QPT_XRC_RECV = 10,
        IBV_QPT_DRIVER = 255,
    };
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
union ibv_gid {
    uint8_t[16] raw;
    struct (unnamed struct at verbs.h:66:2) global;
};

Function Name: ibv_fork_init
Output:
int ibv_fork_init();

Function Name: ibv_is_fork_initialized
Output:
enum ibv_fork_status ibv_is_fork_initialized();
enum ibv_fork_status {
    IBV_FORK_DISABLED = 0,
    IBV_FORK_ENABLED = 1,
    IBV_FORK_UNNEEDED = 2,
};

Function Name: ibv_node_type_str
Output:
const char * ibv_node_type_str(enum ibv_node_type node_type);
enum ibv_node_type {
    IBV_NODE_UNKNOWN = -1,
    IBV_NODE_CA = 1,
    IBV_NODE_SWITCH = 2,
    IBV_NODE_ROUTER = 3,
    IBV_NODE_RNIC = 4,
    IBV_NODE_USNIC = 5,
    IBV_NODE_USNIC_UDP = 6,
    IBV_NODE_UNSPECIFIED = 7,
};

Function Name: ibv_port_state_str
Output:
const char * ibv_port_state_str(enum ibv_port_state port_state);
enum ibv_port_state {
    IBV_PORT_NOP = 0,
    IBV_PORT_DOWN = 1,
    IBV_PORT_INIT = 2,
    IBV_PORT_ARMED = 3,
    IBV_PORT_ACTIVE = 4,
    IBV_PORT_ACTIVE_DEFER = 5,
};

Function Name: ibv_event_type_str
Output:
const char * ibv_event_type_str(enum ibv_event_type event);
enum ibv_event_type {
    IBV_EVENT_CQ_ERR = 0,
    IBV_EVENT_QP_FATAL = 1,
    IBV_EVENT_QP_REQ_ERR = 2,
    IBV_EVENT_QP_ACCESS_ERR = 3,
    IBV_EVENT_COMM_EST = 4,
    IBV_EVENT_SQ_DRAINED = 5,
    IBV_EVENT_PATH_MIG = 6,
    IBV_EVENT_PATH_MIG_ERR = 7,
    IBV_EVENT_DEVICE_FATAL = 8,
    IBV_EVENT_PORT_ACTIVE = 9,
    IBV_EVENT_PORT_ERR = 10,
    IBV_EVENT_LID_CHANGE = 11,
    IBV_EVENT_PKEY_CHANGE = 12,
    IBV_EVENT_SM_CHANGE = 13,
    IBV_EVENT_SRQ_ERR = 14,
    IBV_EVENT_SRQ_LIMIT_REACHED = 15,
    IBV_EVENT_QP_LAST_WQE_REACHED = 16,
    IBV_EVENT_CLIENT_REREGISTER = 17,
    IBV_EVENT_GID_CHANGE = 18,
    IBV_EVENT_WQ_FATAL = 19,
};

Function Name: ibv_resolve_eth_l2_from_gid
Output:
int ibv_resolve_eth_l2_from_gid(struct ibv_context * context, struct ibv_ah_attr * attr, uint8_t[6] eth_mac, uint16_t * vid);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};
struct ibv_ah_attr {
    struct ibv_global_route grh;
    struct ibv_global_route {
        union ibv_gid dgid;
        union ibv_gid {
            uint8_t[16] raw;
            struct (unnamed struct at verbs.h:66:2) global;
        };
        uint32_t flow_label;
        uint8_t sgid_index;
        uint8_t hop_limit;
        uint8_t traffic_class;
    };
    uint16_t dlid;
    uint8_t sl;
    uint8_t src_path_bits;
    uint8_t static_rate;
    uint8_t is_global;
    uint8_t port_num;
};

Function Name: ibv_is_qpt_supported
Output:
int ibv_is_qpt_supported(uint32_t caps, enum ibv_qp_type qpt);
enum ibv_qp_type {
    IBV_QPT_RC = 2,
    IBV_QPT_UC = 3,
    IBV_QPT_UD = 4,
    IBV_QPT_RAW_PACKET = 8,
    IBV_QPT_XRC_SEND = 9,
    IBV_QPT_XRC_RECV = 10,
    IBV_QPT_DRIVER = 255,
};

Function Name: ibv_create_counters
Output:
struct ibv_counters * ibv_create_counters(struct ibv_context * context, struct ibv_counters_init_attr * init_attr);
struct ibv_counters {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
};
struct ibv_counters_init_attr {
    uint32_t comp_mask;
};

Function Name: ibv_destroy_counters
Output:
int ibv_destroy_counters(struct ibv_counters * counters);
struct ibv_counters {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
};

Function Name: ibv_attach_counters_point_flow
Output:
int ibv_attach_counters_point_flow(struct ibv_counters * counters, struct ibv_counter_attach_attr * attr, struct ibv_flow * flow);
struct ibv_counters {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
};
struct ibv_counter_attach_attr {
    enum ibv_counter_description counter_desc;
    enum ibv_counter_description {
        IBV_COUNTER_PACKETS = 0,
        IBV_COUNTER_BYTES = 1,
    };
    uint32_t index;
    uint32_t comp_mask;
};
struct ibv_flow {
    uint32_t comp_mask;
    struct ibv_context * context;
    uint32_t handle;
};

Function Name: ibv_read_counters
Output:
int ibv_read_counters(struct ibv_counters * counters, uint64_t * counters_value, uint32_t ncounters, uint32_t flags);
struct ibv_counters {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
};

Function Name: ibv_flow_label_to_udp_sport
Output:
uint16_t ibv_flow_label_to_udp_sport(uint32_t fl);

Function Name: ibv_set_ece
Output:
int ibv_set_ece(struct ibv_qp * qp, struct ibv_ece * ece);
struct ibv_qp {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * qp_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * send_cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_srq {
        struct ibv_context * context;
        void * srq_context;
        struct ibv_pd * pd;
        uint32_t handle;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint32_t handle;
    uint32_t qp_num;
    enum ibv_qp_state state;
    enum ibv_qp_state {
        IBV_QPS_RESET = 0,
        IBV_QPS_INIT = 1,
        IBV_QPS_RTR = 2,
        IBV_QPS_RTS = 3,
        IBV_QPS_SQD = 4,
        IBV_QPS_SQE = 5,
        IBV_QPS_ERR = 6,
        IBV_QPS_UNKNOWN = 7,
    };
    enum ibv_qp_type qp_type;
    enum ibv_qp_type {
        IBV_QPT_RC = 2,
        IBV_QPT_UC = 3,
        IBV_QPT_UD = 4,
        IBV_QPT_RAW_PACKET = 8,
        IBV_QPT_XRC_SEND = 9,
        IBV_QPT_XRC_RECV = 10,
        IBV_QPT_DRIVER = 255,
    };
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_ece {
    uint32_t vendor_id;
    uint32_t options;
    uint32_t comp_mask;
};

Function Name: ibv_query_ece
Output:
int ibv_query_ece(struct ibv_qp * qp, struct ibv_ece * ece);
struct ibv_qp {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    void * qp_context;
    struct ibv_pd * pd;
    struct ibv_pd {
        struct ibv_context * context;
        uint32_t handle;
    };
    struct ibv_cq * send_cq;
    struct ibv_cq {
        struct ibv_context * context;
        struct ibv_comp_channel * channel;
        struct ibv_comp_channel {
            struct ibv_context * context;
            int fd;
            int refcnt;
        };
        void * cq_context;
        uint32_t handle;
        int cqe;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t comp_events_completed;
        uint32_t async_events_completed;
    };
    struct ibv_cq * recv_cq;
    struct ibv_srq * srq;
    struct ibv_srq {
        struct ibv_context * context;
        void * srq_context;
        struct ibv_pd * pd;
        uint32_t handle;
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint32_t handle;
    uint32_t qp_num;
    enum ibv_qp_state state;
    enum ibv_qp_state {
        IBV_QPS_RESET = 0,
        IBV_QPS_INIT = 1,
        IBV_QPS_RTR = 2,
        IBV_QPS_RTS = 3,
        IBV_QPS_SQD = 4,
        IBV_QPS_SQE = 5,
        IBV_QPS_ERR = 6,
        IBV_QPS_UNKNOWN = 7,
    };
    enum ibv_qp_type qp_type;
    enum ibv_qp_type {
        IBV_QPT_RC = 2,
        IBV_QPT_UC = 3,
        IBV_QPT_UD = 4,
        IBV_QPT_RAW_PACKET = 8,
        IBV_QPT_XRC_SEND = 9,
        IBV_QPT_XRC_RECV = 10,
        IBV_QPT_DRIVER = 255,
    };
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t events_completed;
};
struct ibv_ece {
    uint32_t vendor_id;
    uint32_t options;
    uint32_t comp_mask;
};

