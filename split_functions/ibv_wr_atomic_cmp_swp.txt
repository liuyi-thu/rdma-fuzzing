Function Name: ibv_wr_atomic_cmp_swp
Output:
void ibv_wr_atomic_cmp_swp(struct ibv_qp_ex * qp, uint32_t rkey, uint64_t remote_addr, uint64_t compare, uint64_t swap);
struct ibv_qp_ex {
    struct ibv_qp qp_base;
    struct ibv_qp {
        struct ibv_context * context;
        struct ibv_context {
            struct ibv_device * device;
            struct ibv_device {
                struct _ibv_device_ops _ops;
                struct _ibv_device_ops {
                    struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                    void (*)(struct ibv_context *) _dummy2;
                };
                enum ibv_node_type node_type;
                enum ibv_node_type {
                    IBV_NODE_UNKNOWN = -1,
                    IBV_NODE_CA = 1,
                    IBV_NODE_SWITCH = 2,
                    IBV_NODE_ROUTER = 3,
                    IBV_NODE_RNIC = 4,
                    IBV_NODE_USNIC = 5,
                    IBV_NODE_USNIC_UDP = 6,
                    IBV_NODE_UNSPECIFIED = 7,
                };
                enum ibv_transport_type transport_type;
                enum ibv_transport_type {
                    IBV_TRANSPORT_UNKNOWN = -1,
                    IBV_TRANSPORT_IB = 0,
                    IBV_TRANSPORT_IWARP = 1,
                    IBV_TRANSPORT_USNIC = 2,
                    IBV_TRANSPORT_USNIC_UDP = 3,
                    IBV_TRANSPORT_UNSPECIFIED = 4,
                };
                char[64] name;
                char[64] dev_name;
                char[256] dev_path;
                char[256] ibdev_path;
            };
            struct ibv_context_ops ops;
            struct ibv_context_ops {
                int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
                int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
                void *(*)(void) _compat_alloc_pd;
                void *(*)(void) _compat_dealloc_pd;
                void *(*)(void) _compat_reg_mr;
                void *(*)(void) _compat_rereg_mr;
                void *(*)(void) _compat_dereg_mr;
                struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
                int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
                int (*)(struct ibv_mw *) dealloc_mw;
                void *(*)(void) _compat_create_cq;
                int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
                int (*)(struct ibv_cq *, int) req_notify_cq;
                void *(*)(void) _compat_cq_event;
                void *(*)(void) _compat_resize_cq;
                void *(*)(void) _compat_destroy_cq;
                void *(*)(void) _compat_create_srq;
                void *(*)(void) _compat_modify_srq;
                void *(*)(void) _compat_query_srq;
                void *(*)(void) _compat_destroy_srq;
                int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
                void *(*)(void) _compat_create_qp;
                void *(*)(void) _compat_query_qp;
                void *(*)(void) _compat_modify_qp;
                void *(*)(void) _compat_destroy_qp;
                int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
                int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
                void *(*)(void) _compat_create_ah;
                void *(*)(void) _compat_destroy_ah;
                void *(*)(void) _compat_attach_mcast;
                void *(*)(void) _compat_detach_mcast;
                void *(*)(void) _compat_async_event;
            };
            int cmd_fd;
            int async_fd;
            int num_comp_vectors;
            pthread_mutex_t mutex;
            void * abi_compat;
        };
        void * qp_context;
        struct ibv_pd * pd;
        struct ibv_pd {
            struct ibv_context * context;
            uint32_t handle;
        };
        struct ibv_cq * send_cq;
        struct ibv_cq {
            struct ibv_context * context;
            struct ibv_comp_channel * channel;
            struct ibv_comp_channel {
                struct ibv_context * context;
                int fd;
                int refcnt;
            };
            void * cq_context;
            uint32_t handle;
            int cqe;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t comp_events_completed;
            uint32_t async_events_completed;
        };
        struct ibv_cq * recv_cq;
        struct ibv_srq * srq;
        struct ibv_srq {
            struct ibv_context * context;
            void * srq_context;
            struct ibv_pd * pd;
            uint32_t handle;
            pthread_mutex_t mutex;
            pthread_cond_t cond;
            uint32_t events_completed;
        };
        uint32_t handle;
        uint32_t qp_num;
        enum ibv_qp_state state;
        enum ibv_qp_state {
            IBV_QPS_RESET = 0,
            IBV_QPS_INIT = 1,
            IBV_QPS_RTR = 2,
            IBV_QPS_RTS = 3,
            IBV_QPS_SQD = 4,
            IBV_QPS_SQE = 5,
            IBV_QPS_ERR = 6,
            IBV_QPS_UNKNOWN = 7,
        };
        enum ibv_qp_type qp_type;
        enum ibv_qp_type {
            IBV_QPT_RC = 2,
            IBV_QPT_UC = 3,
            IBV_QPT_UD = 4,
            IBV_QPT_RAW_PACKET = 8,
            IBV_QPT_XRC_SEND = 9,
            IBV_QPT_XRC_RECV = 10,
            IBV_QPT_DRIVER = 255,
        };
        pthread_mutex_t mutex;
        pthread_cond_t cond;
        uint32_t events_completed;
    };
    uint64_t comp_mask;
    uint64_t wr_id;
    unsigned int wr_flags;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t, uint64_t) wr_atomic_cmp_swp;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint64_t) wr_atomic_fetch_add;
    void (*)(struct ibv_qp_ex *, struct ibv_mw *, uint32_t, const struct ibv_mw_bind_info *) wr_bind_mw;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_local_inv;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_read;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t) wr_rdma_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, __be32) wr_rdma_write_imm;
    void (*)(struct ibv_qp_ex *) wr_send;
    void (*)(struct ibv_qp_ex *, __be32) wr_send_imm;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_send_inv;
    void (*)(struct ibv_qp_ex *, void *, uint16_t, uint16_t) wr_send_tso;
    void (*)(struct ibv_qp_ex *, struct ibv_ah *, uint32_t, uint32_t) wr_set_ud_addr;
    void (*)(struct ibv_qp_ex *, uint32_t) wr_set_xrc_srqn;
    void (*)(struct ibv_qp_ex *, void *, int) wr_set_inline_data;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_data_buf *) wr_set_inline_data_list;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, uint32_t) wr_set_sge;
    void (*)(struct ibv_qp_ex *, int, const struct ibv_sge *) wr_set_sge_list;
    void (*)(struct ibv_qp_ex *) wr_start;
    int (*)(struct ibv_qp_ex *) wr_complete;
    void (*)(struct ibv_qp_ex *) wr_abort;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, const void *) wr_atomic_write;
    void (*)(struct ibv_qp_ex *, uint32_t, uint64_t, int, uint8_t, uint8_t) wr_flush;
};

