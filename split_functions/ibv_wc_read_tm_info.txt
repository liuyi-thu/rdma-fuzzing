Function Name: ibv_wc_read_tm_info
Output:
void ibv_wc_read_tm_info(struct ibv_cq_ex * cq, struct ibv_wc_tm_info * tm_info);
struct ibv_cq_ex {
    struct ibv_context * context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
    struct ibv_comp_channel * channel;
    struct ibv_comp_channel {
        struct ibv_context * context;
        int fd;
        int refcnt;
    };
    void * cq_context;
    uint32_t handle;
    int cqe;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint32_t comp_events_completed;
    uint32_t async_events_completed;
    uint32_t comp_mask;
    enum ibv_wc_status status;
    enum ibv_wc_status {
        IBV_WC_SUCCESS = 0,
        IBV_WC_LOC_LEN_ERR = 1,
        IBV_WC_LOC_QP_OP_ERR = 2,
        IBV_WC_LOC_EEC_OP_ERR = 3,
        IBV_WC_LOC_PROT_ERR = 4,
        IBV_WC_WR_FLUSH_ERR = 5,
        IBV_WC_MW_BIND_ERR = 6,
        IBV_WC_BAD_RESP_ERR = 7,
        IBV_WC_LOC_ACCESS_ERR = 8,
        IBV_WC_REM_INV_REQ_ERR = 9,
        IBV_WC_REM_ACCESS_ERR = 10,
        IBV_WC_REM_OP_ERR = 11,
        IBV_WC_RETRY_EXC_ERR = 12,
        IBV_WC_RNR_RETRY_EXC_ERR = 13,
        IBV_WC_LOC_RDD_VIOL_ERR = 14,
        IBV_WC_REM_INV_RD_REQ_ERR = 15,
        IBV_WC_REM_ABORT_ERR = 16,
        IBV_WC_INV_EECN_ERR = 17,
        IBV_WC_INV_EEC_STATE_ERR = 18,
        IBV_WC_FATAL_ERR = 19,
        IBV_WC_RESP_TIMEOUT_ERR = 20,
        IBV_WC_GENERAL_ERR = 21,
        IBV_WC_TM_ERR = 22,
        IBV_WC_TM_RNDV_INCOMPLETE = 23,
    };
    uint64_t wr_id;
    int (*)(struct ibv_cq_ex *, struct ibv_poll_cq_attr *) start_poll;
    int (*)(struct ibv_cq_ex *) next_poll;
    void (*)(struct ibv_cq_ex *) end_poll;
    enum ibv_wc_opcode (*)(struct ibv_cq_ex *) read_opcode;
    uint32_t (*)(struct ibv_cq_ex *) read_vendor_err;
    uint32_t (*)(struct ibv_cq_ex *) read_byte_len;
    __be32 (*)(struct ibv_cq_ex *) read_imm_data;
    uint32_t (*)(struct ibv_cq_ex *) read_qp_num;
    uint32_t (*)(struct ibv_cq_ex *) read_src_qp;
    unsigned int (*)(struct ibv_cq_ex *) read_wc_flags;
    uint32_t (*)(struct ibv_cq_ex *) read_slid;
    uint8_t (*)(struct ibv_cq_ex *) read_sl;
    uint8_t (*)(struct ibv_cq_ex *) read_dlid_path_bits;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_ts;
    uint16_t (*)(struct ibv_cq_ex *) read_cvlan;
    uint32_t (*)(struct ibv_cq_ex *) read_flow_tag;
    void (*)(struct ibv_cq_ex *, struct ibv_wc_tm_info *) read_tm_info;
    uint64_t (*)(struct ibv_cq_ex *) read_completion_wallclock_ns;
};
struct ibv_wc_tm_info {
    uint64_t tag;
    uint32_t priv;
};

