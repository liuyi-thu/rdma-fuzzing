Function Name: ibv_query_device_ex
Output:
int ibv_query_device_ex(struct ibv_context * context, const struct ibv_query_device_ex_input * input, struct ibv_device_attr_ex * attr);
struct ibv_context {
    struct ibv_device * device;
    struct ibv_device {
        struct _ibv_device_ops _ops;
        struct _ibv_device_ops {
            struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
            void (*)(struct ibv_context *) _dummy2;
        };
        enum ibv_node_type node_type;
        enum ibv_node_type {
            IBV_NODE_UNKNOWN = -1,
            IBV_NODE_CA = 1,
            IBV_NODE_SWITCH = 2,
            IBV_NODE_ROUTER = 3,
            IBV_NODE_RNIC = 4,
            IBV_NODE_USNIC = 5,
            IBV_NODE_USNIC_UDP = 6,
            IBV_NODE_UNSPECIFIED = 7,
        };
        enum ibv_transport_type transport_type;
        enum ibv_transport_type {
            IBV_TRANSPORT_UNKNOWN = -1,
            IBV_TRANSPORT_IB = 0,
            IBV_TRANSPORT_IWARP = 1,
            IBV_TRANSPORT_USNIC = 2,
            IBV_TRANSPORT_USNIC_UDP = 3,
            IBV_TRANSPORT_UNSPECIFIED = 4,
        };
        char[64] name;
        char[64] dev_name;
        char[256] dev_path;
        char[256] ibdev_path;
    };
    struct ibv_context_ops ops;
    struct ibv_context_ops {
        int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
        int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
        void *(*)(void) _compat_alloc_pd;
        void *(*)(void) _compat_dealloc_pd;
        void *(*)(void) _compat_reg_mr;
        void *(*)(void) _compat_rereg_mr;
        void *(*)(void) _compat_dereg_mr;
        struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
        int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
        int (*)(struct ibv_mw *) dealloc_mw;
        void *(*)(void) _compat_create_cq;
        int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
        int (*)(struct ibv_cq *, int) req_notify_cq;
        void *(*)(void) _compat_cq_event;
        void *(*)(void) _compat_resize_cq;
        void *(*)(void) _compat_destroy_cq;
        void *(*)(void) _compat_create_srq;
        void *(*)(void) _compat_modify_srq;
        void *(*)(void) _compat_query_srq;
        void *(*)(void) _compat_destroy_srq;
        int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
        void *(*)(void) _compat_create_qp;
        void *(*)(void) _compat_query_qp;
        void *(*)(void) _compat_modify_qp;
        void *(*)(void) _compat_destroy_qp;
        int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
        int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
        void *(*)(void) _compat_create_ah;
        void *(*)(void) _compat_destroy_ah;
        void *(*)(void) _compat_attach_mcast;
        void *(*)(void) _compat_detach_mcast;
        void *(*)(void) _compat_async_event;
    };
    int cmd_fd;
    int async_fd;
    int num_comp_vectors;
    pthread_mutex_t mutex;
    void * abi_compat;
};
struct ibv_query_device_ex_input {
    uint32_t comp_mask;
};
struct ibv_device_attr_ex {
    struct ibv_device_attr orig_attr;
    struct ibv_device_attr {
        char[64] fw_ver;
        __be64 node_guid;
        __be64 sys_image_guid;
        uint64_t max_mr_size;
        uint64_t page_size_cap;
        uint32_t vendor_id;
        uint32_t vendor_part_id;
        uint32_t hw_ver;
        int max_qp;
        int max_qp_wr;
        unsigned int device_cap_flags;
        int max_sge;
        int max_sge_rd;
        int max_cq;
        int max_cqe;
        int max_mr;
        int max_pd;
        int max_qp_rd_atom;
        int max_ee_rd_atom;
        int max_res_rd_atom;
        int max_qp_init_rd_atom;
        int max_ee_init_rd_atom;
        enum ibv_atomic_cap atomic_cap;
        enum ibv_atomic_cap {
            IBV_ATOMIC_NONE = 0,
            IBV_ATOMIC_HCA = 1,
            IBV_ATOMIC_GLOB = 2,
        };
        int max_ee;
        int max_rdd;
        int max_mw;
        int max_raw_ipv6_qp;
        int max_raw_ethy_qp;
        int max_mcast_grp;
        int max_mcast_qp_attach;
        int max_total_mcast_qp_attach;
        int max_ah;
        int max_fmr;
        int max_map_per_fmr;
        int max_srq;
        int max_srq_wr;
        int max_srq_sge;
        uint16_t max_pkeys;
        uint8_t local_ca_ack_delay;
        uint8_t phys_port_cnt;
    };
    uint32_t comp_mask;
    struct ibv_odp_caps odp_caps;
    struct ibv_odp_caps {
        uint64_t general_caps;
        struct (unnamed struct at verbs.h:241:2) per_transport_caps;
    };
    uint64_t completion_timestamp_mask;
    uint64_t hca_core_clock;
    uint64_t device_cap_flags_ex;
    struct ibv_tso_caps tso_caps;
    struct ibv_tso_caps {
        uint32_t max_tso;
        uint32_t supported_qpts;
    };
    struct ibv_rss_caps rss_caps;
    struct ibv_rss_caps {
        uint32_t supported_qpts;
        uint32_t max_rwq_indirection_tables;
        uint32_t max_rwq_indirection_table_size;
        uint64_t rx_hash_fields_mask;
        uint8_t rx_hash_function;
    };
    uint32_t max_wq_type_rq;
    struct ibv_packet_pacing_caps packet_pacing_caps;
    struct ibv_packet_pacing_caps {
        uint32_t qp_rate_limit_min;
        uint32_t qp_rate_limit_max;
        uint32_t supported_qpts;
    };
    uint32_t raw_packet_caps;
    struct ibv_tm_caps tm_caps;
    struct ibv_tm_caps {
        uint32_t max_rndv_hdr_size;
        uint32_t max_num_tags;
        uint32_t flags;
        uint32_t max_ops;
        uint32_t max_sge;
    };
    struct ibv_cq_moderation_caps cq_mod_caps;
    struct ibv_cq_moderation_caps {
        uint16_t max_cq_count;
        uint16_t max_cq_period;
    };
    uint64_t max_dm_size;
    struct ibv_pci_atomic_caps pci_atomic_caps;
    struct ibv_pci_atomic_caps {
        uint16_t fetch_add;
        uint16_t swap;
        uint16_t compare_swap;
    };
    uint32_t xrc_odp_caps;
    uint32_t phys_port_cnt_ex;
};

