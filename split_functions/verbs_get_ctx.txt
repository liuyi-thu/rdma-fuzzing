Function Name: verbs_get_ctx
Output:
struct verbs_context * verbs_get_ctx(struct ibv_context * ctx);
struct verbs_context {
    int (*)(struct ibv_context *, uint8_t, struct ibv_port_attr *, int) query_port;
    int (*)(struct ibv_pd *, enum ib_uverbs_advise_mr_advice, uint32_t, struct ibv_sge *, uint32_t) advise_mr;
    struct ibv_mr *(*)(struct ibv_pd *) alloc_null_mr;
    int (*)(struct ibv_counters *, uint64_t *, uint32_t, uint32_t) read_counters;
    int (*)(struct ibv_counters *, struct ibv_counter_attach_attr *, struct ibv_flow *) attach_counters_point_flow;
    struct ibv_counters *(*)(struct ibv_context *, struct ibv_counters_init_attr *) create_counters;
    int (*)(struct ibv_counters *) destroy_counters;
    struct ibv_mr *(*)(struct ibv_pd *, struct ibv_dm *, uint64_t, int, unsigned int) reg_dm_mr;
    struct ibv_dm *(*)(struct ibv_context *, struct ibv_alloc_dm_attr *) alloc_dm;
    int (*)(struct ibv_dm *) free_dm;
    int (*)(struct ibv_flow_action *, struct ibv_flow_action_esp_attr *) modify_flow_action_esp;
    int (*)(struct ibv_flow_action *) destroy_flow_action;
    struct ibv_flow_action *(*)(struct ibv_context *, struct ibv_flow_action_esp_attr *) create_flow_action_esp;
    int (*)(struct ibv_qp *, struct ibv_qp_rate_limit_attr *) modify_qp_rate_limit;
    struct ibv_pd *(*)(struct ibv_context *, struct ibv_parent_domain_init_attr *) alloc_parent_domain;
    int (*)(struct ibv_td *) dealloc_td;
    struct ibv_td *(*)(struct ibv_context *, struct ibv_td_init_attr *) alloc_td;
    int (*)(struct ibv_cq *, struct ibv_modify_cq_attr *) modify_cq;
    int (*)(struct ibv_srq *, struct ibv_ops_wr *, struct ibv_ops_wr **) post_srq_ops;
    int (*)(struct ibv_rwq_ind_table *) destroy_rwq_ind_table;
    struct ibv_rwq_ind_table *(*)(struct ibv_context *, struct ibv_rwq_ind_table_init_attr *) create_rwq_ind_table;
    int (*)(struct ibv_wq *) destroy_wq;
    int (*)(struct ibv_wq *, struct ibv_wq_attr *) modify_wq;
    struct ibv_wq *(*)(struct ibv_context *, struct ibv_wq_init_attr *) create_wq;
    int (*)(struct ibv_context *, struct ibv_values_ex *) query_rt_values;
    struct ibv_cq_ex *(*)(struct ibv_context *, struct ibv_cq_init_attr_ex *) create_cq_ex;
    struct verbs_ex_private * priv;
    int (*)(struct ibv_context *, const struct ibv_query_device_ex_input *, struct ibv_device_attr_ex *, int) query_device_ex;
    int (*)(struct ibv_flow *) ibv_destroy_flow;
    void (*)(void) ABI_placeholder2;
    struct ibv_flow *(*)(struct ibv_qp *, struct ibv_flow_attr *) ibv_create_flow;
    void (*)(void) ABI_placeholder1;
    struct ibv_qp *(*)(struct ibv_context *, struct ibv_qp_open_attr *) open_qp;
    struct ibv_qp *(*)(struct ibv_context *, struct ibv_qp_init_attr_ex *) create_qp_ex;
    int (*)(struct ibv_srq *, uint32_t *) get_srq_num;
    struct ibv_srq *(*)(struct ibv_context *, struct ibv_srq_init_attr_ex *) create_srq_ex;
    struct ibv_xrcd *(*)(struct ibv_context *, struct ibv_xrcd_init_attr *) open_xrcd;
    int (*)(struct ibv_xrcd *) close_xrcd;
    uint64_t _ABI_placeholder3;
    int sz;
    struct ibv_context context;
    struct ibv_context {
        struct ibv_device * device;
        struct ibv_device {
            struct _ibv_device_ops _ops;
            struct _ibv_device_ops {
                struct ibv_context *(*)(struct ibv_device *, int) _dummy1;
                void (*)(struct ibv_context *) _dummy2;
            };
            enum ibv_node_type node_type;
            enum ibv_node_type {
                IBV_NODE_UNKNOWN = -1,
                IBV_NODE_CA = 1,
                IBV_NODE_SWITCH = 2,
                IBV_NODE_ROUTER = 3,
                IBV_NODE_RNIC = 4,
                IBV_NODE_USNIC = 5,
                IBV_NODE_USNIC_UDP = 6,
                IBV_NODE_UNSPECIFIED = 7,
            };
            enum ibv_transport_type transport_type;
            enum ibv_transport_type {
                IBV_TRANSPORT_UNKNOWN = -1,
                IBV_TRANSPORT_IB = 0,
                IBV_TRANSPORT_IWARP = 1,
                IBV_TRANSPORT_USNIC = 2,
                IBV_TRANSPORT_USNIC_UDP = 3,
                IBV_TRANSPORT_UNSPECIFIED = 4,
            };
            char[64] name;
            char[64] dev_name;
            char[256] dev_path;
            char[256] ibdev_path;
        };
        struct ibv_context_ops ops;
        struct ibv_context_ops {
            int (*)(struct ibv_context *, struct ibv_device_attr *) _compat_query_device;
            int (*)(struct ibv_context *, uint8_t, struct _compat_ibv_port_attr *) _compat_query_port;
            void *(*)(void) _compat_alloc_pd;
            void *(*)(void) _compat_dealloc_pd;
            void *(*)(void) _compat_reg_mr;
            void *(*)(void) _compat_rereg_mr;
            void *(*)(void) _compat_dereg_mr;
            struct ibv_mw *(*)(struct ibv_pd *, enum ibv_mw_type) alloc_mw;
            int (*)(struct ibv_qp *, struct ibv_mw *, struct ibv_mw_bind *) bind_mw;
            int (*)(struct ibv_mw *) dealloc_mw;
            void *(*)(void) _compat_create_cq;
            int (*)(struct ibv_cq *, int, struct ibv_wc *) poll_cq;
            int (*)(struct ibv_cq *, int) req_notify_cq;
            void *(*)(void) _compat_cq_event;
            void *(*)(void) _compat_resize_cq;
            void *(*)(void) _compat_destroy_cq;
            void *(*)(void) _compat_create_srq;
            void *(*)(void) _compat_modify_srq;
            void *(*)(void) _compat_query_srq;
            void *(*)(void) _compat_destroy_srq;
            int (*)(struct ibv_srq *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_srq_recv;
            void *(*)(void) _compat_create_qp;
            void *(*)(void) _compat_query_qp;
            void *(*)(void) _compat_modify_qp;
            void *(*)(void) _compat_destroy_qp;
            int (*)(struct ibv_qp *, struct ibv_send_wr *, struct ibv_send_wr **) post_send;
            int (*)(struct ibv_qp *, struct ibv_recv_wr *, struct ibv_recv_wr **) post_recv;
            void *(*)(void) _compat_create_ah;
            void *(*)(void) _compat_destroy_ah;
            void *(*)(void) _compat_attach_mcast;
            void *(*)(void) _compat_detach_mcast;
            void *(*)(void) _compat_async_event;
        };
        int cmd_fd;
        int async_fd;
        int num_comp_vectors;
        pthread_mutex_t mutex;
        void * abi_compat;
    };
};

