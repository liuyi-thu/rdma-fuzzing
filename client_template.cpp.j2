// AUTOGEN: RDMA client (pairs + runtime) — generated by your fuzzer
// Toolchain: g++ -O2 -std=c++17 {{compile_units}} -libverbs -pthread -o {{output_name}}

#include <infiniband/verbs.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <thread>
#include <vector>
#include <string>
#include <algorithm>

#include "pair_runtime.h"

using std::string;
using std::vector;

static void die(const char* m){ perror(m); exit(1); }

static int to_init(ibv_qp* qp, uint8_t port){
    ibv_qp_attr a; memset(&a,0,sizeof(a));
    a.qp_state=IBV_QPS_INIT; a.pkey_index=0; a.port_num=port;
    a.qp_access_flags=IBV_ACCESS_LOCAL_WRITE|IBV_ACCESS_REMOTE_READ|IBV_ACCESS_REMOTE_WRITE;
    int flags=IBV_QP_STATE|IBV_QP_PKEY_INDEX|IBV_QP_PORT|IBV_QP_ACCESS_FLAGS;
    return ibv_modify_qp(qp,&a,flags);
}

// --------- User-configurable knobs (autofilled by generator) ----------
static const int IB_PORT = {{ ib_port|default(1) }};
static const int MSG_SIZE = {{ msg_size|default(1024) }};
static const char* BUNDLE_ENV = "{{ bundle_env|default('RDMA_FUZZ_RUNTIME') }}";
static const char* CLIENT_UPDATE_PATH = "{{ client_update|default('client_update.json') }}";
static const char* PAIR_ID = "{{ pair_id|default('pair-cli0-srv0') }}";
static const char* CLI_ID  = "{{ cli_id|default('cli0') }}";
static const char* SRV_ID  = "{{ srv_id|default('srv0') }}";

// --------- Prolog helper (optional; you can keep minimal) -------------
{{ prolog_extra|default('') }}

// ---------------------- main ----------------------
int main(int argc, char** argv){
    pr_init(BUNDLE_ENV);

    // --- Open device / PD / CQ ---
    int num=0; ibv_device** dev_list=ibv_get_device_list(&num);
    if (!dev_list || num<=0) die("ibv_get_device_list");
    ibv_context* ctx = ibv_open_device(dev_list[0]); if(!ctx) die("ibv_open_device");
    ibv_pd* pd = ibv_alloc_pd(ctx); if(!pd) die("ibv_alloc_pd");
    ibv_cq* cq = ibv_create_cq(ctx, 1024, nullptr, nullptr, 0); if(!cq) die("ibv_create_cq");

    // --- Local buffers / MRs / QPs (generated) ---
    {{ setup_region }}

    // --- Prepare PR_* for CLAIMED ---
    PR_QP  qps[{{ qps|length }}];
    PR_MR  mrs[{{ mrs|length }}];
    PR_Pair prs[{{ pairs|length }}];

    // Fill PR_QP
    {% for q in qps -%}
    qps[{{loop.index0}}] = (PR_QP){
        .id   = "{{ q.id }}",
        .qpn  = {{ q.qpn }},
        .psn  = {{ q.psn|default(0) }},
        .port = {{ q.port|default(1) }},
        .lid  = {{ q.lid|default(0) }},
        .gid  = "" // will set below
    };
    pr_qp_set_gid_str(&qps[{{loop.index0}}], "{{ q.gid|default('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00') }}");
    {% endfor %}

    // Fill PR_MR
    {% for m in mrs -%}
    mrs[{{loop.index0}}] = (PR_MR){
        .id     = "{{ m.id }}",
        .addr   = (uint64_t)({{ m.addr_expr }}),
        .length = {{ m.length }},
        .lkey   = {{ m.lkey }}
    };
    {% endfor %}

    // Fill PR_Pair
    {% for p in pairs -%}
    prs[{{loop.index0}}] = (PR_Pair){
        .id     = "{{ p.id }}",
        .cli_id = "{{ p.cli_id }}",
        .srv_id = "{{ p.srv_id }}"
    };
    {% endfor %}

    // --- CLAIMED ---
    pr_write_client_update_claimed(CLIENT_UPDATE_PATH, qps, {{qps|length}}, mrs, {{mrs|length}}, prs, {{pairs|length}});

    // --- Optional early verbs (don’t need remote params; e.g., PostRecv) ---
    {{ early_verbs_region }}

    // --- WAIT/RESOLVE gate (inserted only if needed) ---
    {% if need_gate %}
    if (!pr_wait_pair_state(BUNDLE_ENV, PAIR_ID, "{{ wait_state|default('READY') }}", {{ wait_timeout_ms|default(15000) }})) {
        fprintf(stderr, "timeout waiting for {{ wait_state|default('READY') }} on %s\n", PAIR_ID);
        return -1;
    }

    // Resolve remote QP / MR (by-id). Use whatever you actually need later.
    uint32_t rqpn=0, rpsn=0; uint16_t rlid=0; uint8_t rgid[16]={0}; uint8_t rport=IB_PORT;
    pr_resolve_remote_qp(SRV_ID, &rqpn, &rpsn, &rlid, rgid, &rport);

    uint64_t raddr=0; uint32_t rrkey=0, rlen=0;
    pr_resolve_remote_mr("{{ first_remote_mr_id|default('rbuf_srv0') }}", &raddr, &rrkey, &rlen);

    // READY (announce)
    pr_write_client_update_ready(CLIENT_UPDATE_PATH, qps, {{qps|length}}, mrs, {{mrs|length}}, prs, {{pairs|length}});
    {% endif %}

    // --- Main verbs body (generated) ---
    {{ verbs_region }}

    // --- Optional CQ polling / cleanup (generated or static) ---
    {{ epilog_region }}

    return 0;
}
